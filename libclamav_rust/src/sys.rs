/* automatically generated by rust-bindgen 0.59.2 */

#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]

pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type time_t = __time_t;
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub const cl_error_t_CL_CLEAN: cl_error_t = 0;
pub const cl_error_t_CL_SUCCESS: cl_error_t = 0;
pub const cl_error_t_CL_VIRUS: cl_error_t = 1;
pub const cl_error_t_CL_ENULLARG: cl_error_t = 2;
pub const cl_error_t_CL_EARG: cl_error_t = 3;
pub const cl_error_t_CL_EMALFDB: cl_error_t = 4;
pub const cl_error_t_CL_ECVD: cl_error_t = 5;
pub const cl_error_t_CL_EVERIFY: cl_error_t = 6;
pub const cl_error_t_CL_EUNPACK: cl_error_t = 7;
pub const cl_error_t_CL_EOPEN: cl_error_t = 8;
pub const cl_error_t_CL_ECREAT: cl_error_t = 9;
pub const cl_error_t_CL_EUNLINK: cl_error_t = 10;
pub const cl_error_t_CL_ESTAT: cl_error_t = 11;
pub const cl_error_t_CL_EREAD: cl_error_t = 12;
pub const cl_error_t_CL_ESEEK: cl_error_t = 13;
pub const cl_error_t_CL_EWRITE: cl_error_t = 14;
pub const cl_error_t_CL_EDUP: cl_error_t = 15;
pub const cl_error_t_CL_EACCES: cl_error_t = 16;
pub const cl_error_t_CL_ETMPFILE: cl_error_t = 17;
pub const cl_error_t_CL_ETMPDIR: cl_error_t = 18;
pub const cl_error_t_CL_EMAP: cl_error_t = 19;
pub const cl_error_t_CL_EMEM: cl_error_t = 20;
pub const cl_error_t_CL_ETIMEOUT: cl_error_t = 21;
pub const cl_error_t_CL_BREAK: cl_error_t = 22;
pub const cl_error_t_CL_EMAXREC: cl_error_t = 23;
pub const cl_error_t_CL_EMAXSIZE: cl_error_t = 24;
pub const cl_error_t_CL_EMAXFILES: cl_error_t = 25;
pub const cl_error_t_CL_EFORMAT: cl_error_t = 26;
pub const cl_error_t_CL_EPARSE: cl_error_t = 27;
pub const cl_error_t_CL_EBYTECODE: cl_error_t = 28;
pub const cl_error_t_CL_EBYTECODE_TESTFAIL: cl_error_t = 29;
pub const cl_error_t_CL_ELOCK: cl_error_t = 30;
pub const cl_error_t_CL_EBUSY: cl_error_t = 31;
pub const cl_error_t_CL_ESTATE: cl_error_t = 32;
pub const cl_error_t_CL_VERIFIED: cl_error_t = 33;
pub const cl_error_t_CL_ERROR: cl_error_t = 34;
pub const cl_error_t_CL_ELAST_ERROR: cl_error_t = 35;
pub type cl_error_t = ::std::os::raw::c_uint;
#[doc = " scan options"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_scan_options {
    pub general: u32,
    pub parse: u32,
    pub heuristic: u32,
    pub mail: u32,
    pub dev: u32,
}
#[test]
fn bindgen_test_layout_cl_scan_options() {
    assert_eq!(
        ::std::mem::size_of::<cl_scan_options>(),
        20usize,
        concat!("Size of: ", stringify!(cl_scan_options))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_scan_options>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_scan_options))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_scan_options>())).general as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_scan_options),
            "::",
            stringify!(general)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_scan_options>())).parse as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_scan_options),
            "::",
            stringify!(parse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_scan_options>())).heuristic as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_scan_options),
            "::",
            stringify!(heuristic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_scan_options>())).mail as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_scan_options),
            "::",
            stringify!(mail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_scan_options>())).dev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_scan_options),
            "::",
            stringify!(dev)
        )
    );
}
pub const bytecode_security_CL_BYTECODE_TRUST_ALL: bytecode_security = 0;
pub const bytecode_security_CL_BYTECODE_TRUST_SIGNED: bytecode_security = 1;
pub const bytecode_security_CL_BYTECODE_TRUST_NOTHING: bytecode_security = 2;
pub type bytecode_security = ::std::os::raw::c_uint;
pub const bytecode_mode_CL_BYTECODE_MODE_AUTO: bytecode_mode = 0;
pub const bytecode_mode_CL_BYTECODE_MODE_JIT: bytecode_mode = 1;
pub const bytecode_mode_CL_BYTECODE_MODE_INTERPRETER: bytecode_mode = 2;
pub const bytecode_mode_CL_BYTECODE_MODE_TEST: bytecode_mode = 3;
pub const bytecode_mode_CL_BYTECODE_MODE_OFF: bytecode_mode = 4;
pub type bytecode_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_section_hash {
    pub md5: [::std::os::raw::c_uchar; 16usize],
    pub len: size_t,
}
#[test]
fn bindgen_test_layout_cli_section_hash() {
    assert_eq!(
        ::std::mem::size_of::<cli_section_hash>(),
        24usize,
        concat!("Size of: ", stringify!(cli_section_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_section_hash>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_section_hash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_section_hash>())).md5 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_section_hash),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_section_hash>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_section_hash),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_stats_sections {
    pub nsections: size_t,
    pub sections: *mut cli_section_hash,
}
#[test]
fn bindgen_test_layout_cli_stats_sections() {
    assert_eq!(
        ::std::mem::size_of::<cli_stats_sections>(),
        16usize,
        concat!("Size of: ", stringify!(cli_stats_sections))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_stats_sections>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_stats_sections))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_stats_sections>())).nsections as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_stats_sections),
            "::",
            stringify!(nsections)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_stats_sections>())).sections as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_stats_sections),
            "::",
            stringify!(sections)
        )
    );
}
pub type stats_section_t = cli_stats_sections;
#[doc = " @brief Pre-cache callback."]
#[doc = ""]
#[doc = " Called for each processed file (both the entry level - AKA 'outer' - file and"]
#[doc = " inner files - those generated when processing archive and container files), before"]
#[doc = " the actual scanning takes place."]
#[doc = ""]
#[doc = " @param fd        File descriptor which is about to be scanned."]
#[doc = " @param type      File type detected via magic - i.e. NOT on the fly - (e.g. \"CL_TYPE_MSEXE\")."]
#[doc = " @param context   Opaque application provided data."]
#[doc = " @return          CL_CLEAN = File is scanned."]
#[doc = " @return          CL_BREAK = Allowed by callback - file is skipped and marked as clean."]
#[doc = " @return          CL_VIRUS = Blocked by callback - file is skipped and marked as infected."]
pub type clcb_pre_cache = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        type_: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t,
>;
#[doc = " @brief Pre-scan callback."]
#[doc = ""]
#[doc = " Called for each NEW file (inner and outer) before the scanning takes place. This is"]
#[doc = " roughly the the same as clcb_before_cache, but it is affected by clean file caching."]
#[doc = " This means that it won't be called if a clean cached file (inner or outer) is"]
#[doc = " scanned a second time."]
#[doc = ""]
#[doc = " @param fd        File descriptor which is about to be scanned."]
#[doc = " @param type      File type detected via magic - i.e. NOT on the fly - (e.g. \"CL_TYPE_MSEXE\")."]
#[doc = " @param context   Opaque application provided data."]
#[doc = " @return          CL_CLEAN = File is scanned."]
#[doc = " @return          CL_BREAK = Allowed by callback - file is skipped and marked as clean."]
#[doc = " @return          CL_VIRUS = Blocked by callback - file is skipped and marked as infected."]
pub type clcb_pre_scan = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        type_: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t,
>;
#[doc = " @brief Post-scan callback."]
#[doc = ""]
#[doc = " Called for each processed file (inner and outer), after the scanning is complete."]
#[doc = " In all-match mode, the virname will be one of the matches, but there is no"]
#[doc = " guarantee in which order the matches will occur, thus the final virname may"]
#[doc = " be any one of the matches."]
#[doc = ""]
#[doc = " @param fd        File descriptor which was scanned."]
#[doc = " @param result    The scan result for the file."]
#[doc = " @param virname   A signature name if there was one or more matches."]
#[doc = " @param context   Opaque application provided data."]
#[doc = " @return          Scan result is not overridden."]
#[doc = " @return          CL_BREAK = Allowed by callback - scan result is set to CL_CLEAN."]
#[doc = " @return          Blocked by callback - scan result is set to CL_VIRUS."]
pub type clcb_post_scan = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        result: ::std::os::raw::c_int,
        virname: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t,
>;
#[doc = " @brief Virus-found callback."]
#[doc = ""]
#[doc = " Called for each signature match."]
#[doc = " If all-match is enabled, clcb_virus_found() may be called multiple times per"]
#[doc = " scan."]
#[doc = ""]
#[doc = " In addition, clcb_virus_found() does not have a return value and thus."]
#[doc = " can not be used to ignore the match."]
#[doc = ""]
#[doc = " @param fd        File descriptor which was scanned."]
#[doc = " @param virname   Virus name."]
#[doc = " @param context   Opaque application provided data."]
pub type clcb_virus_found = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        virname: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " @brief Signature-load callback."]
#[doc = ""]
#[doc = " May be used to ignore signatures at database load time."]
#[doc = ""]
#[doc = " WARNING: Some signatures (notably ldb, cbc) can be dependent upon other signatures."]
#[doc = "          Failure to preserve dependency chains will result in database loading failure."]
#[doc = "          It is the implementor's responsibility to guarantee consistency."]
#[doc = ""]
#[doc = " @param type      The signature type (e.g. \"db\", \"ndb\", \"mdb\", etc.)"]
#[doc = " @param name      Signature name."]
#[doc = " @param custom    The signature is official (custom == 0) or custom (custom != 0)"]
#[doc = " @param context   Opaque application provided data"]
#[doc = " @return          0 to load the current signature."]
#[doc = " @return          Non-0 to skip the current signature."]
pub type clcb_sigload = ::std::option::Option<
    unsafe extern "C" fn(
        type_: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        custom: ::std::os::raw::c_uint,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " @brief Progress callback for sig-load, engine-compile, and engine-free."]
#[doc = ""]
#[doc = " Progress is complete when total_items == now_completed."]
#[doc = ""]
#[doc = " Note: The callback should return CL_SUCCESS. We reserve the right to have it"]
#[doc = "       cancel the operation in the future if you return something else..."]
#[doc = "       ... but for now, the return value will be ignored."]
#[doc = ""]
#[doc = " @param total_items   Total number of items"]
#[doc = " @param now_completed Number of items completed"]
#[doc = " @param context       Opaque application provided data"]
#[doc = " @return cl_error_t   reserved for future use"]
pub type clcb_progress = ::std::option::Option<
    unsafe extern "C" fn(
        total_items: size_t,
        now_completed: size_t,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t,
>;
#[doc = " @brief LibClamAV hash stats callback."]
#[doc = ""]
#[doc = " Callback that provides the hash of a scanned sample if a signature alerted."]
#[doc = " Provides a mechanism to record detection statistics."]
#[doc = ""]
#[doc = " @param fd        File descriptor if available, else -1."]
#[doc = " @param size      Sample size"]
#[doc = " @param md5       Sample md5 hash"]
#[doc = " @param virname   Signature name that the sample matched against"]
#[doc = " @param context   Opaque application provided data"]
pub type clcb_hash = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        size: ::std::os::raw::c_ulonglong,
        md5: *const ::std::os::raw::c_uchar,
        virname: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " @brief Archive meta matching callback function."]
#[doc = ""]
#[doc = " May be used to block archive/container samples based on archive metadata."]
#[doc = " Function is invoked multiple times per archive. Typically once per contained file."]
#[doc = ""]
#[doc = " Note: Used by the --archive-verbose clamscan option. Overriding this will alter"]
#[doc = " the output from --archive-verbose."]
#[doc = ""]
#[doc = " @param container_type    String name of type (CL_TYPE)."]
#[doc = " @param fsize_container   Sample size"]
#[doc = " @param filename          Filename associated with the data in archive."]
#[doc = " @param fsize_real        Size of file after decompression (according to the archive)."]
#[doc = " @param is_encrypted      Boolean non-zero if the contained file is encrypted."]
#[doc = " @param filepos_container File index in container."]
#[doc = " @param context           Opaque application provided data."]
#[doc = " @return                  CL_VIRUS to block (alert on)"]
#[doc = " @return                  CL_CLEAN to continue scanning"]
pub type clcb_meta = ::std::option::Option<
    unsafe extern "C" fn(
        container_type: *const ::std::os::raw::c_char,
        fsize_container: ::std::os::raw::c_ulong,
        filename: *const ::std::os::raw::c_char,
        fsize_real: ::std::os::raw::c_ulong,
        is_encrypted: ::std::os::raw::c_int,
        filepos_container: ::std::os::raw::c_uint,
        context: *mut ::std::os::raw::c_void,
    ) -> cl_error_t,
>;
#[doc = " @brief File properties callback function."]
#[doc = ""]
#[doc = " Invoked after a scan the CL_SCAN_GENERAL_COLLECT_METADATA general scan option"]
#[doc = " is enabled and libclamav was built with json support."]
#[doc = ""]
#[doc = " @param j_propstr File properties/metadata in a JSON encoded string."]
#[doc = " @param rc        The cl_error_t return code from the scan."]
#[doc = " @param cbdata    Opaque application provided data."]
pub type clcb_file_props = ::std::option::Option<
    unsafe extern "C" fn(
        j_propstr: *const ::std::os::raw::c_char,
        rc: ::std::os::raw::c_int,
        cbdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[doc = " @brief Add sample metadata to the statistics for a sample that matched on a signature."]
#[doc = ""]
#[doc = " @param virname   Name of the signature that matched."]
#[doc = " @param md5       Sample hash."]
#[doc = " @param size      Sample size."]
#[doc = " @param sections  PE section data, if applicable."]
#[doc = " @param cbdata    The statistics data. Probably a pointer to a malloc'd struct."]
pub type clcb_stats_add_sample = ::std::option::Option<
    unsafe extern "C" fn(
        virname: *const ::std::os::raw::c_char,
        md5: *const ::std::os::raw::c_uchar,
        size: size_t,
        sections: *mut stats_section_t,
        cbdata: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " @brief Remove a specific sample from the statistics report."]
#[doc = ""]
#[doc = " @param virname   Name of the signature that matched."]
#[doc = " @param md5       Sample hash."]
#[doc = " @param size      Sample size."]
#[doc = " @param cbdata    The statistics data. Probably a pointer to a malloc'd struct."]
pub type clcb_stats_remove_sample = ::std::option::Option<
    unsafe extern "C" fn(
        virname: *const ::std::os::raw::c_char,
        md5: *const ::std::os::raw::c_uchar,
        size: size_t,
        cbdata: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " @brief Decrement the hit count listed in the statistics report for a specific sample."]
#[doc = ""]
#[doc = " @param virname   Name of the signature that matched."]
#[doc = " @param md5       Sample hash."]
#[doc = " @param size      Sample size."]
#[doc = " @param cbdata    The statistics data. Probably a pointer to a malloc'd struct."]
pub type clcb_stats_decrement_count = ::std::option::Option<
    unsafe extern "C" fn(
        virname: *const ::std::os::raw::c_char,
        md5: *const ::std::os::raw::c_uchar,
        size: size_t,
        cbdata: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " @brief Function to submit a statistics report."]
#[doc = ""]
#[doc = " @param engine    The initialized scanning engine."]
#[doc = " @param cbdata    The statistics data. Probably a pointer to a malloc'd struct."]
pub type clcb_stats_submit = ::std::option::Option<
    unsafe extern "C" fn(engine: *mut cl_engine, cbdata: *mut ::std::os::raw::c_void),
>;
#[doc = " @brief Function to flush/free the statistics report data."]
#[doc = ""]
#[doc = " @param engine    The initialized scanning engine."]
#[doc = " @param cbdata    The statistics data. Probably a pointer to a malloc'd struct."]
pub type clcb_stats_flush = ::std::option::Option<
    unsafe extern "C" fn(engine: *mut cl_engine, cbdata: *mut ::std::os::raw::c_void),
>;
#[doc = " @brief Function to get the number of samples listed in the statistics report."]
#[doc = ""]
#[doc = " @param cbdata    The statistics data. Probably a pointer to a malloc'd struct."]
pub type clcb_stats_get_num =
    ::std::option::Option<unsafe extern "C" fn(cbdata: *mut ::std::os::raw::c_void) -> size_t>;
#[doc = " @brief Function to get the size of memory used to store the statistics report."]
#[doc = ""]
#[doc = " @param cbdata    The statistics data. Probably a pointer to a malloc'd struct."]
pub type clcb_stats_get_size =
    ::std::option::Option<unsafe extern "C" fn(cbdata: *mut ::std::os::raw::c_void) -> size_t>;
#[doc = " @brief Function to get the machine's unique host ID."]
#[doc = ""]
#[doc = " @param cbdata    The statistics data. Probably a pointer to a malloc'd struct."]
pub type clcb_stats_get_hostid = ::std::option::Option<
    unsafe extern "C" fn(cbdata: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_cvd {
    pub time: *mut ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_uint,
    pub sigs: ::std::os::raw::c_uint,
    pub fl: ::std::os::raw::c_uint,
    pub md5: *mut ::std::os::raw::c_char,
    pub dsig: *mut ::std::os::raw::c_char,
    pub builder: *mut ::std::os::raw::c_char,
    pub stime: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cl_cvd() {
    assert_eq!(
        ::std::mem::size_of::<cl_cvd>(),
        56usize,
        concat!("Size of: ", stringify!(cl_cvd))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_cvd>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_cvd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_cvd>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_cvd),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_cvd>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_cvd),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_cvd>())).sigs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_cvd),
            "::",
            stringify!(sigs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_cvd>())).fl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_cvd),
            "::",
            stringify!(fl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_cvd>())).md5 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_cvd),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_cvd>())).dsig as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_cvd),
            "::",
            stringify!(dsig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_cvd>())).builder as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_cvd),
            "::",
            stringify!(builder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_cvd>())).stime as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_cvd),
            "::",
            stringify!(stime)
        )
    );
}
pub type cl_fmap_t = cl_fmap;
#[doc = " @brief Read callback function type."]
#[doc = ""]
#[doc = " A callback function pointer type for reading data from a cl_fmap_t that uses"]
#[doc = " reads data from a handle interface."]
#[doc = ""]
#[doc = " Read 'count' bytes starting at 'offset' into the buffer 'buf'"]
#[doc = ""]
#[doc = " Thread safety: It is guaranteed that only one callback is executing for a"]
#[doc = " specific handle at any time, but there might be multiple callbacks executing"]
#[doc = " for different handle at the same time."]
#[doc = ""]
#[doc = " @param handle    The handle passed to cl_fmap_open_handle, its meaning is up"]
#[doc = "                  to the callback's implementation"]
#[doc = " @param buf       A buffer to read data into, must be at least offset + count"]
#[doc = "                  bytes in size."]
#[doc = " @param count     The number of bytes to read."]
#[doc = " @param offset    The the offset into buf to read the data to. If successful,"]
#[doc = "                  the number of bytes actually read is returned. Upon reading"]
#[doc = "                  end-of-file, zero is returned. Otherwise, a -1 is returned"]
#[doc = "                  and the global variable errno is set to indicate the error."]
pub type clcb_pread = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        buf: *mut ::std::os::raw::c_void,
        count: size_t,
        offset: off_t,
    ) -> off_t,
>;
pub type fmap_t = cl_fmap_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_fmap {
    pub handle: *mut ::std::os::raw::c_void,
    pub pread_cb: clcb_pread,
    pub data: *const ::std::os::raw::c_void,
    pub mtime: time_t,
    pub pages: u64,
    pub pgsz: u64,
    pub paged: u64,
    pub aging: u16,
    pub dont_cache_flag: u16,
    #[doc = " indicates if we should not cache scan results for this fmap. Used if limits exceeded"]
    pub handle_is_fd: u16,
    #[doc = " non-zero if map->handle is an fd."]
    pub offset: size_t,
    #[doc = " file offset representing start of original fmap, if the fmap created reading from a file starting at offset other than 0"]
    pub nested_offset: size_t,
    #[doc = " offset from start of original fmap (data) for nested scan. 0 for orig fmap."]
    pub real_len: size_t,
    #[doc = " len from start of original fmap (data) to end of current (possibly nested) map."]
    pub len: size_t,
    #[doc = " length of data from nested_offset, accessible via current fmap"]
    pub unmap: ::std::option::Option<unsafe extern "C" fn(arg1: *mut fmap_t)>,
    pub need: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut fmap_t,
            at: size_t,
            len: size_t,
            lock: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub need_offstr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut fmap_t,
            at: size_t,
            len_hint: size_t,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub gets: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut fmap_t,
            dst: *mut ::std::os::raw::c_char,
            at: *mut size_t,
            max_len: size_t,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub unneed_off:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut fmap_t, at: size_t, len: size_t)>,
    pub have_maphash: bool,
    pub maphash: [::std::os::raw::c_uchar; 16usize],
    pub bitmap: *mut u64,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cl_fmap() {
    assert_eq!(
        ::std::mem::size_of::<cl_fmap>(),
        176usize,
        concat!("Size of: ", stringify!(cl_fmap))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_fmap>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_fmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).pread_cb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(pread_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).mtime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).pages as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).pgsz as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(pgsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).paged as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(paged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).aging as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(aging)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).dont_cache_flag as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(dont_cache_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).handle_is_fd as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(handle_is_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).offset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).nested_offset as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(nested_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).real_len as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(real_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).len as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).unmap as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(unmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).need as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(need)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).need_offstr as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(need_offstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).gets as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(gets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).unneed_off as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(unneed_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).have_maphash as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(have_maphash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).maphash as *const _ as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(maphash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).bitmap as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_fmap>())).name as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_fmap),
            "::",
            stringify!(name)
        )
    );
}
pub const cli_file_CL_TYPE_ANY: cli_file = 0;
pub const cli_file_CL_TYPE_TEXT_ASCII: cli_file = 500;
pub const cli_file_CL_TYPE_TEXT_UTF8: cli_file = 501;
pub const cli_file_CL_TYPE_TEXT_UTF16LE: cli_file = 502;
pub const cli_file_CL_TYPE_TEXT_UTF16BE: cli_file = 503;
pub const cli_file_CL_TYPE_BINARY_DATA: cli_file = 504;
pub const cli_file_CL_TYPE_ERROR: cli_file = 505;
pub const cli_file_CL_TYPE_MSEXE: cli_file = 506;
pub const cli_file_CL_TYPE_ELF: cli_file = 507;
pub const cli_file_CL_TYPE_MACHO: cli_file = 508;
pub const cli_file_CL_TYPE_MACHO_UNIBIN: cli_file = 509;
pub const cli_file_CL_TYPE_POSIX_TAR: cli_file = 510;
pub const cli_file_CL_TYPE_OLD_TAR: cli_file = 511;
pub const cli_file_CL_TYPE_CPIO_OLD: cli_file = 512;
pub const cli_file_CL_TYPE_CPIO_ODC: cli_file = 513;
pub const cli_file_CL_TYPE_CPIO_NEWC: cli_file = 514;
pub const cli_file_CL_TYPE_CPIO_CRC: cli_file = 515;
pub const cli_file_CL_TYPE_GZ: cli_file = 516;
pub const cli_file_CL_TYPE_ZIP: cli_file = 517;
pub const cli_file_CL_TYPE_BZ: cli_file = 518;
pub const cli_file_CL_TYPE_RAR: cli_file = 519;
pub const cli_file_CL_TYPE_ARJ: cli_file = 520;
pub const cli_file_CL_TYPE_MSSZDD: cli_file = 521;
pub const cli_file_CL_TYPE_MSOLE2: cli_file = 522;
pub const cli_file_CL_TYPE_MSCAB: cli_file = 523;
pub const cli_file_CL_TYPE_MSCHM: cli_file = 524;
pub const cli_file_CL_TYPE_SIS: cli_file = 525;
pub const cli_file_CL_TYPE_SCRENC: cli_file = 526;
pub const cli_file_CL_TYPE_GRAPHICS: cli_file = 527;
pub const cli_file_CL_TYPE_GIF: cli_file = 528;
pub const cli_file_CL_TYPE_PNG: cli_file = 529;
pub const cli_file_CL_TYPE_JPEG: cli_file = 530;
pub const cli_file_CL_TYPE_TIFF: cli_file = 531;
pub const cli_file_CL_TYPE_RIFF: cli_file = 532;
pub const cli_file_CL_TYPE_BINHEX: cli_file = 533;
pub const cli_file_CL_TYPE_TNEF: cli_file = 534;
pub const cli_file_CL_TYPE_CRYPTFF: cli_file = 535;
pub const cli_file_CL_TYPE_PDF: cli_file = 536;
pub const cli_file_CL_TYPE_UUENCODED: cli_file = 537;
pub const cli_file_CL_TYPE_SCRIPT: cli_file = 538;
pub const cli_file_CL_TYPE_HTML_UTF16: cli_file = 539;
pub const cli_file_CL_TYPE_RTF: cli_file = 540;
pub const cli_file_CL_TYPE_7Z: cli_file = 541;
pub const cli_file_CL_TYPE_SWF: cli_file = 542;
pub const cli_file_CL_TYPE_JAVA: cli_file = 543;
pub const cli_file_CL_TYPE_XAR: cli_file = 544;
pub const cli_file_CL_TYPE_XZ: cli_file = 545;
pub const cli_file_CL_TYPE_OOXML_WORD: cli_file = 546;
pub const cli_file_CL_TYPE_OOXML_PPT: cli_file = 547;
pub const cli_file_CL_TYPE_OOXML_XL: cli_file = 548;
pub const cli_file_CL_TYPE_INTERNAL: cli_file = 549;
pub const cli_file_CL_TYPE_HWP3: cli_file = 550;
pub const cli_file_CL_TYPE_OOXML_HWP: cli_file = 551;
pub const cli_file_CL_TYPE_PS: cli_file = 552;
pub const cli_file_CL_TYPE_EGG: cli_file = 553;
pub const cli_file_CL_TYPE_PART_ANY: cli_file = 554;
pub const cli_file_CL_TYPE_PART_HFSPLUS: cli_file = 555;
pub const cli_file_CL_TYPE_MBR: cli_file = 556;
pub const cli_file_CL_TYPE_HTML: cli_file = 557;
pub const cli_file_CL_TYPE_MAIL: cli_file = 558;
pub const cli_file_CL_TYPE_SFX: cli_file = 559;
pub const cli_file_CL_TYPE_ZIPSFX: cli_file = 560;
pub const cli_file_CL_TYPE_RARSFX: cli_file = 561;
pub const cli_file_CL_TYPE_7ZSFX: cli_file = 562;
pub const cli_file_CL_TYPE_CABSFX: cli_file = 563;
pub const cli_file_CL_TYPE_ARJSFX: cli_file = 564;
pub const cli_file_CL_TYPE_EGGSFX: cli_file = 565;
pub const cli_file_CL_TYPE_NULSFT: cli_file = 566;
pub const cli_file_CL_TYPE_AUTOIT: cli_file = 567;
pub const cli_file_CL_TYPE_ISHIELD_MSI: cli_file = 568;
pub const cli_file_CL_TYPE_ISO9660: cli_file = 569;
pub const cli_file_CL_TYPE_DMG: cli_file = 570;
pub const cli_file_CL_TYPE_GPT: cli_file = 571;
pub const cli_file_CL_TYPE_APM: cli_file = 572;
pub const cli_file_CL_TYPE_XDP: cli_file = 573;
pub const cli_file_CL_TYPE_XML_WORD: cli_file = 574;
pub const cli_file_CL_TYPE_XML_XL: cli_file = 575;
pub const cli_file_CL_TYPE_XML_HWP: cli_file = 576;
pub const cli_file_CL_TYPE_HWPOLE2: cli_file = 577;
pub const cli_file_CL_TYPE_MHTML: cli_file = 578;
pub const cli_file_CL_TYPE_LNK: cli_file = 579;
pub const cli_file_CL_TYPE_OTHER: cli_file = 580;
pub const cli_file_CL_TYPE_IGNORED: cli_file = 581;
pub type cli_file = ::std::os::raw::c_uint;
pub use self::cli_file as cli_file_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_ftype {
    pub type_: cli_file_t,
    pub offset: u32,
    pub magic: *mut ::std::os::raw::c_uchar,
    pub tname: *mut ::std::os::raw::c_char,
    pub next: *mut cli_ftype,
    pub length: u16,
}
#[test]
fn bindgen_test_layout_cli_ftype() {
    assert_eq!(
        ::std::mem::size_of::<cli_ftype>(),
        40usize,
        concat!("Size of: ", stringify!(cli_ftype))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ftype>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ftype))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ftype>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ftype),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ftype>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ftype),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ftype>())).magic as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ftype),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ftype>())).tname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ftype),
            "::",
            stringify!(tname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ftype>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ftype),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ftype>())).length as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ftype),
            "::",
            stringify!(length)
        )
    );
}
pub type mpool_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_dconf {
    pub pe: u32,
    pub elf: u32,
    pub macho: u32,
    pub archive: u32,
    pub doc: u32,
    pub mail: u32,
    pub other: u32,
    pub phishing: u32,
    pub bytecode: u32,
    pub stats: u32,
    pub pcre: u32,
}
#[test]
fn bindgen_test_layout_cli_dconf() {
    assert_eq!(
        ::std::mem::size_of::<cli_dconf>(),
        44usize,
        concat!("Size of: ", stringify!(cli_dconf))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_dconf>(),
        4usize,
        concat!("Alignment of ", stringify!(cli_dconf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).pe as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(pe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).elf as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(elf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).macho as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(macho)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).archive as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(archive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).doc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(doc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).mail as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(mail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).other as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).phishing as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(phishing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).bytecode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(bytecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).stats as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dconf>())).pcre as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dconf),
            "::",
            stringify!(pcre)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regex_t {
    pub re_magic: ::std::os::raw::c_int,
    pub re_nsub: size_t,
    pub re_endp: *const ::std::os::raw::c_char,
    pub re_g: *mut re_guts,
}
#[test]
fn bindgen_test_layout_regex_t() {
    assert_eq!(
        ::std::mem::size_of::<regex_t>(),
        32usize,
        concat!("Size of: ", stringify!(regex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<regex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(regex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regex_t>())).re_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regex_t),
            "::",
            stringify!(re_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regex_t>())).re_nsub as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regex_t),
            "::",
            stringify!(re_nsub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regex_t>())).re_endp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regex_t),
            "::",
            stringify!(re_endp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regex_t>())).re_g as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regex_t),
            "::",
            stringify!(re_g)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bytecode_metadata {
    pub compiler: *mut ::std::os::raw::c_char,
    pub sigmaker: *mut ::std::os::raw::c_char,
    pub timestamp: u64,
    pub formatlevel: ::std::os::raw::c_uint,
    pub minfunc: ::std::os::raw::c_uint,
    pub maxfunc: ::std::os::raw::c_uint,
    pub maxresource: ::std::os::raw::c_uint,
    pub targetExclude: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_bytecode_metadata() {
    assert_eq!(
        ::std::mem::size_of::<bytecode_metadata>(),
        48usize,
        concat!("Size of: ", stringify!(bytecode_metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<bytecode_metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(bytecode_metadata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bytecode_metadata>())).compiler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bytecode_metadata),
            "::",
            stringify!(compiler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bytecode_metadata>())).sigmaker as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bytecode_metadata),
            "::",
            stringify!(sigmaker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bytecode_metadata>())).timestamp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bytecode_metadata),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bytecode_metadata>())).formatlevel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bytecode_metadata),
            "::",
            stringify!(formatlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bytecode_metadata>())).minfunc as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bytecode_metadata),
            "::",
            stringify!(minfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bytecode_metadata>())).maxfunc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bytecode_metadata),
            "::",
            stringify!(maxfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bytecode_metadata>())).maxresource as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(bytecode_metadata),
            "::",
            stringify!(maxresource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bytecode_metadata>())).targetExclude as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bytecode_metadata),
            "::",
            stringify!(targetExclude)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_environment {
    pub platform_id_a: u32,
    pub platform_id_b: u32,
    pub platform_id_c: u32,
    pub c_version: u32,
    pub cpp_version: u32,
    pub functionality_level: u32,
    pub dconf_level: u32,
    pub engine_version: [i8; 65usize],
    pub triple: [i8; 65usize],
    pub cpu: [i8; 65usize],
    pub sysname: [i8; 65usize],
    pub release: [i8; 65usize],
    pub version: [i8; 65usize],
    pub machine: [i8; 65usize],
    pub big_endian: u8,
    pub sizeof_ptr: u8,
    pub arch: u8,
    pub os_category: u8,
    pub os: u8,
    pub compiler: u8,
    pub has_jit_compiled: u8,
    pub os_features: u8,
    pub reserved0: u8,
}
#[test]
fn bindgen_test_layout_cli_environment() {
    assert_eq!(
        ::std::mem::size_of::<cli_environment>(),
        492usize,
        concat!("Size of: ", stringify!(cli_environment))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_environment>(),
        4usize,
        concat!("Alignment of ", stringify!(cli_environment))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).platform_id_a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(platform_id_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).platform_id_b as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(platform_id_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).platform_id_c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(platform_id_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).c_version as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(c_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).cpp_version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(cpp_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_environment>())).functionality_level as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(functionality_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).dconf_level as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(dconf_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).engine_version as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(engine_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).triple as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(triple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).cpu as *const _ as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).sysname as *const _ as usize },
        223usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(sysname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).release as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).version as *const _ as usize },
        353usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).machine as *const _ as usize },
        418usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).big_endian as *const _ as usize },
        483usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(big_endian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).sizeof_ptr as *const _ as usize },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(sizeof_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).arch as *const _ as usize },
        485usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).os_category as *const _ as usize },
        486usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(os_category)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).os as *const _ as usize },
        487usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).compiler as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(compiler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_environment>())).has_jit_compiled as *const _ as usize
        },
        489usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(has_jit_compiled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).os_features as *const _ as usize },
        490usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(os_features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_environment>())).reserved0 as *const _ as usize },
        491usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_environment),
            "::",
            stringify!(reserved0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_bc_func {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_bc_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_bc_dbgnode {
    _unused: [u8; 0],
}
pub const bc_state_bc_skip: bc_state = 0;
pub const bc_state_bc_loaded: bc_state = 1;
pub const bc_state_bc_jit: bc_state = 2;
pub const bc_state_bc_interp: bc_state = 3;
pub const bc_state_bc_disabled: bc_state = 4;
pub type bc_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_bc {
    pub metadata: bytecode_metadata,
    pub id: ::std::os::raw::c_uint,
    pub kind: ::std::os::raw::c_uint,
    pub num_types: ::std::os::raw::c_uint,
    pub num_func: ::std::os::raw::c_uint,
    pub funcs: *mut cli_bc_func,
    pub types: *mut cli_bc_type,
    pub globals: *mut *mut u64,
    pub globaltys: *mut u16,
    pub num_globals: size_t,
    pub state: bc_state,
    pub uses_apis: *mut bitset_tag,
    pub lsig: *mut ::std::os::raw::c_char,
    pub vnameprefix: *mut ::std::os::raw::c_char,
    pub vnames: *mut *mut ::std::os::raw::c_char,
    pub vnames_cnt: ::std::os::raw::c_uint,
    pub start_tid: u16,
    pub dbgnodes: *mut cli_bc_dbgnode,
    pub dbgnode_cnt: ::std::os::raw::c_uint,
    pub hook_lsig_id: ::std::os::raw::c_uint,
    pub trusted: ::std::os::raw::c_uint,
    pub numGlobalBytes: u32,
    pub globalBytes: *mut u8,
    pub sigtime_id: u32,
    pub sigmatch_id: u32,
    pub hook_name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cli_bc() {
    assert_eq!(
        ::std::mem::size_of::<cli_bc>(),
        200usize,
        concat!("Size of: ", stringify!(cli_bc))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_bc>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_bc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).metadata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).id as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).kind as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).num_types as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(num_types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).num_func as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(num_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).funcs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).types as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).globals as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).globaltys as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(globaltys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).num_globals as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(num_globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).state as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).uses_apis as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(uses_apis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).lsig as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(lsig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).vnameprefix as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(vnameprefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).vnames as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(vnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).vnames_cnt as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(vnames_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).start_tid as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(start_tid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).dbgnodes as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(dbgnodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).dbgnode_cnt as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(dbgnode_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).hook_lsig_id as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(hook_lsig_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).trusted as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(trusted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).numGlobalBytes as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(numGlobalBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).globalBytes as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(globalBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).sigtime_id as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(sigtime_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).sigmatch_id as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(sigmatch_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bc>())).hook_name as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bc),
            "::",
            stringify!(hook_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_all_bc {
    pub all_bcs: *mut cli_bc,
    pub count: ::std::os::raw::c_uint,
    pub engine: *mut cli_bcengine,
    pub env: cli_environment,
    pub inited: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cli_all_bc() {
    assert_eq!(
        ::std::mem::size_of::<cli_all_bc>(),
        520usize,
        concat!("Size of: ", stringify!(cli_all_bc))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_all_bc>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_all_bc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_all_bc>())).all_bcs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_all_bc),
            "::",
            stringify!(all_bcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_all_bc>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_all_bc),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_all_bc>())).engine as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_all_bc),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_all_bc>())).env as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_all_bc),
            "::",
            stringify!(env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_all_bc>())).inited as *const _ as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_all_bc),
            "::",
            stringify!(inited)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_events {
    _unused: [u8; 0],
}
pub type cli_events_t = cli_events;
pub type ulong64 = ::std::os::raw::c_ulong;
pub type fp_digit = ulong64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fp_int {
    pub dp: [fp_digit; 136usize],
    pub used: ::std::os::raw::c_int,
    pub sign: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fp_int() {
    assert_eq!(
        ::std::mem::size_of::<fp_int>(),
        1096usize,
        concat!("Size of: ", stringify!(fp_int))
    );
    assert_eq!(
        ::std::mem::align_of::<fp_int>(),
        8usize,
        concat!("Alignment of ", stringify!(fp_int))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fp_int>())).dp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fp_int),
            "::",
            stringify!(dp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fp_int>())).used as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(fp_int),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fp_int>())).sign as *const _ as usize },
        1092usize,
        concat!(
            "Offset of field: ",
            stringify!(fp_int),
            "::",
            stringify!(sign)
        )
    );
}
pub type mp_int = fp_int;
pub const cli_crt_hashtype_CLI_HASHTYPE_ANY: cli_crt_hashtype = 0;
pub const cli_crt_hashtype_CLI_SHA1RSA: cli_crt_hashtype = 1;
pub const cli_crt_hashtype_CLI_MD5RSA: cli_crt_hashtype = 2;
pub const cli_crt_hashtype_CLI_MD2RSA: cli_crt_hashtype = 3;
pub const cli_crt_hashtype_CLI_RSA: cli_crt_hashtype = 4;
pub const cli_crt_hashtype_CLI_SHA256RSA: cli_crt_hashtype = 5;
pub const cli_crt_hashtype_CLI_SHA384RSA: cli_crt_hashtype = 6;
pub const cli_crt_hashtype_CLI_SHA512RSA: cli_crt_hashtype = 7;
pub type cli_crt_hashtype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_crt_t {
    pub name: *mut ::std::os::raw::c_char,
    pub raw_subject: [u8; 64usize],
    pub raw_issuer: [u8; 64usize],
    pub raw_serial: [u8; 64usize],
    pub subject: [u8; 20usize],
    pub issuer: [u8; 20usize],
    pub serial: [u8; 20usize],
    pub ignore_serial: ::std::os::raw::c_int,
    pub tbshash: [u8; 64usize],
    pub n: mp_int,
    pub e: mp_int,
    pub sig: mp_int,
    pub not_before: time_t,
    pub not_after: time_t,
    pub hashtype: cli_crt_hashtype,
    pub certSign: ::std::os::raw::c_int,
    pub codeSign: ::std::os::raw::c_int,
    pub timeSign: ::std::os::raw::c_int,
    pub isBlocked: ::std::os::raw::c_int,
    pub prev: *mut cli_crt_t,
    pub next: *mut cli_crt_t,
}
#[test]
fn bindgen_test_layout_cli_crt_t() {
    assert_eq!(
        ::std::mem::size_of::<cli_crt_t>(),
        3672usize,
        concat!("Size of: ", stringify!(cli_crt_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_crt_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_crt_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).raw_subject as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(raw_subject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).raw_issuer as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(raw_issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).raw_serial as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(raw_serial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).subject as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).issuer as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(issuer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).serial as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(serial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).ignore_serial as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(ignore_serial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).tbshash as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(tbshash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).n as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).e as *const _ as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).sig as *const _ as usize },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).not_before as *const _ as usize },
        3616usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(not_before)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).not_after as *const _ as usize },
        3624usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(not_after)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).hashtype as *const _ as usize },
        3632usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(hashtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).certSign as *const _ as usize },
        3636usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(certSign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).codeSign as *const _ as usize },
        3640usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(codeSign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).timeSign as *const _ as usize },
        3644usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(timeSign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).isBlocked as *const _ as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(isBlocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).prev as *const _ as usize },
        3656usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_crt_t>())).next as *const _ as usize },
        3664usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_crt_t),
            "::",
            stringify!(next)
        )
    );
}
pub type cli_crt = cli_crt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crtmgr {
    pub crts: *mut cli_crt,
    pub items: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_crtmgr() {
    assert_eq!(
        ::std::mem::size_of::<crtmgr>(),
        16usize,
        concat!("Size of: ", stringify!(crtmgr))
    );
    assert_eq!(
        ::std::mem::align_of::<crtmgr>(),
        8usize,
        concat!("Alignment of ", stringify!(crtmgr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crtmgr>())).crts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(crtmgr),
            "::",
            stringify!(crts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<crtmgr>())).items as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(crtmgr),
            "::",
            stringify!(items)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bitset_tag {
    pub bitset: *mut ::std::os::raw::c_uchar,
    pub length: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_bitset_tag() {
    assert_eq!(
        ::std::mem::size_of::<bitset_tag>(),
        16usize,
        concat!("Size of: ", stringify!(bitset_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<bitset_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(bitset_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bitset_tag>())).bitset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bitset_tag),
            "::",
            stringify!(bitset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bitset_tag>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bitset_tag),
            "::",
            stringify!(length)
        )
    );
}
pub type bitset_t = bitset_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct recursion_level_tag {
    pub type_: cli_file_t,
    pub size: size_t,
    pub fmap: *mut cl_fmap_t,
    pub recursion_level_buffer: u32,
    pub recursion_level_buffer_fmap: u32,
    pub is_normalized_layer: bool,
}
#[test]
fn bindgen_test_layout_recursion_level_tag() {
    assert_eq!(
        ::std::mem::size_of::<recursion_level_tag>(),
        40usize,
        concat!("Size of: ", stringify!(recursion_level_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<recursion_level_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(recursion_level_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<recursion_level_tag>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(recursion_level_tag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<recursion_level_tag>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(recursion_level_tag),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<recursion_level_tag>())).fmap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(recursion_level_tag),
            "::",
            stringify!(fmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<recursion_level_tag>())).recursion_level_buffer as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(recursion_level_tag),
            "::",
            stringify!(recursion_level_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<recursion_level_tag>())).recursion_level_buffer_fmap as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(recursion_level_tag),
            "::",
            stringify!(recursion_level_buffer_fmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<recursion_level_tag>())).is_normalized_layer as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(recursion_level_tag),
            "::",
            stringify!(is_normalized_layer)
        )
    );
}
pub type recursion_level_t = recursion_level_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_ctx_tag {
    #[doc = "< (optional) The filepath of the original scan target."]
    pub target_filepath: *mut ::std::os::raw::c_char,
    #[doc = "< (optional) The filepath of the current file being parsed. May be a temp file."]
    pub sub_filepath: *const ::std::os::raw::c_char,
    #[doc = "< The directory to store tmp files at this recursion depth."]
    pub sub_tmpdir: *mut ::std::os::raw::c_char,
    pub virname: *mut *const ::std::os::raw::c_char,
    pub num_viruses: ::std::os::raw::c_uint,
    pub scanned: *mut ::std::os::raw::c_ulong,
    pub root: *const cli_matcher,
    pub engine: *const cl_engine,
    pub scansize: u64,
    pub options: *mut cl_scan_options,
    pub scannedfiles: ::std::os::raw::c_uint,
    pub found_possibly_unwanted: ::std::os::raw::c_uint,
    pub corrupted_input: ::std::os::raw::c_uint,
    pub img_validate: ::std::os::raw::c_uint,
    pub recursion_stack: *mut recursion_level_t,
    pub recursion_stack_size: u32,
    pub recursion_level: u32,
    pub fmap: *mut fmap_t,
    pub next_layer_is_normalized: bool,
    pub handlertype_hash: [::std::os::raw::c_uchar; 16usize],
    pub dconf: *mut cli_dconf,
    pub hook_lsig_matches: *mut bitset_t,
    pub cb_ctx: *mut ::std::os::raw::c_void,
    pub perf: *mut cli_events_t,
    pub time_limit: timeval,
    pub limit_exceeded: bool,
    pub abort_scan: bool,
}
#[test]
fn bindgen_test_layout_cli_ctx_tag() {
    assert_eq!(
        ::std::mem::size_of::<cli_ctx_tag>(),
        200usize,
        concat!("Size of: ", stringify!(cli_ctx_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ctx_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ctx_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).target_filepath as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(target_filepath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).sub_filepath as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(sub_filepath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).sub_tmpdir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(sub_tmpdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).virname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(virname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).num_viruses as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(num_viruses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).scanned as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(scanned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).root as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).engine as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).scansize as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(scansize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).options as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).scannedfiles as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(scannedfiles)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_ctx_tag>())).found_possibly_unwanted as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(found_possibly_unwanted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).corrupted_input as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(corrupted_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).img_validate as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(img_validate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).recursion_stack as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(recursion_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_ctx_tag>())).recursion_stack_size as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(recursion_stack_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).recursion_level as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(recursion_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).fmap as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(fmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_ctx_tag>())).next_layer_is_normalized as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(next_layer_is_normalized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).handlertype_hash as *const _ as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(handlertype_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).dconf as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(dconf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).hook_lsig_matches as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(hook_lsig_matches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).cb_ctx as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(cb_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).perf as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(perf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).time_limit as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(time_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).limit_exceeded as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(limit_exceeded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ctx_tag>())).abort_scan as *const _ as usize },
        193usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ctx_tag),
            "::",
            stringify!(abort_scan)
        )
    );
}
pub type cli_ctx = cli_ctx_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icomtr {
    pub group: [::std::os::raw::c_uint; 2usize],
    pub color_avg: [::std::os::raw::c_uint; 3usize],
    pub color_x: [::std::os::raw::c_uint; 3usize],
    pub color_y: [::std::os::raw::c_uint; 3usize],
    pub gray_avg: [::std::os::raw::c_uint; 3usize],
    pub gray_x: [::std::os::raw::c_uint; 3usize],
    pub gray_y: [::std::os::raw::c_uint; 3usize],
    pub bright_avg: [::std::os::raw::c_uint; 3usize],
    pub bright_x: [::std::os::raw::c_uint; 3usize],
    pub bright_y: [::std::os::raw::c_uint; 3usize],
    pub dark_avg: [::std::os::raw::c_uint; 3usize],
    pub dark_x: [::std::os::raw::c_uint; 3usize],
    pub dark_y: [::std::os::raw::c_uint; 3usize],
    pub edge_avg: [::std::os::raw::c_uint; 3usize],
    pub edge_x: [::std::os::raw::c_uint; 3usize],
    pub edge_y: [::std::os::raw::c_uint; 3usize],
    pub noedge_avg: [::std::os::raw::c_uint; 3usize],
    pub noedge_x: [::std::os::raw::c_uint; 3usize],
    pub noedge_y: [::std::os::raw::c_uint; 3usize],
    pub rsum: ::std::os::raw::c_uint,
    pub gsum: ::std::os::raw::c_uint,
    pub bsum: ::std::os::raw::c_uint,
    pub ccount: ::std::os::raw::c_uint,
    pub name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_icomtr() {
    assert_eq!(
        ::std::mem::size_of::<icomtr>(),
        248usize,
        concat!("Size of: ", stringify!(icomtr))
    );
    assert_eq!(
        ::std::mem::align_of::<icomtr>(),
        8usize,
        concat!("Alignment of ", stringify!(icomtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).group as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).color_avg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(color_avg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).color_x as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(color_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).color_y as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(color_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).gray_avg as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(gray_avg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).gray_x as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(gray_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).gray_y as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(gray_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).bright_avg as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(bright_avg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).bright_x as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(bright_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).bright_y as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(bright_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).dark_avg as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(dark_avg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).dark_x as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(dark_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).dark_y as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(dark_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).edge_avg as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(edge_avg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).edge_x as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(edge_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).edge_y as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(edge_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).noedge_avg as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(noedge_avg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).noedge_x as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(noedge_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).noedge_y as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(noedge_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).rsum as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(rsum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).gsum as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(gsum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).bsum as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(bsum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).ccount as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(ccount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icomtr>())).name as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(icomtr),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icon_matcher {
    pub group_names: [*mut *mut ::std::os::raw::c_char; 2usize],
    pub group_counts: [::std::os::raw::c_uint; 2usize],
    pub icons: [*mut icomtr; 3usize],
    pub icon_counts: [::std::os::raw::c_uint; 3usize],
}
#[test]
fn bindgen_test_layout_icon_matcher() {
    assert_eq!(
        ::std::mem::size_of::<icon_matcher>(),
        64usize,
        concat!("Size of: ", stringify!(icon_matcher))
    );
    assert_eq!(
        ::std::mem::align_of::<icon_matcher>(),
        8usize,
        concat!("Alignment of ", stringify!(icon_matcher))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icon_matcher>())).group_names as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icon_matcher),
            "::",
            stringify!(group_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icon_matcher>())).group_counts as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(icon_matcher),
            "::",
            stringify!(group_counts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icon_matcher>())).icons as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(icon_matcher),
            "::",
            stringify!(icons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<icon_matcher>())).icon_counts as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(icon_matcher),
            "::",
            stringify!(icon_counts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_dbinfo {
    pub name: *mut ::std::os::raw::c_char,
    pub hash: *mut ::std::os::raw::c_char,
    pub size: size_t,
    pub cvd: *mut cl_cvd,
    pub next: *mut cli_dbinfo,
}
#[test]
fn bindgen_test_layout_cli_dbinfo() {
    assert_eq!(
        ::std::mem::size_of::<cli_dbinfo>(),
        40usize,
        concat!("Size of: ", stringify!(cli_dbinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_dbinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_dbinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dbinfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dbinfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dbinfo>())).hash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dbinfo),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dbinfo>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dbinfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dbinfo>())).cvd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dbinfo),
            "::",
            stringify!(cvd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_dbinfo>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_dbinfo),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_pwdb {
    pub name: *mut ::std::os::raw::c_char,
    pub passwd: *mut ::std::os::raw::c_char,
    pub length: u16,
    pub next: *mut cli_pwdb,
}
#[test]
fn bindgen_test_layout_cli_pwdb() {
    assert_eq!(
        ::std::mem::size_of::<cli_pwdb>(),
        32usize,
        concat!("Size of: ", stringify!(cli_pwdb))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_pwdb>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_pwdb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pwdb>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pwdb),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pwdb>())).passwd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pwdb),
            "::",
            stringify!(passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pwdb>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pwdb),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pwdb>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pwdb),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_engine {
    pub refcount: u32,
    pub sdb: u32,
    pub dboptions: u32,
    pub dbversion: [u32; 2usize],
    pub ac_only: u32,
    pub ac_mindepth: u32,
    pub ac_maxdepth: u32,
    pub tmpdir: *mut ::std::os::raw::c_char,
    pub keeptmp: u32,
    pub engine_options: u64,
    pub maxscantime: u32,
    pub maxscansize: u64,
    pub maxfilesize: u64,
    pub max_recursion_level: u32,
    pub maxfiles: u32,
    pub min_cc_count: u32,
    pub min_ssn_count: u32,
    pub root: *mut *mut cli_matcher,
    pub hm_hdb: *mut cli_matcher,
    pub hm_mdb: *mut cli_matcher,
    pub hm_imp: *mut cli_matcher,
    pub hm_fp: *mut cli_matcher,
    pub cdb: *mut cli_cdb,
    pub allow_list_matcher: *mut regex_matcher,
    pub domain_list_matcher: *mut regex_matcher,
    pub phishcheck: *mut phishcheck,
    pub dconf: *mut cli_dconf,
    pub ftypes: *mut cli_ftype,
    pub ptypes: *mut cli_ftype,
    pub pwdbs: *mut *mut cli_pwdb,
    pub test_root: *mut cli_matcher,
    pub ignored: *mut cli_matcher,
    pub pua_cats: *mut ::std::os::raw::c_char,
    pub iconcheck: *mut icon_matcher,
    pub cache: *mut CACHE,
    pub dbinfo: *mut cli_dbinfo,
    pub num_total_signatures: size_t,
    pub mempool: *mut mpool_t,
    pub cmgr: crtmgr,
    pub cb_pre_cache: clcb_pre_cache,
    pub cb_pre_scan: clcb_pre_scan,
    pub cb_post_scan: clcb_post_scan,
    pub cb_virus_found: clcb_virus_found,
    pub cb_sigload: clcb_sigload,
    pub cb_sigload_ctx: *mut ::std::os::raw::c_void,
    pub cb_hash: clcb_hash,
    pub cb_meta: clcb_meta,
    pub cb_file_props: clcb_file_props,
    pub cb_sigload_progress: clcb_progress,
    pub cb_sigload_progress_ctx: *mut ::std::os::raw::c_void,
    pub cb_engine_compile_progress: clcb_progress,
    pub cb_engine_compile_progress_ctx: *mut ::std::os::raw::c_void,
    pub cb_engine_free_progress: clcb_progress,
    pub cb_engine_free_progress_ctx: *mut ::std::os::raw::c_void,
    pub bcs: cli_all_bc,
    pub hooks: [*mut ::std::os::raw::c_uint; 7usize],
    pub hooks_cnt: [::std::os::raw::c_uint; 7usize],
    pub hook_lsig_ids: ::std::os::raw::c_uint,
    pub bytecode_security: bytecode_security,
    pub bytecode_timeout: u32,
    pub bytecode_mode: bytecode_mode,
    pub maxembeddedpe: u64,
    pub maxhtmlnormalize: u64,
    pub maxhtmlnotags: u64,
    pub maxscriptnormalize: u64,
    pub maxziptypercg: u64,
    pub stats_data: *mut ::std::os::raw::c_void,
    pub cb_stats_add_sample: clcb_stats_add_sample,
    pub cb_stats_remove_sample: clcb_stats_remove_sample,
    pub cb_stats_decrement_count: clcb_stats_decrement_count,
    pub cb_stats_submit: clcb_stats_submit,
    pub cb_stats_flush: clcb_stats_flush,
    pub cb_stats_get_num: clcb_stats_get_num,
    pub cb_stats_get_size: clcb_stats_get_size,
    pub cb_stats_get_hostid: clcb_stats_get_hostid,
    pub maxpartitions: u32,
    pub maxiconspe: u32,
    pub maxrechwp3: u32,
    pub pcre_match_limit: u64,
    pub pcre_recmatch_limit: u64,
    pub pcre_max_filesize: u64,
}
#[test]
fn bindgen_test_layout_cl_engine() {
    assert_eq!(
        ::std::mem::size_of::<cl_engine>(),
        1176usize,
        concat!("Size of: ", stringify!(cl_engine))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_engine>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_engine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).refcount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).sdb as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(sdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).dboptions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(dboptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).dbversion as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(dbversion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).ac_only as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(ac_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).ac_mindepth as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(ac_mindepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).ac_maxdepth as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(ac_maxdepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).tmpdir as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(tmpdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).keeptmp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(keeptmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).engine_options as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(engine_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxscantime as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxscantime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxscansize as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxscansize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxfilesize as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxfilesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).max_recursion_level as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(max_recursion_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxfiles as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).min_cc_count as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(min_cc_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).min_ssn_count as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(min_ssn_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).root as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).hm_hdb as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(hm_hdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).hm_mdb as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(hm_mdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).hm_imp as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(hm_imp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).hm_fp as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(hm_fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cdb as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).allow_list_matcher as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(allow_list_matcher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).domain_list_matcher as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(domain_list_matcher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).phishcheck as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(phishcheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).dconf as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(dconf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).ftypes as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(ftypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).ptypes as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(ptypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).pwdbs as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(pwdbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).test_root as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(test_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).ignored as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(ignored)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).pua_cats as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(pua_cats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).iconcheck as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(iconcheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cache as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).dbinfo as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(dbinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).num_total_signatures as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(num_total_signatures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).mempool as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(mempool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cmgr as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cmgr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_pre_cache as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_pre_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_pre_scan as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_pre_scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_post_scan as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_post_scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_virus_found as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_virus_found)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_sigload as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_sigload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_sigload_ctx as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_sigload_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_hash as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_meta as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_meta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_file_props as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_file_props)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_sigload_progress as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_sigload_progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_engine>())).cb_sigload_progress_ctx as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_sigload_progress_ctx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_engine>())).cb_engine_compile_progress as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_engine_compile_progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_engine>())).cb_engine_compile_progress_ctx as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_engine_compile_progress_ctx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_engine>())).cb_engine_free_progress as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_engine_free_progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_engine>())).cb_engine_free_progress_ctx as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_engine_free_progress_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).bcs as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(bcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).hooks as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(hooks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).hooks_cnt as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(hooks_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).hook_lsig_ids as *const _ as usize },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(hook_lsig_ids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).bytecode_security as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(bytecode_security)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).bytecode_timeout as *const _ as usize },
        1012usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(bytecode_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).bytecode_mode as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(bytecode_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxembeddedpe as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxembeddedpe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxhtmlnormalize as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxhtmlnormalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxhtmlnotags as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxhtmlnotags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxscriptnormalize as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxscriptnormalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxziptypercg as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxziptypercg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).stats_data as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(stats_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_stats_add_sample as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_stats_add_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_engine>())).cb_stats_remove_sample as *const _ as usize
        },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_stats_remove_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cl_engine>())).cb_stats_decrement_count as *const _ as usize
        },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_stats_decrement_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_stats_submit as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_stats_submit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_stats_flush as *const _ as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_stats_flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_stats_get_num as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_stats_get_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_stats_get_size as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_stats_get_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).cb_stats_get_hostid as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(cb_stats_get_hostid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxpartitions as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxpartitions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxiconspe as *const _ as usize },
        1140usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxiconspe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).maxrechwp3 as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(maxrechwp3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).pcre_match_limit as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(pcre_match_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).pcre_recmatch_limit as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(pcre_recmatch_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cl_engine>())).pcre_max_filesize as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_engine),
            "::",
            stringify!(pcre_max_filesize)
        )
    );
}
extern "C" {
    #[doc = " @brief Append an alert."]
    #[doc = ""]
    #[doc = " An FP-check will verify that the file is not allowed."]
    #[doc = " The allow list check does not happen before the scan because allowing files"]
    #[doc = " is so infrequent that such action would be detrimental to performance."]
    #[doc = ""]
    #[doc = " TODO: Replace implementation with severity scale, and severity threshold"]
    #[doc = " wherein signatures that do not meet the threshold are documented in JSON"]
    #[doc = " metadata but do not halt the scan."]
    #[doc = ""]
    #[doc = " @param ctx       The scan context."]
    #[doc = " @param virname   The alert name."]
    #[doc = " @return cl_error_t CL_VIRUS if scan should be halted due to an alert, CL_CLEAN if scan should continue."]
    pub fn cli_append_virus(
        ctx: *mut cli_ctx,
        virname: *const ::std::os::raw::c_char,
    ) -> cl_error_t;
}
extern "C" {
    pub fn cli_warnmsg(str_: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn cli_errmsg(str_: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn cli_infomsg_simple(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn cli_dbgmsg_no_inline(str_: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = " @brief   Get the libclamav debug flag (e.g. if debug logging is enabled)"]
    #[doc = ""]
    #[doc = " This is required for unit tests to be able to link with clamav.dll and not"]
    #[doc = " directly manipulate libclamav global variables."]
    pub fn cli_get_debug_flag() -> u8;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cli_htu32_element {
    pub key: u32,
    pub data: cli_htu32_element__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cli_htu32_element__bindgen_ty_1 {
    pub as_size_t: size_t,
    pub as_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cli_htu32_element__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cli_htu32_element__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cli_htu32_element__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_htu32_element__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_htu32_element__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_htu32_element__bindgen_ty_1>())).as_size_t as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_htu32_element__bindgen_ty_1),
            "::",
            stringify!(as_size_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_htu32_element__bindgen_ty_1>())).as_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_htu32_element__bindgen_ty_1),
            "::",
            stringify!(as_ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_cli_htu32_element() {
    assert_eq!(
        ::std::mem::size_of::<cli_htu32_element>(),
        16usize,
        concat!("Size of: ", stringify!(cli_htu32_element))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_htu32_element>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_htu32_element))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_htu32_element>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_htu32_element),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_htu32_element>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_htu32_element),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_htu32 {
    pub htable: *mut cli_htu32_element,
    pub capacity: size_t,
    pub used: size_t,
    pub maxfill: size_t,
}
#[test]
fn bindgen_test_layout_cli_htu32() {
    assert_eq!(
        ::std::mem::size_of::<cli_htu32>(),
        32usize,
        concat!("Size of: ", stringify!(cli_htu32))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_htu32>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_htu32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_htu32>())).htable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_htu32),
            "::",
            stringify!(htable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_htu32>())).capacity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_htu32),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_htu32>())).used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_htu32),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_htu32>())).maxfill as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_htu32),
            "::",
            stringify!(maxfill)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_hashset {
    pub keys: *mut u32,
    pub bitmap: *mut u32,
    pub mempool: *mut mpool_t,
    pub capacity: u32,
    pub mask: u32,
    pub count: u32,
    pub limit: u32,
}
#[test]
fn bindgen_test_layout_cli_hashset() {
    assert_eq!(
        ::std::mem::size_of::<cli_hashset>(),
        40usize,
        concat!("Size of: ", stringify!(cli_hashset))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_hashset>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_hashset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_hashset>())).keys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_hashset),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_hashset>())).bitmap as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_hashset),
            "::",
            stringify!(bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_hashset>())).mempool as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_hashset),
            "::",
            stringify!(mempool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_hashset>())).capacity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_hashset),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_hashset>())).mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_hashset),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_hashset>())).count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_hashset),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_hashset>())).limit as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_hashset),
            "::",
            stringify!(limit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_subsig_matches {
    pub last: u32,
    pub next: u32,
    pub offsets: [u32; 16usize],
}
#[test]
fn bindgen_test_layout_cli_subsig_matches() {
    assert_eq!(
        ::std::mem::size_of::<cli_subsig_matches>(),
        72usize,
        concat!("Size of: ", stringify!(cli_subsig_matches))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_subsig_matches>(),
        4usize,
        concat!("Alignment of ", stringify!(cli_subsig_matches))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_subsig_matches>())).last as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_subsig_matches),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_subsig_matches>())).next as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_subsig_matches),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_subsig_matches>())).offsets as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_subsig_matches),
            "::",
            stringify!(offsets)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_lsig_matches {
    pub subsigs: u32,
    pub matches: [*mut cli_subsig_matches; 1usize],
}
#[test]
fn bindgen_test_layout_cli_lsig_matches() {
    assert_eq!(
        ::std::mem::size_of::<cli_lsig_matches>(),
        16usize,
        concat!("Size of: ", stringify!(cli_lsig_matches))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_lsig_matches>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_lsig_matches))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_matches>())).subsigs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_matches),
            "::",
            stringify!(subsigs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_matches>())).matches as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_matches),
            "::",
            stringify!(matches)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_ac_data {
    pub offmatrix: *mut *mut *mut u32,
    pub partsigs: u32,
    pub lsigs: u32,
    pub reloffsigs: u32,
    pub lsigcnt: *mut *mut u32,
    pub lsigsuboff_last: *mut *mut u32,
    pub lsigsuboff_first: *mut *mut u32,
    pub lsig_matches: *mut *mut cli_lsig_matches,
    pub yr_matches: *mut u8,
    pub offset: *mut u32,
    pub macro_lastmatch: [u32; 32usize],
    #[doc = " Hashset for versioninfo matching"]
    pub vinfo: *const cli_hashset,
    pub min_partno: u32,
}
#[test]
fn bindgen_test_layout_cli_ac_data() {
    assert_eq!(
        ::std::mem::size_of::<cli_ac_data>(),
        216usize,
        concat!("Size of: ", stringify!(cli_ac_data))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ac_data>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ac_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).offmatrix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(offmatrix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).partsigs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(partsigs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).lsigs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(lsigs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).reloffsigs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(reloffsigs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).lsigcnt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(lsigcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).lsigsuboff_last as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(lsigsuboff_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).lsigsuboff_first as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(lsigsuboff_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).lsig_matches as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(lsig_matches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).yr_matches as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(yr_matches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).offset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).macro_lastmatch as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(macro_lastmatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).vinfo as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(vinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_data>())).min_partno as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_data),
            "::",
            stringify!(min_partno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_alt_node {
    pub str_: *mut u16,
    pub len: u16,
    pub unique: u8,
    pub next: *mut cli_alt_node,
}
#[test]
fn bindgen_test_layout_cli_alt_node() {
    assert_eq!(
        ::std::mem::size_of::<cli_alt_node>(),
        24usize,
        concat!("Size of: ", stringify!(cli_alt_node))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_alt_node>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_alt_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_alt_node>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_alt_node),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_alt_node>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_alt_node),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_alt_node>())).unique as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_alt_node),
            "::",
            stringify!(unique)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_alt_node>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_alt_node),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cli_ac_special {
    pub alt: cli_ac_special__bindgen_ty_1,
    pub len: [u16; 2usize],
    pub num: u16,
    pub type_: u16,
    pub negative: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cli_ac_special__bindgen_ty_1 {
    pub byte: *mut ::std::os::raw::c_uchar,
    pub f_str: *mut *mut ::std::os::raw::c_uchar,
    pub v_str: *mut cli_alt_node,
}
#[test]
fn bindgen_test_layout_cli_ac_special__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cli_ac_special__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cli_ac_special__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ac_special__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ac_special__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_ac_special__bindgen_ty_1>())).byte as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_special__bindgen_ty_1),
            "::",
            stringify!(byte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_ac_special__bindgen_ty_1>())).f_str as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_special__bindgen_ty_1),
            "::",
            stringify!(f_str)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_ac_special__bindgen_ty_1>())).v_str as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_special__bindgen_ty_1),
            "::",
            stringify!(v_str)
        )
    );
}
#[test]
fn bindgen_test_layout_cli_ac_special() {
    assert_eq!(
        ::std::mem::size_of::<cli_ac_special>(),
        24usize,
        concat!("Size of: ", stringify!(cli_ac_special))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ac_special>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ac_special))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_special>())).alt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_special),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_special>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_special),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_special>())).num as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_special),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_special>())).type_ as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_special),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_special>())).negative as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_special),
            "::",
            stringify!(negative)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_ac_patt {
    pub pattern: *mut u16,
    pub prefix: *mut u16,
    pub length: [u16; 3usize],
    pub prefix_length: [u16; 3usize],
    pub mindist: u32,
    pub maxdist: u32,
    pub sigid: u32,
    pub lsigid: [u32; 3usize],
    pub ch: [u16; 2usize],
    pub virname: *mut ::std::os::raw::c_char,
    pub customdata: *mut ::std::os::raw::c_void,
    pub ch_mindist: [u16; 2usize],
    pub ch_maxdist: [u16; 2usize],
    pub parts: u16,
    pub partno: u16,
    pub special: u16,
    pub special_pattern: u16,
    pub special_table: *mut *mut cli_ac_special,
    pub rtype: u16,
    pub type_: u16,
    pub offdata: [u32; 4usize],
    pub offset_min: u32,
    pub offset_max: u32,
    pub boundary: u32,
    pub depth: u8,
    pub sigopts: u8,
}
#[test]
fn bindgen_test_layout_cli_ac_patt() {
    assert_eq!(
        ::std::mem::size_of::<cli_ac_patt>(),
        136usize,
        concat!("Size of: ", stringify!(cli_ac_patt))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ac_patt>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ac_patt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).pattern as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).prefix as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).prefix_length as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(prefix_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).mindist as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(mindist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).maxdist as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(maxdist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).sigid as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(sigid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).lsigid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(lsigid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).ch as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(ch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).virname as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(virname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).customdata as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(customdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).ch_mindist as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(ch_mindist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).ch_maxdist as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(ch_maxdist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).parts as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(parts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).partno as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(partno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).special as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(special)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).special_pattern as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(special_pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).special_table as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(special_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).rtype as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(rtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).type_ as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).offdata as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(offdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).offset_min as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(offset_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).offset_max as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(offset_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).boundary as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(boundary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).depth as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_patt>())).sigopts as *const _ as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_patt),
            "::",
            stringify!(sigopts)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cli_ac_list {
    pub me: *mut cli_ac_patt,
    pub __bindgen_anon_1: cli_ac_list__bindgen_ty_1,
    pub next_same: *mut cli_ac_list,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cli_ac_list__bindgen_ty_1 {
    pub node: *mut cli_ac_node,
    pub next: *mut cli_ac_list,
}
#[test]
fn bindgen_test_layout_cli_ac_list__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cli_ac_list__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cli_ac_list__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ac_list__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ac_list__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_list__bindgen_ty_1>())).node as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_list__bindgen_ty_1),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_list__bindgen_ty_1>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_list__bindgen_ty_1),
            "::",
            stringify!(next)
        )
    );
}
#[test]
fn bindgen_test_layout_cli_ac_list() {
    assert_eq!(
        ::std::mem::size_of::<cli_ac_list>(),
        24usize,
        concat!("Size of: ", stringify!(cli_ac_list))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ac_list>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ac_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_list>())).me as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_list),
            "::",
            stringify!(me)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_list>())).next_same as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_list),
            "::",
            stringify!(next_same)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_ac_node {
    pub list: *mut cli_ac_list,
    pub trans: *mut *mut cli_ac_node,
    pub fail: *mut cli_ac_node,
}
#[test]
fn bindgen_test_layout_cli_ac_node() {
    assert_eq!(
        ::std::mem::size_of::<cli_ac_node>(),
        24usize,
        concat!("Size of: ", stringify!(cli_ac_node))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ac_node>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ac_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_node>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_node),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_node>())).trans as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_node),
            "::",
            stringify!(trans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_node>())).fail as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_node),
            "::",
            stringify!(fail)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_ac_result {
    pub virname: *const ::std::os::raw::c_char,
    pub customdata: *mut ::std::os::raw::c_void,
    pub offset: off_t,
    pub next: *mut cli_ac_result,
}
#[test]
fn bindgen_test_layout_cli_ac_result() {
    assert_eq!(
        ::std::mem::size_of::<cli_ac_result>(),
        32usize,
        concat!("Size of: ", stringify!(cli_ac_result))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ac_result>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ac_result))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_result>())).virname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_result),
            "::",
            stringify!(virname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_result>())).customdata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_result),
            "::",
            stringify!(customdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_result>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_result),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_result>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_result),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_bm_patt {
    pub pattern: *mut ::std::os::raw::c_uchar,
    pub prefix: *mut ::std::os::raw::c_uchar,
    pub virname: *mut ::std::os::raw::c_char,
    pub offdata: [u32; 4usize],
    pub offset_min: u32,
    pub offset_max: u32,
    pub next: *mut cli_bm_patt,
    pub length: u16,
    pub prefix_length: u16,
    pub cnt: u16,
    pub pattern0: ::std::os::raw::c_uchar,
    pub boundary: u32,
    pub filesize: u32,
}
#[test]
fn bindgen_test_layout_cli_bm_patt() {
    assert_eq!(
        ::std::mem::size_of::<cli_bm_patt>(),
        72usize,
        concat!("Size of: ", stringify!(cli_bm_patt))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_bm_patt>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_bm_patt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).pattern as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).prefix as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).virname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(virname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).offdata as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(offdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).offset_min as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(offset_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).offset_max as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(offset_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).length as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).prefix_length as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(prefix_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).cnt as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).pattern0 as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(pattern0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).boundary as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(boundary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bm_patt>())).filesize as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bm_patt),
            "::",
            stringify!(filesize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_sz_hash {
    pub hash_array: *mut u8,
    pub virusnames: *mut *const ::std::os::raw::c_char,
    pub items: u32,
}
#[test]
fn bindgen_test_layout_cli_sz_hash() {
    assert_eq!(
        ::std::mem::size_of::<cli_sz_hash>(),
        24usize,
        concat!("Size of: ", stringify!(cli_sz_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_sz_hash>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_sz_hash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_sz_hash>())).hash_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_sz_hash),
            "::",
            stringify!(hash_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_sz_hash>())).virusnames as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_sz_hash),
            "::",
            stringify!(virusnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_sz_hash>())).items as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_sz_hash),
            "::",
            stringify!(items)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_hash_patt {
    pub sizehashes: [cli_htu32; 3usize],
}
#[test]
fn bindgen_test_layout_cli_hash_patt() {
    assert_eq!(
        ::std::mem::size_of::<cli_hash_patt>(),
        96usize,
        concat!("Size of: ", stringify!(cli_hash_patt))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_hash_patt>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_hash_patt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_hash_patt>())).sizehashes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_hash_patt),
            "::",
            stringify!(sizehashes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_hash_wild {
    pub hashes: [cli_sz_hash; 3usize],
}
#[test]
fn bindgen_test_layout_cli_hash_wild() {
    assert_eq!(
        ::std::mem::size_of::<cli_hash_wild>(),
        72usize,
        concat!("Size of: ", stringify!(cli_hash_wild))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_hash_wild>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_hash_wild))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_hash_wild>())).hashes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_hash_wild),
            "::",
            stringify!(hashes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_match_context_8 {
    _unused: [u8; 0],
}
pub type pcre2_match_context_8 = pcre2_real_match_context_8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_code_8 {
    _unused: [u8; 0],
}
pub type pcre2_code_8 = pcre2_real_code_8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_pcre_data {
    pub re: *mut pcre2_code_8,
    pub mctx: *mut pcre2_match_context_8,
    pub options: ::std::os::raw::c_int,
    pub expression: *mut ::std::os::raw::c_char,
    pub search_offset: u32,
}
#[test]
fn bindgen_test_layout_cli_pcre_data() {
    assert_eq!(
        ::std::mem::size_of::<cli_pcre_data>(),
        40usize,
        concat!("Size of: ", stringify!(cli_pcre_data))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_pcre_data>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_pcre_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_data>())).re as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_data),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_data>())).mctx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_data),
            "::",
            stringify!(mctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_data>())).options as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_data),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_data>())).expression as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_data),
            "::",
            stringify!(expression)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_data>())).search_offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_data),
            "::",
            stringify!(search_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_pcre_meta {
    pub trigger: *mut ::std::os::raw::c_char,
    pub virname: *mut ::std::os::raw::c_char,
    pub lsigid: [u32; 3usize],
    pub pdata: cli_pcre_data,
    pub offdata: [u32; 4usize],
    pub offset_min: u32,
    pub offset_max: u32,
    pub flags: u32,
    pub statname: *mut ::std::os::raw::c_char,
    pub sigtime_id: u32,
    pub sigmatch_id: u32,
}
#[test]
fn bindgen_test_layout_cli_pcre_meta() {
    assert_eq!(
        ::std::mem::size_of::<cli_pcre_meta>(),
        120usize,
        concat!("Size of: ", stringify!(cli_pcre_meta))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_pcre_meta>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_pcre_meta))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).trigger as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(trigger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).virname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(virname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).lsigid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(lsigid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).pdata as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(pdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).offdata as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(offdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).offset_min as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(offset_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).offset_max as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(offset_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).flags as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).statname as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(statname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).sigtime_id as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(sigtime_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_pcre_meta>())).sigmatch_id as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_pcre_meta),
            "::",
            stringify!(sigmatch_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_bcomp_meta {
    pub virname: *mut ::std::os::raw::c_char,
    pub ref_subsigid: u16,
    pub lsigid: [u32; 3usize],
    pub offset: ssize_t,
    pub options: u16,
    pub byte_len: size_t,
    pub comps: *mut *mut cli_bcomp_comp,
    pub comp_count: u32,
}
#[test]
fn bindgen_test_layout_cli_bcomp_meta() {
    assert_eq!(
        ::std::mem::size_of::<cli_bcomp_meta>(),
        64usize,
        concat!("Size of: ", stringify!(cli_bcomp_meta))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_bcomp_meta>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_bcomp_meta))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bcomp_meta>())).virname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bcomp_meta),
            "::",
            stringify!(virname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bcomp_meta>())).ref_subsigid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bcomp_meta),
            "::",
            stringify!(ref_subsigid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bcomp_meta>())).lsigid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bcomp_meta),
            "::",
            stringify!(lsigid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bcomp_meta>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bcomp_meta),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bcomp_meta>())).options as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bcomp_meta),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bcomp_meta>())).byte_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bcomp_meta),
            "::",
            stringify!(byte_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bcomp_meta>())).comps as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bcomp_meta),
            "::",
            stringify!(comps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bcomp_meta>())).comp_count as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bcomp_meta),
            "::",
            stringify!(comp_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_bcomp_comp {
    pub comp_symbol: ::std::os::raw::c_char,
    pub comp_value: i64,
}
#[test]
fn bindgen_test_layout_cli_bcomp_comp() {
    assert_eq!(
        ::std::mem::size_of::<cli_bcomp_comp>(),
        16usize,
        concat!("Size of: ", stringify!(cli_bcomp_comp))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_bcomp_comp>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_bcomp_comp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bcomp_comp>())).comp_symbol as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bcomp_comp),
            "::",
            stringify!(comp_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_bcomp_comp>())).comp_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_bcomp_comp),
            "::",
            stringify!(comp_value)
        )
    );
}
pub const tdb_type_CLI_TDB_UINT: tdb_type = 0;
pub const tdb_type_CLI_TDB_RANGE: tdb_type = 1;
pub const tdb_type_CLI_TDB_STR: tdb_type = 2;
pub const tdb_type_CLI_TDB_RANGE2: tdb_type = 3;
pub const tdb_type_CLI_TDB_FTYPE: tdb_type = 4;
pub const tdb_type_CLI_TDB_FTYPE_EXPR: tdb_type = 5;
pub type tdb_type = ::std::os::raw::c_uint;
pub use self::tdb_type as tdb_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_lsig_tdb {
    pub val: *mut u32,
    pub range: *mut u32,
    pub str_: *mut ::std::os::raw::c_char,
    pub cnt: [tdb_type_t; 3usize],
    pub subsigs: u32,
    pub target: *const u32,
    pub engine: *const u32,
    pub nos: *const u32,
    pub ep: *const u32,
    pub filesize: *const u32,
    pub container: *const u32,
    pub handlertype: *const u32,
    pub intermediates: *const u32,
    pub icongrp1: *const ::std::os::raw::c_char,
    pub icongrp2: *const ::std::os::raw::c_char,
    pub macro_ptids: *mut u32,
    pub mempool: *mut mpool_t,
}
#[test]
fn bindgen_test_layout_cli_lsig_tdb() {
    assert_eq!(
        ::std::mem::size_of::<cli_lsig_tdb>(),
        136usize,
        concat!("Size of: ", stringify!(cli_lsig_tdb))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_lsig_tdb>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_lsig_tdb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).range as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).str_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).cnt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).subsigs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(subsigs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).target as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).engine as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).nos as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(nos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).ep as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(ep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).filesize as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(filesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).container as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(container)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).handlertype as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(handlertype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).intermediates as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(intermediates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).icongrp1 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(icongrp1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).icongrp2 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(icongrp2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).macro_ptids as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(macro_ptids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_lsig_tdb>())).mempool as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_lsig_tdb),
            "::",
            stringify!(mempool)
        )
    );
}
pub const lsig_type_CLI_LSIG_NORMAL: lsig_type = 0;
pub const lsig_type_CLI_YARA_NORMAL: lsig_type = 1;
pub const lsig_type_CLI_YARA_OFFSET: lsig_type = 2;
pub type lsig_type = ::std::os::raw::c_uint;
pub use self::lsig_type as lsig_type_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cli_ac_lsig {
    pub id: u32,
    pub bc_idx: ::std::os::raw::c_uint,
    pub type_: lsig_type_t,
    pub flag: u8,
    pub u: cli_ac_lsig__bindgen_ty_1,
    pub virname: *const ::std::os::raw::c_char,
    pub tdb: cli_lsig_tdb,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cli_ac_lsig__bindgen_ty_1 {
    pub logic: *mut ::std::os::raw::c_char,
    pub code_start: *mut u8,
}
#[test]
fn bindgen_test_layout_cli_ac_lsig__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cli_ac_lsig__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cli_ac_lsig__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ac_lsig__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ac_lsig__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_lsig__bindgen_ty_1>())).logic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_lsig__bindgen_ty_1),
            "::",
            stringify!(logic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_ac_lsig__bindgen_ty_1>())).code_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_lsig__bindgen_ty_1),
            "::",
            stringify!(code_start)
        )
    );
}
#[test]
fn bindgen_test_layout_cli_ac_lsig() {
    assert_eq!(
        ::std::mem::size_of::<cli_ac_lsig>(),
        168usize,
        concat!("Size of: ", stringify!(cli_ac_lsig))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_ac_lsig>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_ac_lsig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_lsig>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_lsig),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_lsig>())).bc_idx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_lsig),
            "::",
            stringify!(bc_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_lsig>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_lsig),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_lsig>())).flag as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_lsig),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_lsig>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_lsig),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_lsig>())).virname as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_lsig),
            "::",
            stringify!(virname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_ac_lsig>())).tdb as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_ac_lsig),
            "::",
            stringify!(tdb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_matcher {
    pub type_: ::std::os::raw::c_uint,
    pub bm_shift: *mut u8,
    pub bm_suffix: *mut *mut cli_bm_patt,
    pub bm_pattab: *mut *mut cli_bm_patt,
    pub soff: *mut u32,
    pub soff_len: u32,
    pub bm_offmode: u32,
    pub bm_patterns: u32,
    pub bm_reloff_num: u32,
    pub bm_absoff_num: u32,
    pub hm: cli_hash_patt,
    pub hwild: cli_hash_wild,
    pub ac_partsigs: u32,
    pub ac_nodes: u32,
    pub ac_lists: u32,
    pub ac_patterns: u32,
    pub ac_lsigs: u32,
    pub ac_lsigtable: *mut *mut cli_ac_lsig,
    pub ac_root: *mut cli_ac_node,
    pub ac_nodetable: *mut *mut cli_ac_node,
    pub ac_listtable: *mut *mut cli_ac_list,
    pub ac_pattable: *mut *mut cli_ac_patt,
    pub ac_reloff: *mut *mut cli_ac_patt,
    pub ac_reloff_num: u32,
    pub ac_absoff_num: u32,
    pub ac_mindepth: u8,
    pub ac_maxdepth: u8,
    pub filter: *mut filter,
    pub maxpatlen: u16,
    pub ac_only: u8,
    pub pcre_metas: u32,
    pub pcre_metatable: *mut *mut cli_pcre_meta,
    pub pcre_reloff_num: u32,
    pub pcre_absoff_num: u32,
    pub bcomp_metas: u32,
    pub bcomp_metatable: *mut *mut cli_bcomp_meta,
    pub linked_bcs: u32,
    pub mempool: *mut mpool_t,
}
#[test]
fn bindgen_test_layout_cli_matcher() {
    assert_eq!(
        ::std::mem::size_of::<cli_matcher>(),
        384usize,
        concat!("Size of: ", stringify!(cli_matcher))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_matcher>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_matcher))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).bm_shift as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(bm_shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).bm_suffix as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(bm_suffix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).bm_pattab as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(bm_pattab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).soff as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(soff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).soff_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(soff_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).bm_offmode as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(bm_offmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).bm_patterns as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(bm_patterns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).bm_reloff_num as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(bm_reloff_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).bm_absoff_num as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(bm_absoff_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).hm as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(hm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).hwild as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(hwild)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_partsigs as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_partsigs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_nodes as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_lists as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_lists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_patterns as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_patterns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_lsigs as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_lsigs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_lsigtable as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_lsigtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_root as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_nodetable as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_nodetable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_listtable as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_listtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_pattable as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_pattable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_reloff as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_reloff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_reloff_num as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_reloff_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_absoff_num as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_absoff_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_mindepth as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_mindepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_maxdepth as *const _ as usize },
        313usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_maxdepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).filter as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).maxpatlen as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(maxpatlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).ac_only as *const _ as usize },
        330usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(ac_only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).pcre_metas as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(pcre_metas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).pcre_metatable as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(pcre_metatable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).pcre_reloff_num as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(pcre_reloff_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).pcre_absoff_num as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(pcre_absoff_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).bcomp_metas as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(bcomp_metas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).bcomp_metatable as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(bcomp_metatable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).linked_bcs as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(linked_bcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_matcher>())).mempool as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_matcher),
            "::",
            stringify!(mempool)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_cdb {
    pub virname: *mut ::std::os::raw::c_char,
    pub ctype: cli_file_t,
    pub name: regex_t,
    pub csize: [size_t; 2usize],
    pub fsizec: [size_t; 2usize],
    pub fsizer: [size_t; 2usize],
    pub encrypted: ::std::os::raw::c_int,
    pub filepos: [::std::os::raw::c_uint; 2usize],
    pub res1: ::std::os::raw::c_int,
    pub res2: *mut ::std::os::raw::c_void,
    pub next: *mut cli_cdb,
}
#[test]
fn bindgen_test_layout_cli_cdb() {
    assert_eq!(
        ::std::mem::size_of::<cli_cdb>(),
        128usize,
        concat!("Size of: ", stringify!(cli_cdb))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_cdb>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_cdb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).virname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(virname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).ctype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(ctype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).csize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(csize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).fsizec as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(fsizec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).fsizer as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(fsizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).encrypted as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(encrypted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).filepos as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(filepos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).res1 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(res1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).res2 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(res2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_cdb>())).next as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_cdb),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub fn cli_versig2(
        sha256: *const ::std::os::raw::c_uchar,
        dsig_str: *const ::std::os::raw::c_char,
        n_str: *const ::std::os::raw::c_char,
        e_str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cli_getdsig(
        host: *const ::std::os::raw::c_char,
        user: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_uint,
        mode: ::std::os::raw::c_ushort,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_guts {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_bcengine {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regex_matcher {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct phishcheck {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CACHE {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct filter {
    pub _address: u8,
}

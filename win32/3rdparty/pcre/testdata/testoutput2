/(a)b|/I
Capturing subpattern count = 1
No options
No first char
No need char

/abc/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'c'
    abc
 0: abc
    defabc
 0: abc
    \Aabc
 0: abc
    *** Failers
No match
    \Adefabc
No match
    ABC
No match

/^abc/I
Capturing subpattern count = 0
Options: anchored
No first char
No need char
    abc
 0: abc
    \Aabc
 0: abc
    *** Failers
No match
    defabc
No match
    \Adefabc
No match

/a+bc/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
Need char = 'c'

/a*bc/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'c'

/a{3}bc/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
Need char = 'c'

/(abc|a+z)/I
Capturing subpattern count = 1
Partial matching not supported
No options
First char = 'a'
No need char

/^abc$/I
Capturing subpattern count = 0
Options: anchored
No first char
No need char
    abc
 0: abc
    *** Failers
No match
    def\nabc
No match

/ab\hdef/X
Failed: unrecognized character follows \ at offset 3

/(?X)ab\hdef/X
Failed: unrecognized character follows \ at offset 7

/x{5,4}/
Failed: numbers out of order in {} quantifier at offset 5

/z{65536}/
Failed: number too big in {} quantifier at offset 7

/[abcd/
Failed: missing terminating ] for character class at offset 5

/(?X)[\B]/
Failed: invalid escape sequence in character class at offset 6

/[z-a]/
Failed: range out of order in character class at offset 3

/^*/
Failed: nothing to repeat at offset 1

/(abc/
Failed: missing ) at offset 4

/(?# abc/
Failed: missing ) after comment at offset 7

/(?z)abc/
Failed: unrecognized character after (? at offset 2

/.*b/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char at start or follows newline
Need char = 'b'

/.*?b/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char at start or follows newline
Need char = 'b'

/cat|dog|elephant/I
Capturing subpattern count = 0
No options
No first char
No need char
    this sentence eventually mentions a cat
 0: cat
    this sentences rambles on and on for a while and then reaches elephant
 0: elephant

/cat|dog|elephant/IS
Capturing subpattern count = 0
No options
No first char
No need char
Starting byte set: c d e 
    this sentence eventually mentions a cat
 0: cat
    this sentences rambles on and on for a while and then reaches elephant
 0: elephant

/cat|dog|elephant/IiS
Capturing subpattern count = 0
Options: caseless
No first char
No need char
Starting byte set: C D E c d e 
    this sentence eventually mentions a CAT cat
 0: CAT
    this sentences rambles on and on for a while to elephant ElePhant
 0: elephant

/a|[bcd]/IS
Capturing subpattern count = 0
No options
No first char
No need char
Starting byte set: a b c d 

/(a|[^\dZ])/IS
Capturing subpattern count = 1
No options
No first char
No need char
Starting byte set: \x00 \x01 \x02 \x03 \x04 \x05 \x06 \x07 \x08 \x09 \x0a 
  \x0b \x0c \x0d \x0e \x0f \x10 \x11 \x12 \x13 \x14 \x15 \x16 \x17 \x18 \x19 
  \x1a \x1b \x1c \x1d \x1e \x1f \x20 ! " # $ % & ' ( ) * + , - . / : ; < = > 
  ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y [ \ ] ^ _ ` a b c d 
  e f g h i j k l m n o p q r s t u v w x y z { | } ~ \x7f \x80 \x81 \x82 \x83 
  \x84 \x85 \x86 \x87 \x88 \x89 \x8a \x8b \x8c \x8d \x8e \x8f \x90 \x91 \x92 
  \x93 \x94 \x95 \x96 \x97 \x98 \x99 \x9a \x9b \x9c \x9d \x9e \x9f \xa0 \xa1 
  \xa2 \xa3 \xa4 \xa5 \xa6 \xa7 \xa8 \xa9 \xaa \xab \xac \xad \xae \xaf \xb0 
  \xb1 \xb2 \xb3 \xb4 \xb5 \xb6 \xb7 \xb8 \xb9 \xba \xbb \xbc \xbd \xbe \xbf 
  \xc0 \xc1 \xc2 \xc3 \xc4 \xc5 \xc6 \xc7 \xc8 \xc9 \xca \xcb \xcc \xcd \xce 
  \xcf \xd0 \xd1 \xd2 \xd3 \xd4 \xd5 \xd6 \xd7 \xd8 \xd9 \xda \xdb \xdc \xdd 
  \xde \xdf \xe0 \xe1 \xe2 \xe3 \xe4 \xe5 \xe6 \xe7 \xe8 \xe9 \xea \xeb \xec 
  \xed \xee \xef \xf0 \xf1 \xf2 \xf3 \xf4 \xf5 \xf6 \xf7 \xf8 \xf9 \xfa \xfb 
  \xfc \xfd \xfe \xff 

/(a|b)*[\s]/IS
Capturing subpattern count = 1
No options
No first char
No need char
Starting byte set: \x09 \x0a \x0c \x0d \x20 a b 

/(ab\2)/
Failed: reference to non-existent subpattern at offset 6

/{4,5}abc/
Failed: nothing to repeat at offset 4

/(a)(b)(c)\2/I
Capturing subpattern count = 3
Max back reference = 2
No options
First char = 'a'
Need char = 'c'
    abcb
 0: abcb
 1: a
 2: b
 3: c
    \O0abcb
Matched, but too many substrings
    \O3abcb
Matched, but too many substrings
 0: abcb
    \O6abcb
Matched, but too many substrings
 0: abcb
 1: a
    \O9abcb
Matched, but too many substrings
 0: abcb
 1: a
 2: b
    \O12abcb 
 0: abcb
 1: a
 2: b
 3: c

/(a)bc|(a)(b)\2/I
Capturing subpattern count = 3
Max back reference = 2
No options
First char = 'a'
No need char
    abc
 0: abc
 1: a
    \O0abc
Matched, but too many substrings
    \O3abc
Matched, but too many substrings
 0: abc
    \O6abc
 0: abc
 1: a
    aba
 0: aba
 1: <unset>
 2: a
 3: b
    \O0aba
Matched, but too many substrings
    \O3aba
Matched, but too many substrings
 0: aba
    \O6aba
Matched, but too many substrings
 0: aba
 1: <unset>
    \O9aba
Matched, but too many substrings
 0: aba
 1: <unset>
 2: a
    \O12aba
 0: aba
 1: <unset>
 2: a
 3: b

/abc$/IE
Capturing subpattern count = 0
Options: dollar_endonly
First char = 'a'
Need char = 'c'
    abc
 0: abc
    *** Failers
No match
    abc\n
No match
    abc\ndef
No match

/(a)(b)(c)(d)(e)\6/
Failed: reference to non-existent subpattern at offset 17

/the quick brown fox/I
Capturing subpattern count = 0
No options
First char = 't'
Need char = 'x'
    the quick brown fox
 0: the quick brown fox
    this is a line with the quick brown fox
 0: the quick brown fox

/the quick brown fox/IA
Capturing subpattern count = 0
Options: anchored
No first char
No need char
    the quick brown fox
 0: the quick brown fox
    *** Failers
No match
    this is a line with the quick brown fox
No match

/ab(?z)cd/
Failed: unrecognized character after (? at offset 4

/^abc|def/I
Capturing subpattern count = 0
No options
No first char
No need char
    abcdef
 0: abc
    abcdef\B
 0: def

/.*((abc)$|(def))/I
Capturing subpattern count = 3
Partial matching not supported
No options
First char at start or follows newline
No need char
    defabc
 0: defabc
 1: abc
 2: abc
    \Zdefabc
 0: def
 1: def
 2: <unset>
 3: def

/abc/IP
    abc
 0: abc
    *** Failers
No match: POSIX code 17: match failed
    
/^abc|def/IP
    abcdef
 0: abc
    abcdef\B
 0: def

/.*((abc)$|(def))/IP
    defabc
 0: defabc
 1: abc
 2: abc
    \Zdefabc
 0: def
 1: def
 3: def
  
/the quick brown fox/IP
    the quick brown fox
 0: the quick brown fox
    *** Failers 
No match: POSIX code 17: match failed
    The Quick Brown Fox 
No match: POSIX code 17: match failed

/the quick brown fox/IPi
    the quick brown fox
 0: the quick brown fox
    The Quick Brown Fox 
 0: The Quick Brown Fox

/abc.def/IP
    *** Failers
No match: POSIX code 17: match failed
    abc\ndef
No match: POSIX code 17: match failed
    
/abc$/IP
    abc
 0: abc
    abc\n 
 0: abc

/(abc)\2/IP
Failed: POSIX code 15: bad back reference at offset 7     

/(abc\1)/IP
    abc
No match: POSIX code 17: match failed

/)/
Failed: unmatched parentheses at offset 0

/a[]b/
Failed: missing terminating ] for character class at offset 4

/[^aeiou ]{3,}/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
    co-processors, and for 
 0: -pr
    
/<.*>/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = '<'
Need char = '>'
    abc<def>ghi<klm>nop
 0: <def>ghi<klm>

/<.*?>/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = '<'
Need char = '>'
    abc<def>ghi<klm>nop
 0: <def>

/<.*>/IU
Capturing subpattern count = 0
Partial matching not supported
Options: ungreedy
First char = '<'
Need char = '>'
    abc<def>ghi<klm>nop
 0: <def>
    
/(?U)<.*>/I
Capturing subpattern count = 0
Partial matching not supported
Options: ungreedy
First char = '<'
Need char = '>'
    abc<def>ghi<klm>nop
 0: <def>

/<.*?>/IU
Capturing subpattern count = 0
Partial matching not supported
Options: ungreedy
First char = '<'
Need char = '>'
    abc<def>ghi<klm>nop
 0: <def>ghi<klm>
    
/={3,}/IU
Capturing subpattern count = 0
Partial matching not supported
Options: ungreedy
First char = '='
Need char = '='
    abc========def
 0: ===
    
/(?U)={3,}?/I
Capturing subpattern count = 0
Partial matching not supported
Options: ungreedy
First char = '='
Need char = '='
    abc========def
 0: ========
    
/(?<!bar|cattle)foo/I
Capturing subpattern count = 0
No options
First char = 'f'
Need char = 'o'
    foo
 0: foo
    catfoo 
 0: foo
    *** Failers
No match
    the barfoo
No match
    and cattlefoo   
No match

/(?<=a+)b/
Failed: lookbehind assertion is not fixed length at offset 6

/(?<=aaa|b{0,3})b/
Failed: lookbehind assertion is not fixed length at offset 14

/(?<!(foo)a\1)bar/
Failed: lookbehind assertion is not fixed length at offset 12

/(?i)abc/I
Capturing subpattern count = 0
Options: caseless
First char = 'a' (caseless)
Need char = 'c' (caseless)

/(a|(?m)a)/I
Capturing subpattern count = 1
No options
First char = 'a'
No need char

/(?i)^1234/I
Capturing subpattern count = 0
Options: anchored caseless
No first char
No need char

/(^b|(?i)^d)/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char

/(?s).*/I
Capturing subpattern count = 0
Partial matching not supported
Options: anchored dotall
No first char
No need char

/[abcd]/IS
Capturing subpattern count = 0
No options
No first char
No need char
Starting byte set: a b c d 

/(?i)[abcd]/IS
Capturing subpattern count = 0
Options: caseless
No first char
No need char
Starting byte set: A B C D a b c d 

/(?m)[xy]|(b|c)/IS
Capturing subpattern count = 1
Options: multiline
No first char
No need char
Starting byte set: b c x y 

/(^a|^b)/Im
Capturing subpattern count = 1
Options: multiline
First char at start or follows newline
No need char

/(?i)(^a|^b)/Im
Capturing subpattern count = 1
Options: caseless multiline
First char at start or follows newline
No need char

/(a)(?(1)a|b|c)/
Failed: conditional group contains more than two branches at offset 13

/(?(?=a)a|b|c)/
Failed: conditional group contains more than two branches at offset 12

/(?(1a)/
Failed: missing ) at offset 6

/(?(1a))/
Failed: reference to non-existent subpattern at offset 6

/(?(?i))/
Failed: assertion expected after (?( at offset 3

/(?(abc))/
Failed: reference to non-existent subpattern at offset 7

/(?(?<ab))/
Failed: syntax error in subpattern name (missing terminator) at offset 7

/((?s)blah)\s+\1/I
Capturing subpattern count = 1
Max back reference = 1
Partial matching not supported
No options
First char = 'b'
Need char = 'h'

/((?i)blah)\s+\1/I
Capturing subpattern count = 1
Max back reference = 1
Partial matching not supported
No options
First char = 'b' (caseless)
Need char = 'h' (caseless)

/((?i)b)/IDS
------------------------------------------------------------------
  0  17 Bra 0
  3   9 Bra 1
  8  01 Opt
 10  NC b
 12   9 Ket
 15  00 Opt
 17  17 Ket
 20     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
First char = 'b' (caseless)
No need char
Study returned NULL

/(a*b|(?i:c*(?-i)d))/IS
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
Starting byte set: C a b c d 

/a$/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char
    a
 0: a
    a\n
 0: a
    *** Failers 
No match
    \Za
No match
    \Za\n   
No match

/a$/Im
Capturing subpattern count = 0
Options: multiline
First char = 'a'
No need char
    a
 0: a
    a\n
 0: a
    \Za\n   
 0: a
    *** Failers 
No match
    \Za
No match
    
/\Aabc/Im
Capturing subpattern count = 0
Options: anchored multiline
No first char
No need char

/^abc/Im 
Capturing subpattern count = 0
Options: multiline
First char at start or follows newline
Need char = 'c'

/^((a+)(?U)([ab]+)(?-U)([bc]+)(\w*))/I
Capturing subpattern count = 5
Partial matching not supported
Options: anchored
No first char
No need char
  aaaaabbbbbcccccdef
 0: aaaaabbbbbcccccdef
 1: aaaaabbbbbcccccdef
 2: aaaaa
 3: b
 4: bbbbccccc
 5: def

/(?<=foo)[ab]/IS
Capturing subpattern count = 0
No options
No first char
No need char
Starting byte set: a b 

/(?<!foo)(alpha|omega)/IS
Capturing subpattern count = 1
No options
No first char
Need char = 'a'
Starting byte set: a o 

/(?!alphabet)[ab]/IS
Capturing subpattern count = 0
No options
No first char
No need char
Starting byte set: a b 

/(?<=foo\n)^bar/Im
Capturing subpattern count = 0
Options: multiline
No first char
Need char = 'r'
    foo\nbarbar 
 0: bar
    ***Failers
No match
    rhubarb 
No match
    barbell
No match
    abc\nbarton 
No match

/^(?<=foo\n)bar/Im
Capturing subpattern count = 0
Options: multiline
First char at start or follows newline
Need char = 'r'
    foo\nbarbar 
 0: bar
    ***Failers
No match
    rhubarb 
No match
    barbell
No match
    abc\nbarton 
No match

/(?>^abc)/Im
Capturing subpattern count = 0
Options: multiline
First char at start or follows newline
Need char = 'c'
    abc
 0: abc
    def\nabc
 0: abc
    *** Failers
No match
    defabc   
No match

/(?<=ab(c+)d)ef/
Failed: lookbehind assertion is not fixed length at offset 11

/(?<=ab(?<=c+)d)ef/
Failed: lookbehind assertion is not fixed length at offset 12

/(?<=ab(c|de)f)g/
Failed: lookbehind assertion is not fixed length at offset 13

/The next three are in testinput2 because they have variable length branches/

/(?<=bullock|donkey)-cart/I
Capturing subpattern count = 0
No options
First char = '-'
Need char = 't'
    the bullock-cart
 0: -cart
    a donkey-cart race
 0: -cart
    *** Failers
No match
    cart
No match
    horse-and-cart    
No match
      
/(?<=ab(?i)x|y|z)/I
Capturing subpattern count = 0
No options
No first char
No need char

/(?>.*)(?<=(abcd)|(xyz))/I
Capturing subpattern count = 2
Partial matching not supported
No options
First char at start or follows newline
No need char
    alphabetabcd
 0: alphabetabcd
 1: abcd
    endingxyz
 0: endingxyz
 1: <unset>
 2: xyz

/(?<=ab(?i)x(?-i)y|(?i)z|b)ZZ/I
Capturing subpattern count = 0
No options
First char = 'Z'
Need char = 'Z'
    abxyZZ
 0: ZZ
    abXyZZ
 0: ZZ
    ZZZ
 0: ZZ
    zZZ
 0: ZZ
    bZZ
 0: ZZ
    BZZ     
 0: ZZ
    *** Failers
No match
    ZZ 
No match
    abXYZZ 
No match
    zzz
No match
    bzz  
No match

/(?<!(foo)a)bar/I
Capturing subpattern count = 1
No options
First char = 'b'
Need char = 'r'
    bar
 0: bar
    foobbar 
 0: bar
    *** Failers
No match
    fooabar  
No match

/This one is here because Perl 5.005_02 doesn't fail it/I
Capturing subpattern count = 0
No options
First char = 'T'
Need char = 't'

/^(a)?(?(1)a|b)+$/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char
    *** Failers
No match
    a 
No match

/This one is here because I think Perl 5.005_02 gets the setting of $1 wrong/I
Capturing subpattern count = 0
No options
First char = 'T'
Need char = 'g'

/^(a\1?){4}$/I
Capturing subpattern count = 1
Max back reference = 1
Options: anchored
No first char
No need char
    aaaaaa
 0: aaaaaa
 1: aa
    
/These are syntax tests from Perl 5.005/I
Capturing subpattern count = 0
No options
First char = 'T'
Need char = '5'

/a[b-a]/
Failed: range out of order in character class at offset 4

/a[]b/
Failed: missing terminating ] for character class at offset 4

/a[/
Failed: missing terminating ] for character class at offset 2

/*a/
Failed: nothing to repeat at offset 0

/(*)b/
Failed: nothing to repeat at offset 1

/abc)/
Failed: unmatched parentheses at offset 3

/(abc/
Failed: missing ) at offset 4

/a**/
Failed: nothing to repeat at offset 2

/)(/
Failed: unmatched parentheses at offset 0

/\1/
Failed: reference to non-existent subpattern at offset 2

/\2/
Failed: reference to non-existent subpattern at offset 2

/(a)|\2/
Failed: reference to non-existent subpattern at offset 6

/a[b-a]/Ii
Failed: range out of order in character class at offset 4

/a[]b/Ii
Failed: missing terminating ] for character class at offset 4

/a[/Ii
Failed: missing terminating ] for character class at offset 2

/*a/Ii
Failed: nothing to repeat at offset 0

/(*)b/Ii
Failed: nothing to repeat at offset 1

/abc)/Ii
Failed: unmatched parentheses at offset 3

/(abc/Ii
Failed: missing ) at offset 4

/a**/Ii
Failed: nothing to repeat at offset 2

/)(/Ii
Failed: unmatched parentheses at offset 0

/:(?:/
Failed: missing ) at offset 4

/(?<%)b/
Failed: unrecognized character after (?< at offset 3

/a(?{)b/
Failed: unrecognized character after (? at offset 3

/a(?{{})b/
Failed: unrecognized character after (? at offset 3

/a(?{}})b/
Failed: unrecognized character after (? at offset 3

/a(?{"{"})b/
Failed: unrecognized character after (? at offset 3

/a(?{"{"}})b/
Failed: unrecognized character after (? at offset 3

/(?(1?)a|b)/
Failed: malformed number or name after (?( at offset 4

/(?(1)a|b|c)/
Failed: conditional group contains more than two branches at offset 10

/[a[:xyz:/
Failed: missing terminating ] for character class at offset 8

/(?<=x+)y/
Failed: lookbehind assertion is not fixed length at offset 6

/a{37,17}/
Failed: numbers out of order in {} quantifier at offset 7

/abc/\
Failed: \ at end of pattern at offset 4

/abc/\P
Failed: POSIX code 9: bad escape sequence at offset 4     

/abc/\i
Failed: \ at end of pattern at offset 4

/(a)bc(d)/I
Capturing subpattern count = 2
No options
First char = 'a'
Need char = 'd'
    abcd
 0: abcd
 1: a
 2: d
    abcd\C2
 0: abcd
 1: a
 2: d
 2C d (1)
    abcd\C5
 0: abcd
 1: a
 2: d
copy substring 5 failed -7
     
/(.{20})/I
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
    abcdefghijklmnopqrstuvwxyz
 0: abcdefghijklmnopqrst
 1: abcdefghijklmnopqrst
    abcdefghijklmnopqrstuvwxyz\C1
 0: abcdefghijklmnopqrst
 1: abcdefghijklmnopqrst
 1C abcdefghijklmnopqrst (20)
    abcdefghijklmnopqrstuvwxyz\G1
 0: abcdefghijklmnopqrst
 1: abcdefghijklmnopqrst
 1G abcdefghijklmnopqrst (20)
     
/(.{15})/I
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
    abcdefghijklmnopqrstuvwxyz
 0: abcdefghijklmno
 1: abcdefghijklmno
    abcdefghijklmnopqrstuvwxyz\C1\G1
 0: abcdefghijklmno
 1: abcdefghijklmno
 1C abcdefghijklmno (15)
 1G abcdefghijklmno (15)

/(.{16})/I
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
    abcdefghijklmnopqrstuvwxyz
 0: abcdefghijklmnop
 1: abcdefghijklmnop
    abcdefghijklmnopqrstuvwxyz\C1\G1\L
 0: abcdefghijklmnop
 1: abcdefghijklmnop
 1C abcdefghijklmnop (16)
 1G abcdefghijklmnop (16)
 0L abcdefghijklmnop
 1L abcdefghijklmnop
    
/^(a|(bc))de(f)/I
Capturing subpattern count = 3
Options: anchored
No first char
No need char
    adef\G1\G2\G3\G4\L 
 0: adef
 1: a
 2: <unset>
 3: f
 1G a (1)
 2G  (0)
 3G f (1)
get substring 4 failed -7
 0L adef
 1L a
 2L 
 3L f
    bcdef\G1\G2\G3\G4\L 
 0: bcdef
 1: bc
 2: bc
 3: f
 1G bc (2)
 2G bc (2)
 3G f (1)
get substring 4 failed -7
 0L bcdef
 1L bc
 2L bc
 3L f
    adefghijk\C0 
 0: adef
 1: a
 2: <unset>
 3: f
 0C adef (4)
    
/^abc\00def/I
Capturing subpattern count = 0
Options: anchored
No first char
No need char
    abc\00def\L\C0 
 0: abc\x00def
 0C abc (7)
 0L abc
    
/word ((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ 
)((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ )((?:[a-zA-Z0-9]+ 
)?)?)?)?)?)?)?)?)?otherword/IM
Memory allocation (code space): 448
Capturing subpattern count = 8
Partial matching not supported
No options
First char = 'w'
Need char = 'd'

/.*X/ID
------------------------------------------------------------------
  0   7 Bra 0
  3     Any*
  5     X
  7   7 Ket
 10     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
First char at start or follows newline
Need char = 'X'

/.*X/IDs
------------------------------------------------------------------
  0   7 Bra 0
  3     Any*
  5     X
  7   7 Ket
 10     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: anchored dotall
No first char
Need char = 'X'

/(.*X|^B)/ID
------------------------------------------------------------------
  0  21 Bra 0
  3   9 Bra 1
  8     Any*
 10     X
 12   6 Alt
 15     ^
 16     B
 18  15 Ket
 21  21 Ket
 24     End
------------------------------------------------------------------
Capturing subpattern count = 1
Partial matching not supported
No options
First char at start or follows newline
No need char

/(.*X|^B)/IDs
------------------------------------------------------------------
  0  21 Bra 0
  3   9 Bra 1
  8     Any*
 10     X
 12   6 Alt
 15     ^
 16     B
 18  15 Ket
 21  21 Ket
 24     End
------------------------------------------------------------------
Capturing subpattern count = 1
Partial matching not supported
Options: anchored dotall
No first char
No need char
    
/(?s)(.*X|^B)/ID
------------------------------------------------------------------
  0  21 Bra 0
  3   9 Bra 1
  8     Any*
 10     X
 12   6 Alt
 15     ^
 16     B
 18  15 Ket
 21  21 Ket
 24     End
------------------------------------------------------------------
Capturing subpattern count = 1
Partial matching not supported
Options: anchored dotall
No first char
No need char

/(?s:.*X|^B)/ID
------------------------------------------------------------------
  0  25 Bra 0
  3   9 Bra 0
  6  04 Opt
  8     Any*
 10     X
 12   8 Alt
 15  04 Opt
 17     ^
 18     B
 20  17 Ket
 23  00 Opt
 25  25 Ket
 28     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
First char at start or follows newline
No need char

/\Biss\B/I+
Capturing subpattern count = 0
No options
First char = 'i'
Need char = 's'
    Mississippi
 0: iss
 0+ issippi

/\Biss\B/I+P
    Mississippi
 0: iss
 0+ issippi

/iss/IG+
Capturing subpattern count = 0
No options
First char = 'i'
Need char = 's'
    Mississippi
 0: iss
 0+ issippi
 0: iss
 0+ ippi

/\Biss\B/IG+
Capturing subpattern count = 0
No options
First char = 'i'
Need char = 's'
    Mississippi
 0: iss
 0+ issippi

/\Biss\B/Ig+
Capturing subpattern count = 0
No options
First char = 'i'
Need char = 's'
    Mississippi
 0: iss
 0+ issippi
 0: iss
 0+ ippi
    *** Failers
No match
    Mississippi\A
No match

/(?<=[Ms])iss/Ig+
Capturing subpattern count = 0
No options
First char = 'i'
Need char = 's'
    Mississippi
 0: iss
 0+ issippi
 0: iss
 0+ ippi

/(?<=[Ms])iss/IG+
Capturing subpattern count = 0
No options
First char = 'i'
Need char = 's'
    Mississippi
 0: iss
 0+ issippi

/^iss/Ig+
Capturing subpattern count = 0
Options: anchored
No first char
No need char
    ississippi
 0: iss
 0+ issippi
    
/.*iss/Ig+
Capturing subpattern count = 0
Partial matching not supported
No options
First char at start or follows newline
Need char = 's'
    abciss\nxyzisspqr 
 0: abciss
 0+ \x0axyzisspqr
 0: xyziss
 0+ pqr

/.i./I+g
Capturing subpattern count = 0
No options
No first char
Need char = 'i'
    Mississippi
 0: Mis
 0+ sissippi
 0: sis
 0+ sippi
 0: sip
 0+ pi
    Mississippi\A
 0: Mis
 0+ sissippi
 0: sis
 0+ sippi
 0: sip
 0+ pi
    Missouri river
 0: Mis
 0+ souri river
 0: ri 
 0+ river
 0: riv
 0+ er
    Missouri river\A  
 0: Mis
 0+ souri river

/^.is/I+g
Capturing subpattern count = 0
Options: anchored
No first char
No need char
    Mississippi
 0: Mis
 0+ sissippi

/^ab\n/Ig+
Capturing subpattern count = 0
Options: anchored
No first char
No need char
    ab\nab\ncd
 0: ab\x0a
 0+ ab\x0acd

/^ab\n/Img+
Capturing subpattern count = 0
Options: multiline
First char at start or follows newline
Need char = 10
    ab\nab\ncd
 0: ab\x0a
 0+ ab\x0acd
 0: ab\x0a
 0+ cd

/abc/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'c'

/abc|bac/I
Capturing subpattern count = 0
No options
No first char
Need char = 'c'

/(abc|bac)/I
Capturing subpattern count = 1
No options
No first char
Need char = 'c'

/(abc|(c|dc))/I
Capturing subpattern count = 2
No options
No first char
Need char = 'c'

/(abc|(d|de)c)/I
Capturing subpattern count = 2
No options
No first char
Need char = 'c'

/a*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char

/a+/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
No need char

/(baa|a+)/I
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
Need char = 'a'

/a{0,3}/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char

/baa{3,}/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'b'
Need char = 'a'

/"([^\\"]+|\\.)*"/I
Capturing subpattern count = 1
Partial matching not supported
No options
First char = '"'
Need char = '"'

/(abc|ab[cd])/I
Capturing subpattern count = 1
No options
First char = 'a'
No need char

/(a|.)/I
Capturing subpattern count = 1
No options
No first char
No need char

/a|ba|\w/I
Capturing subpattern count = 0
No options
No first char
No need char

/abc(?=pqr)/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'r'

/...(?<=abc)/I
Capturing subpattern count = 0
No options
No first char
No need char

/abc(?!pqr)/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'c'

/ab./I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b'

/ab[xyz]/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b'

/abc*/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
Need char = 'b'

/ab.c*/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
Need char = 'b'

/a.c*/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
No need char

/.c*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char

/ac*/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
No need char

/(a.c*|b.c*)/I
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char

/a.c*|aba/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
No need char

/.+a/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'a'

/(?=abcda)a.*/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
Need char = 'a'

/(?=a)a.*/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
No need char

/a(b)*/I
Capturing subpattern count = 1
No options
First char = 'a'
No need char

/a\d*/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
No need char

/ab\d*/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
Need char = 'b'

/a(\d)*/I
Capturing subpattern count = 1
No options
First char = 'a'
No need char

/abcde{0,0}/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'd'

/ab\d+/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
Need char = 'b'

/a(?(1)b)/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char

/a(?(1)bag|big)/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'g'

/a(?(1)bag|big)*/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char

/a(?(1)bag|big)+/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'g'

/a(?(1)b..|b..)/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b'

/ab\d{0}e/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'e'

/a?b?/I
Capturing subpattern count = 0
No options
No first char
No need char
    a
 0: a
    b
 0: b
    ab
 0: ab
    \
 0: 
    *** Failers
 0: 
    \N     
No match
    
/|-/I
Capturing subpattern count = 0
No options
No first char
No need char
    abcd
 0: 
    -abc
 0: 
    \Nab-c
 0: -
    *** Failers
 0: 
    \Nabc     
No match

/a*(b+)(z)(z)/IP
    aaaabbbbzzzz
 0: aaaabbbbzz
 1: bbbb
 2: z
 3: z
    aaaabbbbzzzz\O0
    aaaabbbbzzzz\O1
 0: aaaabbbbzz
    aaaabbbbzzzz\O2
 0: aaaabbbbzz
 1: bbbb
    aaaabbbbzzzz\O3
 0: aaaabbbbzz
 1: bbbb
 2: z
    aaaabbbbzzzz\O4
 0: aaaabbbbzz
 1: bbbb
 2: z
 3: z
    aaaabbbbzzzz\O5
 0: aaaabbbbzz
 1: bbbb
 2: z
 3: z
    
/^.?abcd/IS 
Capturing subpattern count = 0
Options: anchored
No first char
Need char = 'd'
Study returned NULL

/\(             # ( at start
  (?:           # Non-capturing bracket
  (?>[^()]+)    # Either a sequence of non-brackets (no backtracking)
  |             # Or
  (?R)          # Recurse - i.e. nested bracketed string
  )*            # Zero or more contents
  \)            # Closing )
  /Ix
Capturing subpattern count = 0
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    (abcd)
 0: (abcd)
    (abcd)xyz
 0: (abcd)
    xyz(abcd)
 0: (abcd)
    (ab(xy)cd)pqr 
 0: (ab(xy)cd)
    (ab(xycd)pqr 
 0: (xycd)
    () abc () 
 0: ()
    12(abcde(fsh)xyz(foo(bar))lmno)89
 0: (abcde(fsh)xyz(foo(bar))lmno)
    *** Failers
No match
    abcd 
No match
    abcd)
No match
    (abcd  
No match

/\(  ( (?>[^()]+) | (?R) )* \) /Ixg
Capturing subpattern count = 1
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    (ab(xy)cd)pqr 
 0: (ab(xy)cd)
 1: cd
    1(abcd)(x(y)z)pqr
 0: (abcd)
 1: abcd
 0: (x(y)z)
 1: z

/\(  (?: (?>[^()]+) | (?R) ) \) /Ix
Capturing subpattern count = 0
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    (abcd)
 0: (abcd)
    (ab(xy)cd)
 0: (xy)
    (a(b(c)d)e) 
 0: (c)
    ((ab)) 
 0: ((ab))
    *** Failers
No match
    ()   
No match

/\(  (?: (?>[^()]+) | (?R) )? \) /Ix
Capturing subpattern count = 0
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    ()
 0: ()
    12(abcde(fsh)xyz(foo(bar))lmno)89
 0: (fsh)

/\(  ( (?>[^()]+) | (?R) )* \) /Ix
Capturing subpattern count = 1
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    (ab(xy)cd)
 0: (ab(xy)cd)
 1: cd

/\( ( ( (?>[^()]+) | (?R) )* ) \) /Ix
Capturing subpattern count = 2
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    (ab(xy)cd)
 0: (ab(xy)cd)
 1: ab(xy)cd
 2: cd

/\( (123)? ( ( (?>[^()]+) | (?R) )* ) \) /Ix
Capturing subpattern count = 3
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    (ab(xy)cd)
 0: (ab(xy)cd)
 1: <unset>
 2: ab(xy)cd
 3: cd
    (123ab(xy)cd)
 0: (123ab(xy)cd)
 1: 123
 2: ab(xy)cd
 3: cd

/\( ( (123)? ( (?>[^()]+) | (?R) )* ) \) /Ix
Capturing subpattern count = 3
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    (ab(xy)cd)
 0: (ab(xy)cd)
 1: ab(xy)cd
 2: <unset>
 3: cd
    (123ab(xy)cd)
 0: (123ab(xy)cd)
 1: 123ab(xy)cd
 2: 123
 3: cd

/\( (((((((((( ( (?>[^()]+) | (?R) )* )))))))))) \) /Ix
Capturing subpattern count = 11
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    (ab(xy)cd)
 0: (ab(xy)cd)
 1: ab(xy)cd
 2: ab(xy)cd
 3: ab(xy)cd
 4: ab(xy)cd
 5: ab(xy)cd
 6: ab(xy)cd
 7: ab(xy)cd
 8: ab(xy)cd
 9: ab(xy)cd
10: ab(xy)cd
11: cd

/\( ( ( (?>[^()<>]+) | ((?>[^()]+)) | (?R) )* ) \) /Ix
Capturing subpattern count = 3
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    (abcd(xyz<p>qrs)123)
 0: (abcd(xyz<p>qrs)123)
 1: abcd(xyz<p>qrs)123
 2: 123
 3: <unset>

/\( ( ( (?>[^()]+) | ((?R)) )* ) \) /Ix
Capturing subpattern count = 3
Partial matching not supported
Options: extended
First char = '('
Need char = ')'
    (ab(cd)ef)
 0: (ab(cd)ef)
 1: ab(cd)ef
 2: ef
 3: (cd)
    (ab(cd(ef)gh)ij)
 0: (ab(cd(ef)gh)ij)
 1: ab(cd(ef)gh)ij
 2: ij
 3: (cd(ef)gh)

/^[[:alnum:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [0-9A-Za-z]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^alnum:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-/:-@[-`{-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:alpha:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [A-Za-z]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^alpha:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-@[-`{-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char
             
/[_[:alpha:]]/IS
Capturing subpattern count = 0
No options
No first char
No need char
Starting byte set: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 
  _ a b c d e f g h i j k l m n o p q r s t u v w x y z 

/^[[:ascii:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-\x7f]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^ascii:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x80-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:blank:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x09 ]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^blank:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-\x08\x0a-\x1f!-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/[\n\x0b\x0c\x0d[:blank:]]/IS
Capturing subpattern count = 0
No options
No first char
No need char
Starting byte set: \x09 \x0a \x0b \x0c \x0d \x20 

/^[[:cntrl:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-\x1f\x7f]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:digit:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [0-9]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:graph:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [!-~]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:lower:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [a-z]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:print:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [ -~]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:punct:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [!-/:-@[-`{-~]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:space:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x09-\x0d ]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:upper:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [A-Z]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:xdigit:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [0-9A-Fa-f]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:word:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [0-9A-Z_a-z]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^cntrl:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [ -~\x80-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[12[:^digit:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-/12:-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/^[[:^blank:]]/D
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\x00-\x08\x0a-\x1f!-\xff]
 37  37 Ket
 40     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/[01[:alpha:]%]/D
------------------------------------------------------------------
  0  36 Bra 0
  3     [%01A-Za-z]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/[[.ch.]]/I
Failed: POSIX collating elements are not supported at offset 1

/[[=ch=]]/I
Failed: POSIX collating elements are not supported at offset 1

/[[:rhubarb:]]/I
Failed: unknown POSIX class name at offset 3

/[[:upper:]]/Ii
Capturing subpattern count = 0
Options: caseless
No first char
No need char
    A
 0: A
    a 
 0: a
    
/[[:lower:]]/Ii
Capturing subpattern count = 0
Options: caseless
No first char
No need char
    A
 0: A
    a 
 0: a

/((?-i)[[:lower:]])[[:lower:]]/Ii
Capturing subpattern count = 1
Options: caseless
No first char
No need char
    ab
 0: ab
 1: a
    aB
 0: aB
 1: a
    *** Failers
 0: ai
 1: a
    Ab
No match
    AB        
No match

/[\200-\110]/I
Failed: range out of order in character class at offset 9

/^(?(0)f|b)oo/I
Failed: invalid condition (?(0) at offset 6

/This one's here because of the large output vector needed/I
Capturing subpattern count = 0
No options
First char = 'T'
Need char = 'd'

/(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\d+(?:\s|$))(\w+)\s+(\270)/I
Capturing subpattern count = 271
Max back reference = 270
Partial matching not supported
No options
No first char
No need char
    \O900 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 ABC ABC
 0: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 ABC ABC
 1: 1 
 2: 2 
 3: 3 
 4: 4 
 5: 5 
 6: 6 
 7: 7 
 8: 8 
 9: 9 
10: 10 
11: 11 
12: 12 
13: 13 
14: 14 
15: 15 
16: 16 
17: 17 
18: 18 
19: 19 
20: 20 
21: 21 
22: 22 
23: 23 
24: 24 
25: 25 
26: 26 
27: 27 
28: 28 
29: 29 
30: 30 
31: 31 
32: 32 
33: 33 
34: 34 
35: 35 
36: 36 
37: 37 
38: 38 
39: 39 
40: 40 
41: 41 
42: 42 
43: 43 
44: 44 
45: 45 
46: 46 
47: 47 
48: 48 
49: 49 
50: 50 
51: 51 
52: 52 
53: 53 
54: 54 
55: 55 
56: 56 
57: 57 
58: 58 
59: 59 
60: 60 
61: 61 
62: 62 
63: 63 
64: 64 
65: 65 
66: 66 
67: 67 
68: 68 
69: 69 
70: 70 
71: 71 
72: 72 
73: 73 
74: 74 
75: 75 
76: 76 
77: 77 
78: 78 
79: 79 
80: 80 
81: 81 
82: 82 
83: 83 
84: 84 
85: 85 
86: 86 
87: 87 
88: 88 
89: 89 
90: 90 
91: 91 
92: 92 
93: 93 
94: 94 
95: 95 
96: 96 
97: 97 
98: 98 
99: 99 
100: 100 
101: 101 
102: 102 
103: 103 
104: 104 
105: 105 
106: 106 
107: 107 
108: 108 
109: 109 
110: 110 
111: 111 
112: 112 
113: 113 
114: 114 
115: 115 
116: 116 
117: 117 
118: 118 
119: 119 
120: 120 
121: 121 
122: 122 
123: 123 
124: 124 
125: 125 
126: 126 
127: 127 
128: 128 
129: 129 
130: 130 
131: 131 
132: 132 
133: 133 
134: 134 
135: 135 
136: 136 
137: 137 
138: 138 
139: 139 
140: 140 
141: 141 
142: 142 
143: 143 
144: 144 
145: 145 
146: 146 
147: 147 
148: 148 
149: 149 
150: 150 
151: 151 
152: 152 
153: 153 
154: 154 
155: 155 
156: 156 
157: 157 
158: 158 
159: 159 
160: 160 
161: 161 
162: 162 
163: 163 
164: 164 
165: 165 
166: 166 
167: 167 
168: 168 
169: 169 
170: 170 
171: 171 
172: 172 
173: 173 
174: 174 
175: 175 
176: 176 
177: 177 
178: 178 
179: 179 
180: 180 
181: 181 
182: 182 
183: 183 
184: 184 
185: 185 
186: 186 
187: 187 
188: 188 
189: 189 
190: 190 
191: 191 
192: 192 
193: 193 
194: 194 
195: 195 
196: 196 
197: 197 
198: 198 
199: 199 
200: 200 
201: 201 
202: 202 
203: 203 
204: 204 
205: 205 
206: 206 
207: 207 
208: 208 
209: 209 
210: 210 
211: 211 
212: 212 
213: 213 
214: 214 
215: 215 
216: 216 
217: 217 
218: 218 
219: 219 
220: 220 
221: 221 
222: 222 
223: 223 
224: 224 
225: 225 
226: 226 
227: 227 
228: 228 
229: 229 
230: 230 
231: 231 
232: 232 
233: 233 
234: 234 
235: 235 
236: 236 
237: 237 
238: 238 
239: 239 
240: 240 
241: 241 
242: 242 
243: 243 
244: 244 
245: 245 
246: 246 
247: 247 
248: 248 
249: 249 
250: 250 
251: 251 
252: 252 
253: 253 
254: 254 
255: 255 
256: 256 
257: 257 
258: 258 
259: 259 
260: 260 
261: 261 
262: 262 
263: 263 
264: 264 
265: 265 
266: 266 
267: 267 
268: 268 
269: 269 
270: ABC
271: ABC

/This one's here because Perl does this differently and PCRE can't at present/I
Capturing subpattern count = 0
No options
First char = 'T'
Need char = 't'

/(main(O)?)+/I
Capturing subpattern count = 2
No options
First char = 'm'
Need char = 'n'
    mainmain
 0: mainmain
 1: main
    mainOmain
 0: mainOmain
 1: main
 2: O
    
/These are all cases where Perl does it differently (nested captures)/I
Capturing subpattern count = 1
No options
First char = 'T'
Need char = 's'

/^(a(b)?)+$/I
Capturing subpattern count = 2
Options: anchored
No first char
No need char
    aba
 0: aba
 1: a
 2: b
   
/^(aa(bb)?)+$/I
Capturing subpattern count = 2
Options: anchored
No first char
No need char
    aabbaa    
 0: aabbaa
 1: aa
 2: bb
    
/^(aa|aa(bb))+$/I
Capturing subpattern count = 2
Options: anchored
No first char
No need char
    aabbaa 
 0: aabbaa
 1: aa
 2: bb
    
/^(aa(bb)??)+$/I
Capturing subpattern count = 2
Options: anchored
No first char
No need char
    aabbaa    
 0: aabbaa
 1: aa
 2: bb
    
/^(?:aa(bb)?)+$/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char
    aabbaa    
 0: aabbaa
 1: bb
    
/^(aa(b(b))?)+$/I
Capturing subpattern count = 3
Options: anchored
No first char
No need char
    aabbaa    
 0: aabbaa
 1: aa
 2: bb
 3: b

/^(?:aa(b(b))?)+$/I
Capturing subpattern count = 2
Options: anchored
No first char
No need char
    aabbaa    
 0: aabbaa
 1: bb
 2: b

/^(?:aa(b(?:b))?)+$/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char
    aabbaa    
 0: aabbaa
 1: bb

/^(?:aa(bb(?:b))?)+$/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char
    aabbbaa    
 0: aabbbaa
 1: bbb
    
/^(?:aa(b(?:bb))?)+$/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char
    aabbbaa    
 0: aabbbaa
 1: bbb

/^(?:aa(?:b(b))?)+$/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char
    aabbaa    
 0: aabbaa
 1: b

/^(?:aa(?:b(bb))?)+$/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char
    aabbbaa    
 0: aabbbaa
 1: bb

/^(aa(b(bb))?)+$/I
Capturing subpattern count = 3
Options: anchored
No first char
No need char
    aabbbaa    
 0: aabbbaa
 1: aa
 2: bbb
 3: bb

/^(aa(bb(bb))?)+$/I
Capturing subpattern count = 3
Options: anchored
No first char
No need char
    aabbbbaa    
 0: aabbbbaa
 1: aa
 2: bbbb
 3: bb

/--------------------------------------------------------------------/I 
Capturing subpattern count = 0
No options
First char = '-'
Need char = '-'
    
/#/IxMD
Memory allocation (code space): 7
------------------------------------------------------------------
  0   3 Bra 0
  3   3 Ket
  6     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: extended
No first char
No need char

/a#/IxMD
Memory allocation (code space): 9
------------------------------------------------------------------
  0   5 Bra 0
  3     a
  5   5 Ket
  8     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: extended
First char = 'a'
No need char

/[\s]/D
------------------------------------------------------------------
  0  36 Bra 0
  3     [\x09\x0a\x0c\x0d ]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/[\S]/D
------------------------------------------------------------------
  0  36 Bra 0
  3     [\x00-\x08\x0b\x0e-\x1f!-\xff]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/a(?i)b/D
------------------------------------------------------------------
  0   9 Bra 0
  3     a
  5  01 Opt
  7  NC b
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b' (caseless)
    ab
 0: ab
    aB
 0: aB
    *** Failers 
No match
    AB  
No match

/(a(?i)b)/D
------------------------------------------------------------------
  0  19 Bra 0
  3  11 Bra 1
  8     a
 10  01 Opt
 12  NC b
 14  11 Ket
 17  00 Opt
 19  19 Ket
 22     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'b' (caseless)
    ab
 0: ab
 1: ab
    aB
 0: aB
 1: aB
    *** Failers 
No match
    AB  
No match
    
/   (?i)abc/IxD
------------------------------------------------------------------
  0   9 Bra 0
  3  NC abc
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: caseless extended
First char = 'a' (caseless)
Need char = 'c' (caseless)

/#this is a comment
  (?i)abc/IxD
------------------------------------------------------------------
  0   9 Bra 0
  3  NC abc
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: caseless extended
First char = 'a' (caseless)
Need char = 'c' (caseless)

/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890/D
------------------------------------------------------------------
  0 603 Bra 0
  3     123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
603 603 Ket
606     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = '1'
Need char = '0'

/\Q123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890/D
------------------------------------------------------------------
  0 603 Bra 0
  3     123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
603 603 Ket
606     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = '1'
Need char = '0'

/\Q\E/D
------------------------------------------------------------------
  0   3 Bra 0
  3   3 Ket
  6     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char
    \
 0: 

/\Q\Ex/D
------------------------------------------------------------------
  0   5 Bra 0
  3     x
  5   5 Ket
  8     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'x'
No need char

/ \Q\E/D
------------------------------------------------------------------
  0   5 Bra 0
  3      
  5   5 Ket
  8     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = ' '
No need char

/a\Q\E/D
------------------------------------------------------------------
  0   5 Bra 0
  3     a
  5   5 Ket
  8     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'a'
No need char
  abc
 0: a
  bca
 0: a
  bac  
 0: a

/a\Q\Eb/D
------------------------------------------------------------------
  0   7 Bra 0
  3     ab
  7   7 Ket
 10     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b'
  abc
 0: ab

/\Q\Eabc/D
------------------------------------------------------------------
  0   9 Bra 0
  3     abc
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'c'

/x*+\w/D
------------------------------------------------------------------
  0   6 Bra 0
  3     x*+
  5     \w
  6   6 Ket
  9     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
    *** Failers
 0: F
    xxxxx
No match
    
/x?+/D
------------------------------------------------------------------
  0   5 Bra 0
  3     x?+
  5   5 Ket
  8     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/x++/D
------------------------------------------------------------------
  0   5 Bra 0
  3     x++
  5   5 Ket
  8     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'x'
No need char

/x{1,3}+/D 
------------------------------------------------------------------
  0  15 Bra 0
  3   9 Once
  6     x
  8     x{0,2}
 12   9 Ket
 15  15 Ket
 18     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'x'
No need char

/(x)*+/D
------------------------------------------------------------------
  0  20 Bra 0
  3  14 Once
  6     Brazero
  7   7 Bra 1
 12     x
 14   7 KetRmax
 17  14 Ket
 20  20 Ket
 23     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
No first char
No need char

/^(\w++|\s++)*$/I
Capturing subpattern count = 1
Partial matching not supported
Options: anchored
No first char
No need char
    now is the time for all good men to come to the aid of the party
 0: now is the time for all good men to come to the aid of the party
 1: party
    *** Failers
No match
    this is not a line with only words and spaces!
No match
    
/(\d++)(\w)/I
Capturing subpattern count = 2
Partial matching not supported
No options
No first char
No need char
    12345a
 0: 12345a
 1: 12345
 2: a
    *** Failers
No match
    12345+ 
No match

/a++b/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
Need char = 'b'
    aaab
 0: aaab

/(a++b)/I
Capturing subpattern count = 1
Partial matching not supported
No options
First char = 'a'
Need char = 'b'
    aaab
 0: aaab
 1: aaab

/(a++)b/I
Capturing subpattern count = 1
Partial matching not supported
No options
First char = 'a'
Need char = 'b'
    aaab
 0: aaab
 1: aaa

/([^()]++|\([^()]*\))+/I
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
    ((abc(ade)ufh()()x
 0: abc(ade)ufh()()x
 1: x
    
/\(([^()]++|\([^()]+\))+\)/I 
Capturing subpattern count = 1
Partial matching not supported
No options
First char = '('
Need char = ')'
    (abc)
 0: (abc)
 1: abc
    (abc(def)xyz)
 0: (abc(def)xyz)
 1: xyz
    *** Failers
No match
    ((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa   
No match

/(abc){1,3}+/D
------------------------------------------------------------------
  0  59 Bra 0
  3  53 Once
  6  11 Bra 1
 11     abc
 17  11 Ket
 20     Brazero
 21  32 Bra 0
 24  11 Bra 1
 29     abc
 35  11 Ket
 38     Brazero
 39  11 Bra 1
 44     abc
 50  11 Ket
 53  32 Ket
 56  53 Ket
 59  59 Ket
 62     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'c'

/a+?+/I
Failed: nothing to repeat at offset 3

/a{2,3}?+b/I
Failed: nothing to repeat at offset 7

/(?U)a+?+/I
Failed: nothing to repeat at offset 7

/a{2,3}?+b/IU
Failed: nothing to repeat at offset 7

/x(?U)a++b/D
------------------------------------------------------------------
  0   9 Bra 0
  3     x
  5     a++
  7     b
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'x'
Need char = 'b'
    xaaaab
 0: xaaaab

/(?U)xa++b/D
------------------------------------------------------------------
  0   9 Bra 0
  3     x
  5     a++
  7     b
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: ungreedy
First char = 'x'
Need char = 'b'
    xaaaab
 0: xaaaab

/^((a+)(?U)([ab]+)(?-U)([bc]+)(\w*))/D
------------------------------------------------------------------
  0 116 Bra 0
  3     ^
  4 109 Bra 1
  9   7 Bra 2
 14     a+
 16   7 Ket
 19  39 Bra 3
 24     [ab]+?
 58  39 Ket
 61  39 Bra 4
 66     [bc]+
100  39 Ket
103   7 Bra 5
108     \w*
110   7 Ket
113 109 Ket
116 116 Ket
119     End
------------------------------------------------------------------
Capturing subpattern count = 5
Partial matching not supported
Options: anchored
No first char
No need char

/^x(?U)a+b/D
------------------------------------------------------------------
  0  10 Bra 0
  3     ^
  4     x
  6     a++
  8     b
 10  10 Ket
 13     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: anchored
No first char
Need char = 'b'

/^x(?U)(a+)b/D
------------------------------------------------------------------
  0  18 Bra 0
  3     ^
  4     x
  6   7 Bra 1
 11     a+?
 13   7 Ket
 16     b
 18  18 Ket
 21     End
------------------------------------------------------------------
Capturing subpattern count = 1
Partial matching not supported
Options: anchored
No first char
Need char = 'b'

/[.x.]/I
Failed: POSIX collating elements are not supported at offset 0

/[=x=]/I
Failed: POSIX collating elements are not supported at offset 0

/[:x:]/I
Failed: POSIX named classes are supported only within a class at offset 0

/\l/I
Failed: PCRE does not support \L, \l, \N, \U, or \u at offset 1

/\L/I
Failed: PCRE does not support \L, \l, \N, \U, or \u at offset 1

/\N{name}/I
Failed: PCRE does not support \L, \l, \N, \U, or \u at offset 1

/\u/I
Failed: PCRE does not support \L, \l, \N, \U, or \u at offset 1

/\U/I
Failed: PCRE does not support \L, \l, \N, \U, or \u at offset 1

/[/I
Failed: missing terminating ] for character class at offset 1

/[a-/I
Failed: missing terminating ] for character class at offset 3

/[[:space:]/I
Failed: missing terminating ] for character class at offset 10

/[\s]/IDM
Memory allocation (code space): 40
------------------------------------------------------------------
  0  36 Bra 0
  3     [\x09\x0a\x0c\x0d ]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/[[:space:]]/IDM
Memory allocation (code space): 40
------------------------------------------------------------------
  0  36 Bra 0
  3     [\x09-\x0d ]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/[[:space:]abcde]/IDM
Memory allocation (code space): 40
------------------------------------------------------------------
  0  36 Bra 0
  3     [\x09-\x0d a-e]
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/< (?: (?(R) \d++  | [^<>]*+) | (?R)) * >/Ix
Capturing subpattern count = 0
Partial matching not supported
Options: extended
First char = '<'
Need char = '>'
    <>
 0: <>
    <abcd>
 0: <abcd>
    <abc <123> hij>
 0: <abc <123> hij>
    <abc <def> hij>
 0: <def>
    <abc<>def> 
 0: <abc<>def>
    <abc<>      
 0: <>
    *** Failers
No match
    <abc
No match

|8J\$WE\<\.rX\+ix\[d1b\!H\#\?vV0vrK\:ZH1\=2M\>iV\;\?aPhFB\<\*vW\@QW\@sO9\}cfZA\-i\'w\%hKd6gt1UJP\,15_\#QY\$M\^Mss_U\/\]\&LK9\[5vQub\^w\[KDD\<EjmhUZ\?\.akp2dF\>qmj\;2\}YWFdYx\.Ap\]hjCPTP\(n28k\+3\;o\&WXqs\/gOXdr\$\:r\'do0\;b4c\(f_Gr\=\"\\4\)\[01T7ajQJvL\$W\~mL_sS\/4h\:x\*\[ZN\=KLs\&L5zX\/\/\>it\,o\:aU\(\;Z\>pW\&T7oP\'2K\^E\:x9\'c\[\%z\-\,64JQ5AeH_G\#KijUKghQw\^\\vea3a\?kka_G\$8\#\`\*kynsxzBLru\'\]k_\[7FrVx\}\^\=\$blx\>s\-N\%j\;D\*aZDnsw\:YKZ\%Q\.Kne9\#hP\?\+b3\(SOvL\,\^\;\&u5\@\?5C5Bhb\=m\-vEh_L15Jl\]U\)0RP6\{q\%L\^_z5E\'Dw6X\b|IDM
Memory allocation (code space): 826
------------------------------------------------------------------
  0 822 Bra 0
  3     8J$WE<.rX+ix[d1b!H#?vV0vrK:ZH1=2M>iV;?aPhFB<*vW@QW@sO9}cfZA-i'w%hKd6gt1UJP,15_#QY$M^Mss_U/]&LK9[5vQub^w[KDD<EjmhUZ?.akp2dF>qmj;2}YWFdYx.Ap]hjCPTP(n28k+3;o&WXqs/gOXdr$:r'do0;b4c(f_Gr="\4)[01T7ajQJvL$W~mL_sS/4h:x*[ZN=KLs&L5zX//>it,o:aU(;Z>pW&T7oP'2K^E:x9'c[%z-,64JQ5AeH_G#KijUKghQw^\vea3a?kka_G$8#`*kynsxzBLru']k_[7FrVx}^=$blx>s-N%j;D*aZDnsw:YKZ%Q.Kne9#hP?+b3(SOvL,^;&u5@?5C5Bhb=m-vEh_L15Jl]U)0RP6{q%L^_z5E'Dw6X
821     \b
822 822 Ket
825     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = '8'
Need char = 'X'

|\$\<\.X\+ix\[d1b\!H\#\?vV0vrK\:ZH1\=2M\>iV\;\?aPhFB\<\*vW\@QW\@sO9\}cfZA\-i\'w\%hKd6gt1UJP\,15_\#QY\$M\^Mss_U\/\]\&LK9\[5vQub\^w\[KDD\<EjmhUZ\?\.akp2dF\>qmj\;2\}YWFdYx\.Ap\]hjCPTP\(n28k\+3\;o\&WXqs\/gOXdr\$\:r\'do0\;b4c\(f_Gr\=\"\\4\)\[01T7ajQJvL\$W\~mL_sS\/4h\:x\*\[ZN\=KLs\&L5zX\/\/\>it\,o\:aU\(\;Z\>pW\&T7oP\'2K\^E\:x9\'c\[\%z\-\,64JQ5AeH_G\#KijUKghQw\^\\vea3a\?kka_G\$8\#\`\*kynsxzBLru\'\]k_\[7FrVx\}\^\=\$blx\>s\-N\%j\;D\*aZDnsw\:YKZ\%Q\.Kne9\#hP\?\+b3\(SOvL\,\^\;\&u5\@\?5C5Bhb\=m\-vEh_L15Jl\]U\)0RP6\{q\%L\^_z5E\'Dw6X\b|IDM
Memory allocation (code space): 816
------------------------------------------------------------------
  0 812 Bra 0
  3     $<.X+ix[d1b!H#?vV0vrK:ZH1=2M>iV;?aPhFB<*vW@QW@sO9}cfZA-i'w%hKd6gt1UJP,15_#QY$M^Mss_U/]&LK9[5vQub^w[KDD<EjmhUZ?.akp2dF>qmj;2}YWFdYx.Ap]hjCPTP(n28k+3;o&WXqs/gOXdr$:r'do0;b4c(f_Gr="\4)[01T7ajQJvL$W~mL_sS/4h:x*[ZN=KLs&L5zX//>it,o:aU(;Z>pW&T7oP'2K^E:x9'c[%z-,64JQ5AeH_G#KijUKghQw^\vea3a?kka_G$8#`*kynsxzBLru']k_[7FrVx}^=$blx>s-N%j;D*aZDnsw:YKZ%Q.Kne9#hP?+b3(SOvL,^;&u5@?5C5Bhb=m-vEh_L15Jl]U)0RP6{q%L^_z5E'Dw6X
811     \b
812 812 Ket
815     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = '$'
Need char = 'X'

/(.*)\d+\1/I
Capturing subpattern count = 1
Max back reference = 1
Partial matching not supported
No options
No first char
No need char

/(.*)\d+/I
Capturing subpattern count = 1
Partial matching not supported
No options
First char at start or follows newline
No need char
    
/(.*)\d+\1/Is
Capturing subpattern count = 1
Max back reference = 1
Partial matching not supported
Options: dotall
No first char
No need char

/(.*)\d+/Is
Capturing subpattern count = 1
Partial matching not supported
Options: anchored dotall
No first char
No need char

/(.*(xyz))\d+\2/I
Capturing subpattern count = 2
Max back reference = 2
Partial matching not supported
No options
First char at start or follows newline
Need char = 'z'

/((.*))\d+\1/I
Capturing subpattern count = 2
Max back reference = 1
Partial matching not supported
No options
No first char
No need char
    abc123bc
 0: bc123bc
 1: bc
 2: bc
    
/a[b]/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b'

/(?=a).*/I
Capturing subpattern count = 0
Partial matching not supported
No options
First char = 'a'
No need char

/(?=abc).xyz/IiI
Capturing subpattern count = 0
Options: caseless
First char = 'a' (caseless)
Need char = 'z' (caseless)

/(?=abc)(?i).xyz/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'z' (caseless)

/(?=a)(?=b)/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char

/(?=.)a/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char

/((?=abcda)a)/I
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'a'

/((?=abcda)ab)/I
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'b'

/()a/I
Capturing subpattern count = 1
No options
No first char
Need char = 'a'

/(?(1)ab|ac)/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char

/(?(1)abz|acz)/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'z'

/(?(1)abz)/I
Capturing subpattern count = 0
No options
No first char
No need char

/(?(1)abz)123/I
Capturing subpattern count = 0
No options
No first char
Need char = '3'

/(a)+/I
Capturing subpattern count = 1
No options
First char = 'a'
No need char

/(a){2,3}/I
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'a'

/(a)*/I
Capturing subpattern count = 1
No options
No first char
No need char

/[a]/I
Capturing subpattern count = 0
No options
First char = 'a'
No need char

/[ab]/I
Capturing subpattern count = 0
No options
No first char
No need char

/[ab]/IS
Capturing subpattern count = 0
No options
No first char
No need char
Starting byte set: a b 

/[^a]/I
Capturing subpattern count = 0
No options
No first char
No need char

/\d456/I
Capturing subpattern count = 0
No options
No first char
Need char = '6'

/\d456/IS
Capturing subpattern count = 0
No options
No first char
Need char = '6'
Starting byte set: 0 1 2 3 4 5 6 7 8 9 

/a^b/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b'

/^a/Im
Capturing subpattern count = 0
Options: multiline
First char at start or follows newline
Need char = 'a'
  abcde
 0: a
  xy\nabc 
 0: a
  *** Failers 
No match
  xyabc 
No match

/c|abc/I
Capturing subpattern count = 0
No options
No first char
Need char = 'c'

/(?i)[ab]/IS
Capturing subpattern count = 0
Options: caseless
No first char
No need char
Starting byte set: A B a b 

/[ab](?i)cd/IS
Capturing subpattern count = 0
No options
No first char
Need char = 'd' (caseless)
Starting byte set: a b 

/abc(?C)def/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'f'
    abcdef
--->abcdef
  0 ^  ^       d
 0: abcdef
    1234abcdef 
--->1234abcdef
  0     ^  ^       d
 0: abcdef
    *** Failers
No match
    abcxyz
No match
    abcxyzf   
--->abcxyzf
  0 ^  ^        d
No match

/abc(?C)de(?C1)f/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'f'
    123abcdef
--->123abcdef
  0    ^  ^       d
  1    ^    ^     f
 0: abcdef
    
/(?C1)\dabc(?C2)def/I 
Capturing subpattern count = 0
No options
No first char
Need char = 'f'
    1234abcdef
--->1234abcdef
  1 ^              \d
  1  ^             \d
  1   ^            \d
  1    ^           \d
  2    ^   ^       d
 0: 4abcdef
    *** Failers
No match
    abcdef 
--->abcdef
  1 ^          \d
  1  ^         \d
  1   ^        \d
  1    ^       \d
  1     ^      \d
  1      ^     \d
No match
    
/(?C255)ab/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'b'

/(?C256)ab/I
Failed: number after (?C is > 255 at offset 6

/(?Cab)xx/I 
Failed: closing ) for (?C expected at offset 3

/(?C12vr)x/I
Failed: closing ) for (?C expected at offset 5

/abc(?C)def/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'f'
    *** Failers
No match
    \x83\x0\x61bcdef
--->\x83\x00abcdef
  0         ^  ^       d
 0: abcdef

/(abc)(?C)de(?C1)f/I
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'f'
    123abcdef
--->123abcdef
  0    ^  ^       d
  1    ^    ^     f
 0: abcdef
 1: abc
    123abcdef\C+ 
Callout 0: last capture = 1
 0: <unset>
 1: abc
--->123abcdef
       ^  ^       d
Callout 1: last capture = 1
 0: <unset>
 1: abc
--->123abcdef
       ^    ^     f
 0: abcdef
 1: abc
    123abcdef\C- 
 0: abcdef
 1: abc
    *** Failers
No match
    123abcdef\C!1 
--->123abcdef
  0    ^  ^       d
  1    ^    ^     f
No match
    
/(?C0)(abc(?C1))*/I
Capturing subpattern count = 1
No options
No first char
No need char
    abcabcabc
--->abcabcabc
  0 ^             (abc(?C1))*
  1 ^  ^          )
  1 ^     ^       )
  1 ^        ^    )
 0: abcabcabc
 1: abc
    abcabc\C!1!3   
--->abcabc
  0 ^          (abc(?C1))*
  1 ^  ^       )
  1 ^     ^    )
 0: abcabc
 1: abc
    *** Failers
--->*** Failers
  0 ^               (abc(?C1))*
 0: 
    abcabcabc\C!1!3   
--->abcabcabc
  0 ^             (abc(?C1))*
  1 ^  ^          )
  1 ^     ^       )
  1 ^        ^    )
 0: abcabc
 1: abc

/(\d{3}(?C))*/I
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
    123\C+
Callout 0: last capture = -1
 0: <unset>
--->123
    ^  ^    )
 0: 123
 1: 123
    123456\C+
Callout 0: last capture = -1
 0: <unset>
--->123456
    ^  ^       )
Callout 0: last capture = 1
 0: <unset>
 1: 123
--->123456
    ^     ^    )
 0: 123456
 1: 456
    123456789\C+  
Callout 0: last capture = -1
 0: <unset>
--->123456789
    ^  ^          )
Callout 0: last capture = 1
 0: <unset>
 1: 123
--->123456789
    ^     ^       )
Callout 0: last capture = 1
 0: <unset>
 1: 456
--->123456789
    ^        ^    )
 0: 123456789
 1: 789

/((xyz)(?C)p|(?C1)xyzabc)/I
Capturing subpattern count = 2
No options
First char = 'x'
No need char
    xyzabc\C+
Callout 0: last capture = 2
 0: <unset>
 1: <unset>
 2: xyz
--->xyzabc
    ^  ^       p
Callout 1: last capture = -1
 0: <unset>
--->xyzabc
    ^          x
 0: xyzabc
 1: xyzabc

/(X)((xyz)(?C)p|(?C1)xyzabc)/I
Capturing subpattern count = 3
No options
First char = 'X'
Need char = 'x'
    Xxyzabc\C+
Callout 0: last capture = 3
 0: <unset>
 1: X
 2: <unset>
 3: xyz
--->Xxyzabc
    ^   ^       p
Callout 1: last capture = 1
 0: <unset>
 1: X
--->Xxyzabc
    ^^          x
 0: Xxyzabc
 1: X
 2: xyzabc

/(?=(abc))(?C)abcdef/I
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'f'
    abcdef\C+
Callout 0: last capture = 1
 0: <unset>
 1: abc
--->abcdef
    ^          a
 0: abcdef
 1: abc
    
/(?!(abc)(?C1)d)(?C2)abcxyz/I
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'z'
    abcxyz\C+ 
Callout 1: last capture = 1
 0: <unset>
 1: abc
--->abcxyz
    ^  ^       d
Callout 2: last capture = -1
 0: <unset>
--->abcxyz
    ^          a
 0: abcxyz

/(?<=(abc)(?C))xyz/I
Capturing subpattern count = 1
No options
First char = 'x'
Need char = 'z'
   abcxyz\C+
Callout 0: last capture = 1
 0: <unset>
 1: abc
--->abcxyz
       ^       )
 0: xyz
 1: abc
   
/a(b+)(c*)(?C1)/I
Capturing subpattern count = 2
Partial matching not supported
No options
First char = 'a'
Need char = 'b'
    abbbbbccc\C*1
--->abbbbbccc
  1 ^        ^    
Callout data = 1
  1 ^       ^     
Callout data = 1
  1 ^      ^      
Callout data = 1
  1 ^     ^       
Callout data = 1
  1 ^    ^        
Callout data = 1
  1 ^   ^         
Callout data = 1
  1 ^  ^          
Callout data = 1
  1 ^ ^           
Callout data = 1
No match

/a(b+?)(c*?)(?C1)/I
Capturing subpattern count = 2
Partial matching not supported
No options
First char = 'a'
Need char = 'b'
    abbbbbccc\C*1
--->abbbbbccc
  1 ^ ^           
Callout data = 1
  1 ^  ^          
Callout data = 1
  1 ^   ^         
Callout data = 1
  1 ^    ^        
Callout data = 1
  1 ^     ^       
Callout data = 1
  1 ^      ^      
Callout data = 1
  1 ^       ^     
Callout data = 1
  1 ^        ^    
Callout data = 1
No match
   
/(?C)abc/I 
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'c'

/(?C)^abc/I
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/(?C)a|b/IS
Capturing subpattern count = 0
No options
No first char
No need char
Starting byte set: a b 

/(?R)/I
Failed: recursive call could loop indefinitely at offset 3

/(a|(?R))/I
Failed: recursive call could loop indefinitely at offset 6

/(ab|(bc|(de|(?R))))/I
Failed: recursive call could loop indefinitely at offset 15

/x(ab|(bc|(de|(?R))))/I
Capturing subpattern count = 3
No options
First char = 'x'
No need char
    xab
 0: xab
 1: ab
    xbc
 0: xbc
 1: bc
 2: bc
    xde
 0: xde
 1: de
 2: de
 3: de
    xxab
 0: xxab
 1: xab
 2: xab
 3: xab
    xxxab
 0: xxxab
 1: xxab
 2: xxab
 3: xxab
    *** Failers
No match
    xyab   
No match

/(ab|(bc|(de|(?1))))/I
Failed: recursive call could loop indefinitely at offset 15

/x(ab|(bc|(de|(?1)x)x)x)/I
Failed: recursive call could loop indefinitely at offset 16

/^([^()]|\((?1)*\))*$/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char
    abc
 0: abc
 1: c
    a(b)c
 0: a(b)c
 1: c
    a(b(c))d  
 0: a(b(c))d
 1: d
    *** Failers)
No match
    a(b(c)d  
No match

/^>abc>([^()]|\((?1)*\))*<xyz<$/I
Capturing subpattern count = 1
Options: anchored
No first char
Need char = '<'
   >abc>123<xyz<
 0: >abc>123<xyz<
 1: 3
   >abc>1(2)3<xyz<
 0: >abc>1(2)3<xyz<
 1: 3
   >abc>(1(2)3)<xyz<
 0: >abc>(1(2)3)<xyz<
 1: (1(2)3)

/(a(?1)b)/D
------------------------------------------------------------------
  0  24 Bra 0
  3  18 Bra 1
  8     a
 10   6 Once
 13   3 Recurse
 16   6 Ket
 19     b
 21  18 Ket
 24  24 Ket
 27     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'b'

/(a(?1)+b)/D
------------------------------------------------------------------
  0  24 Bra 0
  3  18 Bra 1
  8     a
 10   6 Once
 13   3 Recurse
 16   6 KetRmax
 19     b
 21  18 Ket
 24  24 Ket
 27     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'b'

/^\W*(?:((.)\W*(?1)\W*\2|)|((.)\W*(?3)\W*\4|\W*.\W*))\W*$/Ii
Capturing subpattern count = 4
Max back reference = 4
Partial matching not supported
Options: anchored caseless
No first char
No need char
    1221
 0: 1221
 1: 1221
 2: 1
    Satan, oscillate my metallic sonatas!
 0: Satan, oscillate my metallic sonatas!
 1: <unset>
 2: <unset>
 3: Satan, oscillate my metallic sonatas
 4: S
    A man, a plan, a canal: Panama!
 0: A man, a plan, a canal: Panama!
 1: <unset>
 2: <unset>
 3: A man, a plan, a canal: Panama
 4: A
    Able was I ere I saw Elba. 
 0: Able was I ere I saw Elba.
 1: <unset>
 2: <unset>
 3: Able was I ere I saw Elba
 4: A
    *** Failers
No match
    The quick brown fox  
No match
    
/^(\d+|\((?1)([+*-])(?1)\)|-(?1))$/I
Capturing subpattern count = 2
Partial matching not supported
Options: anchored
No first char
No need char
    12
 0: 12
 1: 12
    (((2+2)*-3)-7)
 0: (((2+2)*-3)-7)
 1: (((2+2)*-3)-7)
 2: -
    -12
 0: -12
 1: -12
    *** Failers
No match
    ((2+2)*-3)-7)
No match
         
/^(x(y|(?1){2})z)/I
Capturing subpattern count = 2
Options: anchored
No first char
No need char
    xyz
 0: xyz
 1: xyz
 2: y
    xxyzxyzz 
 0: xxyzxyzz
 1: xxyzxyzz
 2: xyzxyz
    *** Failers
No match
    xxyzz
No match
    xxyzxyzxyzz   
No match

/((< (?: (?(R) \d++  | [^<>]*+) | (?2)) * >))/Ix
Capturing subpattern count = 2
Partial matching not supported
Options: extended
First char = '<'
Need char = '>'
    <>
 0: <>
 1: <>
 2: <>
    <abcd>
 0: <abcd>
 1: <abcd>
 2: <abcd>
    <abc <123> hij>
 0: <abc <123> hij>
 1: <abc <123> hij>
 2: <abc <123> hij>
    <abc <def> hij>
 0: <def>
 1: <def>
 2: <def>
    <abc<>def> 
 0: <abc<>def>
 1: <abc<>def>
 2: <abc<>def>
    <abc<>      
 0: <>
 1: <>
 2: <>
    *** Failers
No match
    <abc
No match

/(?1)/I
Failed: reference to non-existent subpattern at offset 3

/((?2)(abc)/I
Failed: missing ) at offset 10

/^(abc)def(?1)/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char
    abcdefabc
 0: abcdefabc
 1: abc

/^(a|b|c)=(?1)+/I
Capturing subpattern count = 1
Options: anchored
No first char
No need char
    a=a
 0: a=a
 1: a
    a=b
 0: a=b
 1: a
    a=bc  
 0: a=bc
 1: a

/^(a|b|c)=((?1))+/I
Capturing subpattern count = 2
Options: anchored
No first char
No need char
    a=a
 0: a=a
 1: a
 2: a
    a=b
 0: a=b
 1: a
 2: b
    a=bc  
 0: a=bc
 1: a
 2: c

/a(?P<name1>b|c)d(?P<longername2>e)/D
------------------------------------------------------------------
  0  32 Bra 0
  3     a
  5   7 Bra 1
 10     b
 12   5 Alt
 15     c
 17  12 Ket
 20     d
 22   7 Bra 2
 27     e
 29   7 Ket
 32  32 Ket
 35     End
------------------------------------------------------------------
Capturing subpattern count = 2
Named capturing subpatterns:
  longername2   2
  name1         1
No options
First char = 'a'
Need char = 'e'
    abde
 0: abde
 1: b
 2: e
    acde 
 0: acde
 1: c
 2: e

/(?:a(?P<c>c(?P<d>d)))(?P<a>a)/D
------------------------------------------------------------------
  0  41 Bra 0
  3  25 Bra 0
  6     a
  8  17 Bra 1
 13     c
 15   7 Bra 2
 20     d
 22   7 Ket
 25  17 Ket
 28  25 Ket
 31   7 Bra 3
 36     a
 38   7 Ket
 41  41 Ket
 44     End
------------------------------------------------------------------
Capturing subpattern count = 3
Named capturing subpatterns:
  a   3
  c   1
  d   2
No options
First char = 'a'
Need char = 'a'

/(?P<a>a)...(?P=a)bbb(?P>a)d/D
------------------------------------------------------------------
  0  36 Bra 0
  3   7 Bra 1
  8     a
 10   7 Ket
 13     Any
 14     Any
 15     Any
 16     \1
 19     bbb
 25   6 Once
 28   3 Recurse
 31   6 Ket
 34     d
 36  36 Ket
 39     End
------------------------------------------------------------------
Capturing subpattern count = 1
Max back reference = 1
Named capturing subpatterns:
  a   1
No options
First char = 'a'
Need char = 'd'

/^\W*(?:(?P<one>(?P<two>.)\W*(?P>one)\W*(?P=two)|)|(?P<three>(?P<four>.)\W*(?P>three)\W*(?P=four)|\W*.\W*))\W*$/Ii
Capturing subpattern count = 4
Max back reference = 4
Named capturing subpatterns:
  four    4
  one     1
  three   3
  two     2
Partial matching not supported
Options: anchored caseless
No first char
No need char
    1221
 0: 1221
 1: 1221
 2: 1
    Satan, oscillate my metallic sonatas!
 0: Satan, oscillate my metallic sonatas!
 1: <unset>
 2: <unset>
 3: Satan, oscillate my metallic sonatas
 4: S
    A man, a plan, a canal: Panama!
 0: A man, a plan, a canal: Panama!
 1: <unset>
 2: <unset>
 3: A man, a plan, a canal: Panama
 4: A
    Able was I ere I saw Elba. 
 0: Able was I ere I saw Elba.
 1: <unset>
 2: <unset>
 3: Able was I ere I saw Elba
 4: A
    *** Failers
No match
    The quick brown fox  
No match
    
/((?(R)a|b))\1(?1)?/I
Capturing subpattern count = 1
Max back reference = 1
No options
No first char
No need char
  bb
 0: bb
 1: b
  bbaa 
 0: bba
 1: b

/(.*)a/Is
Capturing subpattern count = 1
Partial matching not supported
Options: anchored dotall
No first char
Need char = 'a'

/(.*)a\1/Is
Capturing subpattern count = 1
Max back reference = 1
Partial matching not supported
Options: dotall
No first char
Need char = 'a'

/(.*)a(b)\2/Is
Capturing subpattern count = 2
Max back reference = 2
Partial matching not supported
Options: anchored dotall
No first char
Need char = 'b'

/((.*)a|(.*)b)z/Is
Capturing subpattern count = 3
Partial matching not supported
Options: anchored dotall
No first char
Need char = 'z'

/((.*)a|(.*)b)z\1/Is
Capturing subpattern count = 3
Max back reference = 1
Partial matching not supported
Options: dotall
No first char
Need char = 'z'

/((.*)a|(.*)b)z\2/Is
Capturing subpattern count = 3
Max back reference = 2
Partial matching not supported
Options: dotall
No first char
Need char = 'z'

/((.*)a|(.*)b)z\3/Is
Capturing subpattern count = 3
Max back reference = 3
Partial matching not supported
Options: dotall
No first char
Need char = 'z'

/((.*)a|^(.*)b)z\3/Is
Capturing subpattern count = 3
Max back reference = 3
Partial matching not supported
Options: anchored dotall
No first char
Need char = 'z'

/(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)a/Is
Capturing subpattern count = 31
Partial matching not supported
Options: anchored dotall
No first char
No need char

/(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)a\31/Is
Capturing subpattern count = 31
Max back reference = 31
Partial matching not supported
Options: dotall
No first char
No need char

/(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)|(.*)a\32/Is
Capturing subpattern count = 32
Max back reference = 32
Partial matching not supported
Options: dotall
No first char
No need char

/(a)(bc)/IND
------------------------------------------------------------------
  0  21 Bra 0
  3   5 Bra 0
  6     a
  8   5 Ket
 11   7 Bra 0
 14     bc
 18   7 Ket
 21  21 Ket
 24     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options: no_auto_capture
First char = 'a'
Need char = 'c'
  abc
 0: abc

/(?P<one>a)(bc)/IND
------------------------------------------------------------------
  0  23 Bra 0
  3   7 Bra 1
  8     a
 10   7 Ket
 13   7 Bra 0
 16     bc
 20   7 Ket
 23  23 Ket
 26     End
------------------------------------------------------------------
Capturing subpattern count = 1
Named capturing subpatterns:
  one   1
Options: no_auto_capture
First char = 'a'
Need char = 'c'
  abc
 0: abc
 1: a

/(a)(?P<named>bc)/IND
------------------------------------------------------------------
  0  23 Bra 0
  3   5 Bra 0
  6     a
  8   5 Ket
 11   9 Bra 1
 16     bc
 20   9 Ket
 23  23 Ket
 26     End
------------------------------------------------------------------
Capturing subpattern count = 1
Named capturing subpatterns:
  named   1
Options: no_auto_capture
First char = 'a'
Need char = 'c'

/(a+)*zz/I
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
Need char = 'z'
  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazzbbbbbb\M
Minimum match() limit = 8
Minimum match() recursion limit = 6
 0: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazz
 1: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  aaaaaaaaaaaaaz\M
Minimum match() limit = 32768
Minimum match() recursion limit = 42
No match

/(aaa(?C1)bbb|ab)/I
Capturing subpattern count = 1
No options
First char = 'a'
Need char = 'b'
   aaabbb
--->aaabbb
  1 ^  ^       b
 0: aaabbb
 1: aaabbb
   aaabbb\C*0
--->aaabbb
  1 ^  ^       b
 0: aaabbb
 1: aaabbb
   aaabbb\C*1
--->aaabbb
  1 ^  ^       b
Callout data = 1
 0: ab
 1: ab
   aaabbb\C*-1
--->aaabbb
  1 ^  ^       b
Callout data = -1
No match

/ab(?P<one>cd)ef(?P<two>gh)/I
Capturing subpattern count = 2
Named capturing subpatterns:
  one   1
  two   2
No options
First char = 'a'
Need char = 'h'
    abcdefgh
 0: abcdefgh
 1: cd
 2: gh
    abcdefgh\C1\Gtwo
 0: abcdefgh
 1: cd
 2: gh
 1C cd (2)
  G gh (2) two
    abcdefgh\Cone\Ctwo
 0: abcdefgh
 1: cd
 2: gh
  C cd (2) one
  C gh (2) two
    abcdefgh\Cthree  
no parentheses with name "three"
 0: abcdefgh
 1: cd
 2: gh
copy substring three failed -7

/(?P<Tes>)(?P<Test>)/D
------------------------------------------------------------------
  0  19 Bra 0
  3   5 Bra 1
  8   5 Ket
 11   5 Bra 2
 16   5 Ket
 19  19 Ket
 22     End
------------------------------------------------------------------
Capturing subpattern count = 2
Named capturing subpatterns:
  Tes    1
  Test   2
No options
No first char
No need char

/(?P<Test>)(?P<Tes>)/D
------------------------------------------------------------------
  0  19 Bra 0
  3   5 Bra 1
  8   5 Ket
 11   5 Bra 2
 16   5 Ket
 19  19 Ket
 22     End
------------------------------------------------------------------
Capturing subpattern count = 2
Named capturing subpatterns:
  Tes    2
  Test   1
No options
No first char
No need char

/(?P<Z>zz)(?P<A>aa)/I
Capturing subpattern count = 2
Named capturing subpatterns:
  A   2
  Z   1
No options
First char = 'z'
Need char = 'a'
    zzaa\CZ
 0: zzaa
 1: zz
 2: aa
  C zz (2) Z
    zzaa\CA
 0: zzaa
 1: zz
 2: aa
  C aa (2) A

/(?P<x>eks)(?P<x>eccs)/I
Failed: two named subpatterns have the same name at offset 15

/(?P<abc>abc(?P<def>def)(?P<abc>xyz))/I
Failed: two named subpatterns have the same name at offset 30

"\[((?P<elem>\d+)(,(?P>elem))*)\]"I
Capturing subpattern count = 3
Named capturing subpatterns:
  elem   2
Partial matching not supported
No options
First char = '['
Need char = ']'
    [10,20,30,5,5,4,4,2,43,23,4234]
 0: [10,20,30,5,5,4,4,2,43,23,4234]
 1: 10,20,30,5,5,4,4,2,43,23,4234
 2: 10
 3: ,4234
    *** Failers
No match
    []  
No match

"\[((?P<elem>\d+)(,(?P>elem))*)?\]"I
Capturing subpattern count = 3
Named capturing subpatterns:
  elem   2
Partial matching not supported
No options
First char = '['
Need char = ']'
    [10,20,30,5,5,4,4,2,43,23,4234]
 0: [10,20,30,5,5,4,4,2,43,23,4234]
 1: 10,20,30,5,5,4,4,2,43,23,4234
 2: 10
 3: ,4234
    [] 
 0: []

/(a(b(?2)c))?/D
------------------------------------------------------------------
  0  35 Bra 0
  3     Brazero
  4  28 Bra 1
  9     a
 11  18 Bra 2
 16     b
 18   6 Once
 21  11 Recurse
 24   6 Ket
 27     c
 29  18 Ket
 32  28 Ket
 35  35 Ket
 38     End
------------------------------------------------------------------
Capturing subpattern count = 2
No options
No first char
No need char

/(a(b(?2)c))*/D
------------------------------------------------------------------
  0  35 Bra 0
  3     Brazero
  4  28 Bra 1
  9     a
 11  18 Bra 2
 16     b
 18   6 Once
 21  11 Recurse
 24   6 Ket
 27     c
 29  18 Ket
 32  28 KetRmax
 35  35 Ket
 38     End
------------------------------------------------------------------
Capturing subpattern count = 2
No options
No first char
No need char

/(a(b(?2)c)){0,2}/D
------------------------------------------------------------------
  0  73 Bra 0
  3     Brazero
  4  66 Bra 0
  7  28 Bra 1
 12     a
 14  18 Bra 2
 19     b
 21   6 Once
 24  14 Recurse
 27   6 Ket
 30     c
 32  18 Ket
 35  28 Ket
 38     Brazero
 39  28 Bra 1
 44     a
 46  18 Bra 2
 51     b
 53   6 Once
 56  14 Recurse
 59   6 Ket
 62     c
 64  18 Ket
 67  28 Ket
 70  66 Ket
 73  73 Ket
 76     End
------------------------------------------------------------------
Capturing subpattern count = 2
No options
No first char
No need char

/[ab]{1}+/D
------------------------------------------------------------------
  0  47 Bra 0
  3  41 Once
  6     [ab]{1,1}
 44  41 Ket
 47  47 Ket
 50     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
No first char
No need char

/((w\/|-|with)*(free|immediate)*.*?shipping\s*[!.-]*)/Ii
Capturing subpattern count = 3
Partial matching not supported
Options: caseless
No first char
Need char = 'g' (caseless)
     Baby Bjorn Active Carrier - With free SHIPPING!!
 0: Baby Bjorn Active Carrier - With free SHIPPING!!
 1: Baby Bjorn Active Carrier - With free SHIPPING!!

/((w\/|-|with)*(free|immediate)*.*?shipping\s*[!.-]*)/IiS
Capturing subpattern count = 3
Partial matching not supported
Options: caseless
No first char
Need char = 'g' (caseless)
Study returned NULL
     Baby Bjorn Active Carrier - With free SHIPPING!!
 0: Baby Bjorn Active Carrier - With free SHIPPING!!
 1: Baby Bjorn Active Carrier - With free SHIPPING!!
     
/a*.*b/ISD
------------------------------------------------------------------
  0   9 Bra 0
  3     a*
  5     Any*
  7     b
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'b'
Study returned NULL

/(a|b)*.?c/ISD 
------------------------------------------------------------------
  0  23 Bra 0
  3     Brazero
  4   7 Bra 1
  9     a
 11   5 Alt
 14     b
 16  12 KetRmax
 19     Any?
 21     c
 23  23 Ket
 26     End
------------------------------------------------------------------
Capturing subpattern count = 1
No options
No first char
Need char = 'c'
Study returned NULL

/abc(?C255)de(?C)f/D
------------------------------------------------------------------
  0  27 Bra 0
  3     abc
  9     Callout 255 10 1
 15     de
 19     Callout 0 16 1
 25     f
 27  27 Ket
 30     End
------------------------------------------------------------------
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'f'

/abcde/ICD
------------------------------------------------------------------
  0  49 Bra 0
  3     Callout 255 0 1
  9     a
 11     Callout 255 1 1
 17     b
 19     Callout 255 2 1
 25     c
 27     Callout 255 3 1
 33     d
 35     Callout 255 4 1
 41     e
 43     Callout 255 5 0
 49  49 Ket
 52     End
------------------------------------------------------------------
Capturing subpattern count = 0
Options:
First char = 'a'
Need char = 'e'
  abcde
--->abcde
 +0 ^         a
 +1 ^^        b
 +2 ^ ^       c
 +3 ^  ^      d
 +4 ^   ^     e
 +5 ^    ^    
 0: abcde
  abcdfe 
--->abcdfe
 +0 ^          a
 +1 ^^         b
 +2 ^ ^        c
 +3 ^  ^       d
 +4 ^   ^      e
No match
  
/a*b/ICD
------------------------------------------------------------------
  0  25 Bra 0
  3     Callout 255 0 2
  9     a*+
 11     Callout 255 2 1
 17     b
 19     Callout 255 3 0
 25  25 Ket
 28     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options:
No first char
Need char = 'b'
  ab
--->ab
 +0 ^      a*
 +2 ^^     b
 +3 ^ ^    
 0: ab
  aaaab
--->aaaab
 +0 ^         a*
 +2 ^   ^     b
 +3 ^    ^    
 0: aaaab
  aaaacb   
--->aaaacb
 +0 ^          a*
 +2 ^   ^      b
 +0  ^         a*
 +2  ^  ^      b
 +0   ^        a*
 +2   ^ ^      b
 +0    ^       a*
 +2    ^^      b
 +0     ^      a*
 +2     ^      b
 +0      ^     a*
 +2      ^     b
 +3      ^^    
 0: b

/a+b/ICD
------------------------------------------------------------------
  0  25 Bra 0
  3     Callout 255 0 2
  9     a++
 11     Callout 255 2 1
 17     b
 19     Callout 255 3 0
 25  25 Ket
 28     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options:
First char = 'a'
Need char = 'b'
  ab
--->ab
 +0 ^      a+
 +2 ^^     b
 +3 ^ ^    
 0: ab
  aaaab
--->aaaab
 +0 ^         a+
 +2 ^   ^     b
 +3 ^    ^    
 0: aaaab
  aaaacb   
--->aaaacb
 +0 ^          a+
 +2 ^   ^      b
 +0  ^         a+
 +2  ^  ^      b
 +0   ^        a+
 +2   ^ ^      b
 +0    ^       a+
 +2    ^^      b
No match

/(abc|def)x/ICD
------------------------------------------------------------------
  0  94 Bra 0
  3     Callout 255 0 9
  9  35 Bra 1
 14     Callout 255 1 1
 20     a
 22     Callout 255 2 1
 28     b
 30     Callout 255 3 1
 36     c
 38     Callout 255 4 0
 44  33 Alt
 47     Callout 255 5 1
 53     d
 55     Callout 255 6 1
 61     e
 63     Callout 255 7 1
 69     f
 71     Callout 255 8 0
 77  68 Ket
 80     Callout 255 9 1
 86     x
 88     Callout 255 10 0
 94  94 Ket
 97     End
------------------------------------------------------------------
Capturing subpattern count = 1
Options:
No first char
Need char = 'x'
  abcx
--->abcx
 +0 ^        (abc|def)
 +1 ^        a
 +2 ^^       b
 +3 ^ ^      c
 +4 ^  ^     |
 +9 ^  ^     x
+10 ^   ^    
 0: abcx
 1: abc
  defx
--->defx
 +0 ^        (abc|def)
 +1 ^        a
 +5 ^        d
 +6 ^^       e
 +7 ^ ^      f
 +8 ^  ^     )
 +9 ^  ^     x
+10 ^   ^    
 0: defx
 1: def
  abcdefzx
--->abcdefzx
 +0 ^            (abc|def)
 +1 ^            a
 +2 ^^           b
 +3 ^ ^          c
 +4 ^  ^         |
 +9 ^  ^         x
 +5 ^            d
 +0  ^           (abc|def)
 +1  ^           a
 +5  ^           d
 +0   ^          (abc|def)
 +1   ^          a
 +5   ^          d
 +0    ^         (abc|def)
 +1    ^         a
 +5    ^         d
 +6    ^^        e
 +7    ^ ^       f
 +8    ^  ^      )
 +9    ^  ^      x
 +0     ^        (abc|def)
 +1     ^        a
 +5     ^        d
 +0      ^       (abc|def)
 +1      ^       a
 +5      ^       d
 +0       ^      (abc|def)
 +1       ^      a
 +5       ^      d
 +0        ^     (abc|def)
 +1        ^     a
 +5        ^     d
No match

/(ab|cd){3,4}/IC
Capturing subpattern count = 1
Options:
No first char
No need char
  ababab
--->ababab
 +0 ^          (ab|cd){3,4}
 +1 ^          a
 +2 ^^         b
 +3 ^ ^        |
 +1 ^ ^        a
 +2 ^  ^       b
 +3 ^   ^      |
 +1 ^   ^      a
 +2 ^    ^     b
 +3 ^     ^    |
 +1 ^     ^    a
 +4 ^     ^    c
+12 ^     ^    
 0: ababab
 1: ab
  abcdabcd
--->abcdabcd
 +0 ^            (ab|cd){3,4}
 +1 ^            a
 +2 ^^           b
 +3 ^ ^          |
 +1 ^ ^          a
 +4 ^ ^          c
 +5 ^  ^         d
 +6 ^   ^        )
 +1 ^   ^        a
 +2 ^    ^       b
 +3 ^     ^      |
 +1 ^     ^      a
 +4 ^     ^      c
 +5 ^      ^     d
 +6 ^       ^    )
+12 ^       ^    
 0: abcdabcd
 1: cd
  abcdcdcdcdcd  
--->abcdcdcdcdcd
 +0 ^                (ab|cd){3,4}
 +1 ^                a
 +2 ^^               b
 +3 ^ ^              |
 +1 ^ ^              a
 +4 ^ ^              c
 +5 ^  ^             d
 +6 ^   ^            )
 +1 ^   ^            a
 +4 ^   ^            c
 +5 ^    ^           d
 +6 ^     ^          )
 +1 ^     ^          a
 +4 ^     ^          c
 +5 ^      ^         d
 +6 ^       ^        )
+12 ^       ^        
 0: abcdcdcd
 1: cd

/([ab]{,4}c|xy)/ICD
------------------------------------------------------------------
  0 133 Bra 0
  3     Callout 255 0 14
  9  90 Bra 1
 14     Callout 255 1 4
 20     [ab]
 53     Callout 255 5 1
 59     {
 61     Callout 255 6 1
 67     ,
 69     Callout 255 7 1
 75     4
 77     Callout 255 8 1
 83     }
 85     Callout 255 9 1
 91     c
 93     Callout 255 10 0
 99  25 Alt
102     Callout 255 11 1
108     x
110     Callout 255 12 1
116     y
118     Callout 255 13 0
124 115 Ket
127     Callout 255 14 0
133 133 Ket
136     End
------------------------------------------------------------------
Capturing subpattern count = 1
Options:
No first char
No need char
    Note: that { does NOT introduce a quantifier
--->Note: that { does NOT introduce a quantifier
 +0 ^                                                ([ab]{,4}c|xy)
 +1 ^                                                [ab]
+11 ^                                                x
 +0  ^                                               ([ab]{,4}c|xy)
 +1  ^                                               [ab]
+11  ^                                               x
 +0   ^                                              ([ab]{,4}c|xy)
 +1   ^                                              [ab]
+11   ^                                              x
 +0    ^                                             ([ab]{,4}c|xy)
 +1    ^                                             [ab]
+11    ^                                             x
 +0     ^                                            ([ab]{,4}c|xy)
 +1     ^                                            [ab]
+11     ^                                            x
 +0      ^                                           ([ab]{,4}c|xy)
 +1      ^                                           [ab]
+11      ^                                           x
 +0       ^                                          ([ab]{,4}c|xy)
 +1       ^                                          [ab]
+11       ^                                          x
 +0        ^                                         ([ab]{,4}c|xy)
 +1        ^                                         [ab]
+11        ^                                         x
 +0         ^                                        ([ab]{,4}c|xy)
 +1         ^                                        [ab]
 +5         ^^                                       {
+11         ^                                        x
 +0          ^                                       ([ab]{,4}c|xy)
 +1          ^                                       [ab]
+11          ^                                       x
 +0           ^                                      ([ab]{,4}c|xy)
 +1           ^                                      [ab]
+11           ^                                      x
 +0            ^                                     ([ab]{,4}c|xy)
 +1            ^                                     [ab]
+11            ^                                     x
 +0             ^                                    ([ab]{,4}c|xy)
 +1             ^                                    [ab]
+11             ^                                    x
 +0              ^                                   ([ab]{,4}c|xy)
 +1              ^                                   [ab]
+11              ^                                   x
 +0               ^                                  ([ab]{,4}c|xy)
 +1               ^                                  [ab]
+11               ^                                  x
 +0                ^                                 ([ab]{,4}c|xy)
 +1                ^                                 [ab]
+11                ^                                 x
 +0                 ^                                ([ab]{,4}c|xy)
 +1                 ^                                [ab]
+11                 ^                                x
 +0                  ^                               ([ab]{,4}c|xy)
 +1                  ^                               [ab]
+11                  ^                               x
 +0                   ^                              ([ab]{,4}c|xy)
 +1                   ^                              [ab]
+11                   ^                              x
 +0                    ^                             ([ab]{,4}c|xy)
 +1                    ^                             [ab]
+11                    ^                             x
 +0                     ^                            ([ab]{,4}c|xy)
 +1                     ^                            [ab]
+11                     ^                            x
 +0                      ^                           ([ab]{,4}c|xy)
 +1                      ^                           [ab]
+11                      ^                           x
 +0                       ^                          ([ab]{,4}c|xy)
 +1                       ^                          [ab]
+11                       ^                          x
 +0                        ^                         ([ab]{,4}c|xy)
 +1                        ^                         [ab]
+11                        ^                         x
 +0                         ^                        ([ab]{,4}c|xy)
 +1                         ^                        [ab]
+11                         ^                        x
 +0                          ^                       ([ab]{,4}c|xy)
 +1                          ^                       [ab]
+11                          ^                       x
 +0                           ^                      ([ab]{,4}c|xy)
 +1                           ^                      [ab]
+11                           ^                      x
 +0                            ^                     ([ab]{,4}c|xy)
 +1                            ^                     [ab]
+11                            ^                     x
 +0                             ^                    ([ab]{,4}c|xy)
 +1                             ^                    [ab]
+11                             ^                    x
 +0                              ^                   ([ab]{,4}c|xy)
 +1                              ^                   [ab]
+11                              ^                   x
 +0                               ^                  ([ab]{,4}c|xy)
 +1                               ^                  [ab]
+11                               ^                  x
 +0                                ^                 ([ab]{,4}c|xy)
 +1                                ^                 [ab]
+11                                ^                 x
 +0                                 ^                ([ab]{,4}c|xy)
 +1                                 ^                [ab]
 +5                                 ^^               {
+11                                 ^                x
 +0                                  ^               ([ab]{,4}c|xy)
 +1                                  ^               [ab]
+11                                  ^               x
 +0                                   ^              ([ab]{,4}c|xy)
 +1                                   ^              [ab]
+11                                   ^              x
 +0                                    ^             ([ab]{,4}c|xy)
 +1                                    ^             [ab]
+11                                    ^             x
 +0                                     ^            ([ab]{,4}c|xy)
 +1                                     ^            [ab]
 +5                                     ^^           {
+11                                     ^            x
 +0                                      ^           ([ab]{,4}c|xy)
 +1                                      ^           [ab]
+11                                      ^           x
 +0                                       ^          ([ab]{,4}c|xy)
 +1                                       ^          [ab]
+11                                       ^          x
 +0                                        ^         ([ab]{,4}c|xy)
 +1                                        ^         [ab]
+11                                        ^         x
 +0                                         ^        ([ab]{,4}c|xy)
 +1                                         ^        [ab]
+11                                         ^        x
 +0                                          ^       ([ab]{,4}c|xy)
 +1                                          ^       [ab]
+11                                          ^       x
 +0                                           ^      ([ab]{,4}c|xy)
 +1                                           ^      [ab]
+11                                           ^      x
 +0                                            ^     ([ab]{,4}c|xy)
 +1                                            ^     [ab]
+11                                            ^     x
 +0                                             ^    ([ab]{,4}c|xy)
 +1                                             ^    [ab]
+11                                             ^    x
No match

/([ab]{1,4}c|xy){4,5}?123/ICD
------------------------------------------------------------------
  0 495 Bra 0
  3     Callout 255 0 21
  9  63 Bra 1
 14     Callout 255 1 9
 20     [ab]{1,4}
 58     Callout 255 10 1
 64     c
 66     Callout 255 11 0
 72  25 Alt
 75     Callout 255 12 1
 81     x
 83     Callout 255 13 1
 89     y
 91     Callout 255 14 0
 97  88 Ket
100  63 Bra 1
105     Callout 255 1 9
111     [ab]{1,4}
149     Callout 255 10 1
155     c
157     Callout 255 11 0
163  25 Alt
166     Callout 255 12 1
172     x
174     Callout 255 13 1
180     y
182     Callout 255 14 0
188  88 Ket
191  63 Bra 1
196     Callout 255 1 9
202     [ab]{1,4}
240     Callout 255 10 1
246     c
248     Callout 255 11 0
254  25 Alt
257     Callout 255 12 1
263     x
265     Callout 255 13 1
271     y
273     Callout 255 14 0
279  88 Ket
282  63 Bra 1
287     Callout 255 1 9
293     [ab]{1,4}
331     Callout 255 10 1
337     c
339     Callout 255 11 0
345  25 Alt
348     Callout 255 12 1
354     x
356     Callout 255 13 1
362     y
364     Callout 255 14 0
370  88 Ket
373     Braminzero
374  63 Bra 1
379     Callout 255 1 9
385     [ab]{1,4}
423     Callout 255 10 1
429     c
431     Callout 255 11 0
437  25 Alt
440     Callout 255 12 1
446     x
448     Callout 255 13 1
454     y
456     Callout 255 14 0
462  88 Ket
465     Callout 255 21 1
471     1
473     Callout 255 22 1
479     2
481     Callout 255 23 1
487     3
489     Callout 255 24 0
495 495 Ket
498     End
------------------------------------------------------------------
Capturing subpattern count = 1
Partial matching not supported
Options:
No first char
Need char = '3'
    aacaacaacaacaac123
--->aacaacaacaacaac123
 +0 ^                      ([ab]{1,4}c|xy){4,5}?
 +1 ^                      [ab]{1,4}
+10 ^ ^                    c
+11 ^  ^                   |
 +1 ^  ^                   [ab]{1,4}
+10 ^    ^                 c
+11 ^     ^                |
 +1 ^     ^                [ab]{1,4}
+10 ^       ^              c
+11 ^        ^             |
 +1 ^        ^             [ab]{1,4}
+10 ^          ^           c
+11 ^           ^          |
+21 ^           ^          1
 +1 ^           ^          [ab]{1,4}
+10 ^             ^        c
+11 ^              ^       |
+21 ^              ^       1
+22 ^               ^      2
+23 ^                ^     3
+24 ^                 ^    
 0: aacaacaacaacaac123
 1: aac

/\b.*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
  ab cd\>1
 0:  cd
  
/\b.*/Is 
Capturing subpattern count = 0
Partial matching not supported
Options: dotall
No first char
No need char
  ab cd\>1
 0:  cd
  
/(?!.bcd).*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
  Xbcd12345 
 0: bcd12345

/abcde/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'e'
    ab\P
Partial match
    abc\P
Partial match
    abcd\P
Partial match
    abcde\P   
 0: abcde
    the quick brown abc\P
Partial match
    ** Failers\P
No match
    the quick brown abxyz fox\P
No match
    
"^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/(20)?\d\d$"I
Capturing subpattern count = 3
Options: anchored
No first char
Need char = '/'
    13/05/04\P
 0: 13/05/04
 1: 13
 2: 05
    13/5/2004\P
 0: 13/5/2004
 1: 13
 2: 5
 3: 20
    02/05/09\P 
 0: 02/05/09
 1: 02
 2: 05
    1\P
Partial match
    1/2\P
Partial match
    1/2/0\P
Partial match
    1/2/04\P    
 0: 1/2/04
 1: 1
 2: 2
    0\P
Partial match
    02/\P
Partial match
    02/0\P   
Partial match
    02/1\P
Partial match
    ** Failers\P
No match
    \P
No match
    123\P
No match
    33/4/04\P
No match
    3/13/04\P
No match
    0/1/2003\P
No match
    0/\P 
No match
    02/0/\P 
No match
    02/13\P  
No match

/0{0,2}ABC/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'C'
    
/\d{3,}ABC/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'C'
    
/\d*ABC/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'C'

/[abc]+DE/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = 'E'

/[abc]?123/I
Capturing subpattern count = 0
No options
No first char
Need char = '3'
    123\P
 0: 123
    a\P
Partial match
    b\P
Partial match
    c\P
Partial match
    c12\P
Partial match
    c123\P      
 0: c123

/^(?:\d){3,5}X/I
Capturing subpattern count = 0
Options: anchored
No first char
Need char = 'X'
    1\P
Partial match
    123\P
Partial match
    123X
 0: 123X
    1234\P
Partial match
    1234X
 0: 1234X
    12345\P
Partial match
    12345X      
 0: 12345X
    *** Failers 
No match
    1X 
No match
    123456\P 
No match

/abc/I>testsavedregex
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'c'
Compiled regex written to testsavedregex
<testsavedregex
Compiled regex loaded from testsavedregex
No study data
    abc
 0: abc
    ** Failers
No match
    bca
No match
    
/abc/IF>testsavedregex
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'c'
Compiled regex written to testsavedregex
<testsavedregex
Compiled regex (byte-inverted) loaded from testsavedregex
No study data
    abc
 0: abc
    ** Failers
No match
    bca
No match

/(a|b)/IS>testsavedregex
Capturing subpattern count = 1
No options
No first char
No need char
Starting byte set: a b 
Compiled regex written to testsavedregex
Study data written to testsavedregex
<testsavedregex
Compiled regex loaded from testsavedregex
Study data loaded from testsavedregex
    abc
 0: a
 1: a
    ** Failers
 0: a
 1: a
    def  
No match
    
/(a|b)/ISF>testsavedregex
Capturing subpattern count = 1
No options
No first char
No need char
Starting byte set: a b 
Compiled regex written to testsavedregex
Study data written to testsavedregex
<testsavedregex
Compiled regex (byte-inverted) loaded from testsavedregex
Study data loaded from testsavedregex
    abc
 0: a
 1: a
    ** Failers
 0: a
 1: a
    def  
No match
    
~<(\w+)/?>(.)*</(\1)>~smgI
Capturing subpattern count = 3
Max back reference = 1
Partial matching not supported
Options: multiline dotall
First char = '<'
Need char = '>'
    <!DOCTYPE seite SYSTEM "http://www.lco.lineas.de/xmlCms.dtd">\n<seite>\n<dokumenteninformation>\n<seitentitel>Partner der LCO</seitentitel>\n<sprache>de</sprache>\n<seitenbeschreibung>Partner der LINEAS Consulting\nGmbH</seitenbeschreibung>\n<schluesselworte>LINEAS Consulting GmbH Hamburg\nPartnerfirmen</schluesselworte>\n<revisit>30 days</revisit>\n<robots>index,follow</robots>\n<menueinformation>\n<aktiv>ja</aktiv>\n<menueposition>3</menueposition>\n<menuetext>Partner</menuetext>\n</menueinformation>\n<lastedited>\n<autor>LCO</autor>\n<firma>LINEAS Consulting</firma>\n<datum>15.10.2003</datum>\n</lastedited>\n</dokumenteninformation>\n<inhalt>\n\n<absatzueberschrift>Die Partnerfirmen der LINEAS Consulting\nGmbH</absatzueberschrift>\n\n<absatz><link ziel="http://www.ca.com/" zielfenster="_blank">\n<bild name="logo_ca.gif" rahmen="no"/></link> <link\nziel="http://www.ey.com/" zielfenster="_blank"><bild\nname="logo_euy.gif" rahmen="no"/></link>\n</absatz>\n\n<absatz><link ziel="http://www.cisco.de/" zielfenster="_blank">\n<bild name="logo_cisco.gif" rahmen="ja"/></link></absatz>\n\n<absatz><link ziel="http://www.atelion.de/"\nzielfenster="_blank"><bild\nname="logo_atelion.gif" rahmen="no"/></link>\n</absatz>\n\n<absatz><link ziel="http://www.line-information.de/"\nzielfenster="_blank">\n<bild name="logo_line_information.gif" rahmen="no"/></link>\n</absatz>\n\n<absatz><bild name="logo_aw.gif" rahmen="no"/></absatz>\n\n<absatz><link ziel="http://www.incognis.de/"\nzielfenster="_blank"><bild\nname="logo_incognis.gif" rahmen="no"/></link></absatz>\n\n<absatz><link ziel="http://www.addcraft.com/"\nzielfenster="_blank"><bild\nname="logo_addcraft.gif" rahmen="no"/></link></absatz>\n\n<absatz><link ziel="http://www.comendo.com/"\nzielfenster="_blank"><bild\nname="logo_comendo.gif" rahmen="no"/></link></absatz>\n\n</inhalt>\n</seite>
 0: <seite>\x0a<dokumenteninformation>\x0a<seitentitel>Partner der LCO</seitentitel>\x0a<sprache>de</sprache>\x0a<seitenbeschreibung>Partner der LINEAS Consulting\x0aGmbH</seitenbeschreibung>\x0a<schluesselworte>LINEAS Consulting GmbH Hamburg\x0aPartnerfirmen</schluesselworte>\x0a<revisit>30 days</revisit>\x0a<robots>index,follow</robots>\x0a<menueinformation>\x0a<aktiv>ja</aktiv>\x0a<menueposition>3</menueposition>\x0a<menuetext>Partner</menuetext>\x0a</menueinformation>\x0a<lastedited>\x0a<autor>LCO</autor>\x0a<firma>LINEAS Consulting</firma>\x0a<datum>15.10.2003</datum>\x0a</lastedited>\x0a</dokumenteninformation>\x0a<inhalt>\x0a\x0a<absatzueberschrift>Die Partnerfirmen der LINEAS Consulting\x0aGmbH</absatzueberschrift>\x0a\x0a<absatz><link ziel="http://www.ca.com/" zielfenster="_blank">\x0a<bild name="logo_ca.gif" rahmen="no"/></link> <link\x0aziel="http://www.ey.com/" zielfenster="_blank"><bild\x0aname="logo_euy.gif" rahmen="no"/></link>\x0a</absatz>\x0a\x0a<absatz><link ziel="http://www.cisco.de/" zielfenster="_blank">\x0a<bild name="logo_cisco.gif" rahmen="ja"/></link></absatz>\x0a\x0a<absatz><link ziel="http://www.atelion.de/"\x0azielfenster="_blank"><bild\x0aname="logo_atelion.gif" rahmen="no"/></link>\x0a</absatz>\x0a\x0a<absatz><link ziel="http://www.line-information.de/"\x0azielfenster="_blank">\x0a<bild name="logo_line_information.gif" rahmen="no"/></link>\x0a</absatz>\x0a\x0a<absatz><bild name="logo_aw.gif" rahmen="no"/></absatz>\x0a\x0a<absatz><link ziel="http://www.incognis.de/"\x0azielfenster="_blank"><bild\x0aname="logo_incognis.gif" rahmen="no"/></link></absatz>\x0a\x0a<absatz><link ziel="http://www.addcraft.com/"\x0azielfenster="_blank"><bild\x0aname="logo_addcraft.gif" rahmen="no"/></link></absatz>\x0a\x0a<absatz><link ziel="http://www.comendo.com/"\x0azielfenster="_blank"><bild\x0aname="logo_comendo.gif" rahmen="no"/></link></absatz>\x0a\x0a</inhalt>\x0a</seite>
 1: seite
 2: \x0a
 3: seite

/^a/IF
Capturing subpattern count = 0
Options: anchored
No first char
No need char

/line\nbreak/I
Capturing subpattern count = 0
No options
First char = 'l'
Need char = 'k'
    this is a line\nbreak
 0: line\x0abreak
    line one\nthis is a line\nbreak in the second line 
 0: line\x0abreak

/line\nbreak/If
Capturing subpattern count = 0
Options: firstline
First char = 'l'
Need char = 'k'
    this is a line\nbreak
 0: line\x0abreak
    ** Failers 
No match
    line one\nthis is a line\nbreak in the second line 
No match

/line\nbreak/Imf
Capturing subpattern count = 0
Options: multiline firstline
First char = 'l'
Need char = 'k'
    this is a line\nbreak
 0: line\x0abreak
    ** Failers 
No match
    line one\nthis is a line\nbreak in the second line 
No match

/ab.cd/IP
    ab-cd
 0: ab-cd
    ab=cd 
 0: ab=cd
    ** Failers
No match: POSIX code 17: match failed
    ab\ncd
No match: POSIX code 17: match failed

/ab.cd/IPs
    ab-cd
 0: ab-cd
    ab=cd 
 0: ab=cd
    ab\ncd
 0: ab\x0acd

/(?i)(?-i)AbCd/I
Capturing subpattern count = 0
No options
First char = 'A'
Need char = 'd'
    AbCd
 0: AbCd
    ** Failers
No match
    abcd  
No match
    
/a{11111111111111111111}/I
Failed: number too big in {} quantifier at offset 22

/(){64294967295}/I
Failed: number too big in {} quantifier at offset 14

/(){2,4294967295}/I
Failed: number too big in {} quantifier at offset 15

"(?i:a)(?i:b)(?i:c)(?i:d)(?i:e)(?i:f)(?i:g)(?i:h)(?i:i)(?i:j)(k)(?i:l)A\1B"I
Capturing subpattern count = 1
Max back reference = 1
No options
First char = 'a' (caseless)
Need char = 'B'
    abcdefghijklAkB
 0: abcdefghijklAkB
 1: k

"(?P<n0>a)(?P<n1>b)(?P<n2>c)(?P<n3>d)(?P<n4>e)(?P<n5>f)(?P<n6>g)(?P<n7>h)(?P<n8>i)(?P<n9>j)(?P<n10>k)(?P<n11>l)A\11B"I
Capturing subpattern count = 12
Max back reference = 11
Named capturing subpatterns:
  n0    1
  n1    2
  n10  11
  n11  12
  n2    3
  n3    4
  n4    5
  n5    6
  n6    7
  n7    8
  n8    9
  n9   10
No options
First char = 'a'
Need char = 'B'
    abcdefghijklAkB
 0: abcdefghijklAkB
 1: a
 2: b
 3: c
 4: d
 5: e
 6: f
 7: g
 8: h
 9: i
10: j
11: k
12: l

"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)A\11B"I
Capturing subpattern count = 12
Max back reference = 11
No options
First char = 'a'
Need char = 'B'
    abcdefghijklAkB
 0: abcdefghijklAkB
 1: a
 2: b
 3: c
 4: d
 5: e
 6: f
 7: g
 8: h
 9: i
10: j
11: k
12: l

"(?P<name0>a)(?P<name1>a)(?P<name2>a)(?P<name3>a)(?P<name4>a)(?P<name5>a)(?P<name6>a)(?P<name7>a)(?P<name8>a)(?P<name9>a)(?P<name10>a)(?P<name11>a)(?P<name12>a)(?P<name13>a)(?P<name14>a)(?P<name15>a)(?P<name16>a)(?P<name17>a)(?P<name18>a)(?P<name19>a)(?P<name20>a)(?P<name21>a)(?P<name22>a)(?P<name23>a)(?P<name24>a)(?P<name25>a)(?P<name26>a)(?P<name27>a)(?P<name28>a)(?P<name29>a)(?P<name30>a)(?P<name31>a)(?P<name32>a)(?P<name33>a)(?P<name34>a)(?P<name35>a)(?P<name36>a)(?P<name37>a)(?P<name38>a)(?P<name39>a)(?P<name40>a)(?P<name41>a)(?P<name42>a)(?P<name43>a)(?P<name44>a)(?P<name45>a)(?P<name46>a)(?P<name47>a)(?P<name48>a)(?P<name49>a)(?P<name50>a)(?P<name51>a)(?P<name52>a)(?P<name53>a)(?P<name54>a)(?P<name55>a)(?P<name56>a)(?P<name57>a)(?P<name58>a)(?P<name59>a)(?P<name60>a)(?P<name61>a)(?P<name62>a)(?P<name63>a)(?P<name64>a)(?P<name65>a)(?P<name66>a)(?P<name67>a)(?P<name68>a)(?P<name69>a)(?P<name70>a)(?P<name71>a)(?P<name72>a)(?P<name73>a)(?P<name74>a)(?P<name75>a)(?P<name76>a)(?P<name77>a)(?P<name78>a)(?P<name79>a)(?P<name80>a)(?P<name81>a)(?P<name82>a)(?P<name83>a)(?P<name84>a)(?P<name85>a)(?P<name86>a)(?P<name87>a)(?P<name88>a)(?P<name89>a)(?P<name90>a)(?P<name91>a)(?P<name92>a)(?P<name93>a)(?P<name94>a)(?P<name95>a)(?P<name96>a)(?P<name97>a)(?P<name98>a)(?P<name99>a)(?P<name100>a)"I
Capturing subpattern count = 101
Named capturing subpatterns:
  name0     1
  name1     2
  name10   11
  name100 101
  name11   12
  name12   13
  name13   14
  name14   15
  name15   16
  name16   17
  name17   18
  name18   19
  name19   20
  name2     3
  name20   21
  name21   22
  name22   23
  name23   24
  name24   25
  name25   26
  name26   27
  name27   28
  name28   29
  name29   30
  name3     4
  name30   31
  name31   32
  name32   33
  name33   34
  name34   35
  name35   36
  name36   37
  name37   38
  name38   39
  name39   40
  name4     5
  name40   41
  name41   42
  name42   43
  name43   44
  name44   45
  name45   46
  name46   47
  name47   48
  name48   49
  name49   50
  name5     6
  name50   51
  name51   52
  name52   53
  name53   54
  name54   55
  name55   56
  name56   57
  name57   58
  name58   59
  name59   60
  name6     7
  name60   61
  name61   62
  name62   63
  name63   64
  name64   65
  name65   66
  name66   67
  name67   68
  name68   69
  name69   70
  name7     8
  name70   71
  name71   72
  name72   73
  name73   74
  name74   75
  name75   76
  name76   77
  name77   78
  name78   79
  name79   80
  name8     9
  name80   81
  name81   82
  name82   83
  name83   84
  name84   85
  name85   86
  name86   87
  name87   88
  name88   89
  name89   90
  name9    10
  name90   91
  name91   92
  name92   93
  name93   94
  name94   95
  name95   96
  name96   97
  name97   98
  name98   99
  name99  100
No options
First char = 'a'
Need char = 'a'
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Matched, but too many substrings
 0: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 1: a
 2: a
 3: a
 4: a
 5: a
 6: a
 7: a
 8: a
 9: a
10: a
11: a
12: a
13: a
14: a

"(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)(a)"I
Capturing subpattern count = 101
No options
First char = 'a'
Need char = 'a'
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Matched, but too many substrings
 0: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 1: a
 2: a
 3: a
 4: a
 5: a
 6: a
 7: a
 8: a
 9: a
10: a
11: a
12: a
13: a
14: a

/[^()]*(?:\((?R)\)[^()]*)*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
    (this(and)that
 0: 
    (this(and)that) 
 0: (this(and)that)
    (this(and)that)stuff
 0: (this(and)that)stuff

/[^()]*(?:\((?>(?R))\)[^()]*)*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
    (this(and)that
 0: 
    (this(and)that) 
 0: (this(and)that)
    
/[^()]*(?:\((?R)\))*[^()]*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
    (this(and)that
 0: 
    (this(and)that) 
 0: (this(and)that)

/(?:\((?R)\))*[^()]*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
    (this(and)that
 0: 
    (this(and)that) 
 0: 
    ((this)) 
 0: ((this))

/(?:\((?R)\))|[^()]*/I
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
No need char
    (this(and)that
 0: 
    (this(and)that) 
 0: 
    (this)
 0: (this)
    ((this)) 
 0: ((this))
    
/a(b)c/IPN
    abc
Matched with REG_NOSUB
    
/a(?P<name>b)c/IPN
    abc  
Matched with REG_NOSUB
    
/\x{100}/I 
Failed: character value in \x{...} sequence is too large at offset 6

/\x{0000ff}/I
Capturing subpattern count = 0
No options
First char = 255
No need char

/^((?P<A>a1)|(?P<A>a2)b)/I
Failed: two named subpatterns have the same name at offset 17

/^((?P<A>a1)|(?P<A>a2)b)/IJ
Capturing subpattern count = 3
Named capturing subpatterns:
  A   2
  A   3
Options: anchored dupnames
No first char
No need char
    a1b\CA
 0: a1
 1: a1
 2: a1
  C a1 (2) A
    a2b\CA 
 0: a2b
 1: a2b
 2: <unset>
 3: a2
  C a2 (2) A
    ** Failers
No match
    a1b\CZ\CA 
no parentheses with name "Z"
 0: a1
 1: a1
 2: a1
copy substring Z failed -7
  C a1 (2) A
    
/^(?P<A>a)(?P<A>b)/IJ
Capturing subpattern count = 2
Named capturing subpatterns:
  A   1
  A   2
Options: anchored dupnames
No first char
No need char
    ab\CA
 0: ab
 1: a
 2: b
  C a (1) A
    
/^(?P<A>a)(?P<A>b)|cd/IJ
Capturing subpattern count = 2
Named capturing subpatterns:
  A   1
  A   2
Options: dupnames
No first char
No need char
    ab\CA
 0: ab
 1: a
 2: b
  C a (1) A
    cd\CA 
 0: cd
copy substring A failed -7
  
/^(?P<A>a)(?P<A>b)|cd(?P<A>ef)(?P<A>gh)/IJ
Capturing subpattern count = 4
Named capturing subpatterns:
  A   1
  A   2
  A   3
  A   4
Options: dupnames
No first char
No need char
    cdefgh\CA 
 0: cdefgh
 1: <unset>
 2: <unset>
 3: ef
 4: gh
  C ef (2) A
  
/^((?P<A>a1)|(?P<A>a2)b)/IJ
Capturing subpattern count = 3
Named capturing subpatterns:
  A   2
  A   3
Options: anchored dupnames
No first char
No need char
    a1b\GA
 0: a1
 1: a1
 2: a1
  G a1 (2) A
    a2b\GA 
 0: a2b
 1: a2b
 2: <unset>
 3: a2
  G a2 (2) A
    ** Failers
No match
    a1b\GZ\GA 
no parentheses with name "Z"
 0: a1
 1: a1
 2: a1
copy substring Z failed -7
  G a1 (2) A
    
/^(?P<A>a)(?P<A>b)/IJ
Capturing subpattern count = 2
Named capturing subpatterns:
  A   1
  A   2
Options: anchored dupnames
No first char
No need char
    ab\GA
 0: ab
 1: a
 2: b
  G a (1) A
    
/^(?P<A>a)(?P<A>b)|cd/IJ
Capturing subpattern count = 2
Named capturing subpatterns:
  A   1
  A   2
Options: dupnames
No first char
No need char
    ab\GA
 0: ab
 1: a
 2: b
  G a (1) A
    cd\GA 
 0: cd
copy substring A failed -7
  
/^(?P<A>a)(?P<A>b)|cd(?P<A>ef)(?P<A>gh)/IJ
Capturing subpattern count = 4
Named capturing subpatterns:
  A   1
  A   2
  A   3
  A   4
Options: dupnames
No first char
No need char
    cdefgh\GA 
 0: cdefgh
 1: <unset>
 2: <unset>
 3: ef
 4: gh
  G ef (2) A
  
/(?J)^((?P<A>a1)|(?P<A>a2)b)/I
Capturing subpattern count = 3
Named capturing subpatterns:
  A   2
  A   3
Options: anchored dupnames
No first char
No need char
    a1b\CA
 0: a1
 1: a1
 2: a1
  C a1 (2) A
    a2b\CA 
 0: a2b
 1: a2b
 2: <unset>
 3: a2
  C a2 (2) A
    
/^(?P<A>a) (?J:(?P<B>b)(?P<B>c)) (?P<A>d)/I
Failed: two named subpatterns have the same name at offset 37

/ In this next test, J is not set at the outer level; consequently it isn't
set in the pattern's options; consequently pcre_get_named_substring() produces 
a random value. /Ix
Capturing subpattern count = 1
Options: extended
First char = 'I'
Need char = 'e'

/^(?P<A>a) (?J:(?P<B>b)(?P<B>c)) (?P<C>d)/I
Capturing subpattern count = 4
Named capturing subpatterns:
  A   1
  B   2
  B   3
  C   4
Options: anchored
No first char
No need char
    a bc d\CA\CB\CC
 0: a bc d
 1: a
 2: b
 3: c
 4: d
  C a (1) A
  C b (1) B
  C d (1) C

/^(?P<A>a)?(?(A)a|b)/I
Capturing subpattern count = 1
Named capturing subpatterns:
  A   1
Options: anchored
No first char
No need char
    aabc
 0: aa
 1: a
    bc
 0: b
    ** Failers
No match
    abc   
No match

/(?:(?(ZZ)a|b)(?P<ZZ>X))+/I
Capturing subpattern count = 1
Named capturing subpatterns:
  ZZ   1
No options
No first char
Need char = 'X'
    bXaX
 0: bXaX
 1: X

/(?:(?(2y)a|b)(X))+/I
Failed: reference to non-existent subpattern at offset 9

/(?:(?(ZA)a|b)(?P<ZZ>X))+/I
Failed: reference to non-existent subpattern at offset 9

/(?:(?(ZZ)a|b)(?(ZZ)a|b)(?P<ZZ>X))+/I
Capturing subpattern count = 1
Named capturing subpatterns:
  ZZ   1
No options
No first char
Need char = 'X'
    bbXaaX
 0: bbXaaX
 1: X

/(?:(?(ZZ)a|\(b\))\\(?P<ZZ>X))+/I
Capturing subpattern count = 1
Named capturing subpatterns:
  ZZ   1
No options
No first char
Need char = 'X'
    (b)\\Xa\\X
 0: (b)\Xa\X
 1: X

/(?P<ABC/I
Failed: syntax error in subpattern name (missing terminator) at offset 7

/(?:(?(A)(?P=A)a|b)(?P<A>X|Y))+/I
Capturing subpattern count = 1
Max back reference = 1
Named capturing subpatterns:
  A   1
No options
No first char
No need char
    bXXaYYaY
 0: bXXaYYaY
 1: Y
    bXYaXXaX  
 0: bX
 1: X

/()()()()()()()()()(?:(?(A)(?P=A)a|b)(?P<A>X|Y))+/I
Capturing subpattern count = 10
Max back reference = 10
Named capturing subpatterns:
  A  10
No options
No first char
No need char
    bXXaYYaY
 0: bXXaYYaY
 1: 
 2: 
 3: 
 4: 
 5: 
 6: 
 7: 
 8: 
 9: 
10: Y

/\777/I
Failed: octal value is greater than \377 (not in UTF-8 mode) at offset 3

/\s*,\s*/IS
Capturing subpattern count = 0
Partial matching not supported
No options
No first char
Need char = ','
Starting byte set: \x09 \x0a \x0c \x0d \x20 , 
    \x0b,\x0b
 0: ,
    \x0c,\x0d 
 0: \x0c,\x0d

/^abc/Im
Capturing subpattern count = 0
Options: multiline
First char at start or follows newline
Need char = 'c'
    xyz\nabc
 0: abc
    xyz\nabc\<lf>
 0: abc
    xyz\r\nabc\<lf>
 0: abc
    xyz\rabc\<cr>
 0: abc
    xyz\r\nabc\<crlf>
 0: abc
    ** Failers 
No match
    xyz\nabc\<cr>
No match
    xyz\r\nabc\<cr>
No match
    xyz\nabc\<crlf>
No match
    xyz\rabc\<crlf>
No match
    xyz\rabc\<lf>
No match
    
/abc$/Im<lf>
Capturing subpattern count = 0
Options: multiline
Forced newline sequence: LF
First char = 'a'
Need char = 'c'
    xyzabc
 0: abc
    xyzabc\n 
 0: abc
    xyzabc\npqr 
 0: abc
    xyzabc\r\<cr> 
 0: abc
    xyzabc\rpqr\<cr> 
 0: abc
    xyzabc\r\n\<crlf> 
 0: abc
    xyzabc\r\npqr\<crlf> 
 0: abc
    ** Failers
No match
    xyzabc\r 
No match
    xyzabc\rpqr 
No match
    xyzabc\r\n 
No match
    xyzabc\r\npqr 
No match
    
/^abc/Im<cr>
Capturing subpattern count = 0
Options: multiline
Forced newline sequence: CR
First char at start or follows newline
Need char = 'c'
    xyz\rabcdef
 0: abc
    xyz\nabcdef\<lf>
 0: abc
    ** Failers  
No match
    xyz\nabcdef
No match
       
/^abc/Im<lf>
Capturing subpattern count = 0
Options: multiline
Forced newline sequence: LF
First char at start or follows newline
Need char = 'c'
    xyz\nabcdef
 0: abc
    xyz\rabcdef\<cr>
 0: abc
    ** Failers  
No match
    xyz\rabcdef
No match
       
/^abc/Im<crlf>
Capturing subpattern count = 0
Options: multiline
Forced newline sequence: CRLF
First char at start or follows newline
Need char = 'c'
    xyz\r\nabcdef
 0: abc
    xyz\rabcdef\<cr>
 0: abc
    ** Failers  
No match
    xyz\rabcdef
No match
    
/^abc/Im<bad>
Unknown newline type at: <bad>


/abc/I
Capturing subpattern count = 0
No options
First char = 'a'
Need char = 'c'
    xyz\rabc\<bad>
Unknown newline type at: <bad>
    abc  
 0: abc
       
/.*/I<lf>
Capturing subpattern count = 0
Partial matching not supported
Options:
Forced newline sequence: LF
First char at start or follows newline
No need char
    abc\ndef
 0: abc
    abc\rdef
 0: abc\x0ddef
    abc\r\ndef
 0: abc\x0d
    \<cr>abc\ndef
 0: abc\x0adef
    \<cr>abc\rdef
 0: abc
    \<cr>abc\r\ndef
 0: abc
    \<crlf>abc\ndef
 0: abc\x0adef
    \<crlf>abc\rdef
 0: abc\x0ddef
    \<crlf>abc\r\ndef
 0: abc

/\w+(.)(.)?def/Is
Capturing subpattern count = 2
Partial matching not supported
Options: dotall
No first char
Need char = 'f'
    abc\ndef
 0: abc\x0adef
 1: \x0a
    abc\rdef
 0: abc\x0ddef
 1: \x0d
    abc\r\ndef
 0: abc\x0d\x0adef
 1: \x0d
 2: \x0a

+((?:\s|//.*\\n|/[*](?:\\n|.)*?[*]/)*)+I
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
   /* this is a C style comment */\M
Minimum match() limit = 120
Minimum match() recursion limit = 6
 0: /* this is a C style comment */
 1: /* this is a C style comment */

/(?P<B>25[0-5]|2[0-4]\d|[01]?\d?\d)(?:\.(?P>B)){3}/I
Capturing subpattern count = 1
Named capturing subpatterns:
  B   1
No options
No first char
Need char = '.'

/()()()()()()()()()()()()()()()()()()()()
 ()()()()()()()()()()()()()()()()()()()()
 ()()()()()()()()()()()()()()()()()()()()
 ()()()()()()()()()()()()()()()()()()()()
 ()()()()()()()()()()()()()()()()()()()()
 (.(.))/Ix
Capturing subpattern count = 102
Options: extended
No first char
No need char
    XY\O400  
 0: XY
 1: 
 2: 
 3: 
 4: 
 5: 
 6: 
 7: 
 8: 
 9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: 
26: 
27: 
28: 
29: 
30: 
31: 
32: 
33: 
34: 
35: 
36: 
37: 
38: 
39: 
40: 
41: 
42: 
43: 
44: 
45: 
46: 
47: 
48: 
49: 
50: 
51: 
52: 
53: 
54: 
55: 
56: 
57: 
58: 
59: 
60: 
61: 
62: 
63: 
64: 
65: 
66: 
67: 
68: 
69: 
70: 
71: 
72: 
73: 
74: 
75: 
76: 
77: 
78: 
79: 
80: 
81: 
82: 
83: 
84: 
85: 
86: 
87: 
88: 
89: 
90: 
91: 
92: 
93: 
94: 
95: 
96: 
97: 
98: 
99: 
100: 
101: XY
102: Y

/(a*b|(?i:c*(?-i)d))/IS
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
Starting byte set: C a b c d 

/()[ab]xyz/IS
Capturing subpattern count = 1
No options
No first char
Need char = 'z'
Starting byte set: a b 

/(|)[ab]xyz/IS
Capturing subpattern count = 1
No options
No first char
Need char = 'z'
Starting byte set: a b 

/(|c)[ab]xyz/IS
Capturing subpattern count = 1
No options
No first char
Need char = 'z'
Starting byte set: a b c 

/(|c?)[ab]xyz/IS
Capturing subpattern count = 1
No options
No first char
Need char = 'z'
Starting byte set: a b c 

/(d?|c?)[ab]xyz/IS
Capturing subpattern count = 1
No options
No first char
Need char = 'z'
Starting byte set: a b c d 

/(d?|c)[ab]xyz/IS
Capturing subpattern count = 1
No options
No first char
Need char = 'z'
Starting byte set: a b c d 

/^a*b\d/D
------------------------------------------------------------------
  0   9 Bra 0
  3     ^
  4     a*+
  6     b
  8     \d
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: anchored
No first char
Need char = 'b'

/^a*+b\d/D
------------------------------------------------------------------
  0   9 Bra 0
  3     ^
  4     a*+
  6     b
  8     \d
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: anchored
No first char
Need char = 'b'

/^a*?b\d/D
------------------------------------------------------------------
  0   9 Bra 0
  3     ^
  4     a*+
  6     b
  8     \d
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: anchored
No first char
Need char = 'b'

/^a+A\d/D
------------------------------------------------------------------
  0   9 Bra 0
  3     ^
  4     a++
  6     A
  8     \d
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: anchored
No first char
Need char = 'A'
    aaaA5
 0: aaaA5
    ** Failers
No match
    aaaa5 
No match

/^a*A\d/IiD
------------------------------------------------------------------
  0   9 Bra 0
  3     ^
  4     a*
  6  NC A
  8     \d
  9   9 Ket
 12     End
------------------------------------------------------------------
Capturing subpattern count = 0
Partial matching not supported
Options: anchored caseless
No first char
Need char = 'A' (caseless)
    aaaA5
 0: aaaA5
    aaaa5
 0: aaaa5

/(a*|b*)[cd]/IS
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
Starting byte set: a b c d 

/(a+|b*)[cd]/IS
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
Starting byte set: a b c d 

/(a*|b+)[cd]/IS
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
Starting byte set: a b c d 

/(a+|b+)[cd]/IS
Capturing subpattern count = 1
Partial matching not supported
No options
No first char
No need char
Starting byte set: a b 

/((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
 ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
 (((
 a
 ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 ))) 
/Ix  
Capturing subpattern count = 203
Options: extended
First char = 'a'
No need char
  large nest
Matched, but too many substrings
 0: a
 1: a
 2: a
 3: a
 4: a
 5: a
 6: a
 7: a
 8: a
 9: a
10: a
11: a
12: a
13: a
14: a

/a*\d/B
------------------------------------------------------------------
  0   6 Bra 0
  3     a*+
  5     \d
  6   6 Ket
  9     End
------------------------------------------------------------------

/a*\D/B
------------------------------------------------------------------
  0   6 Bra 0
  3     a*
  5     \D
  6   6 Ket
  9     End
------------------------------------------------------------------

/0*\d/B
------------------------------------------------------------------
  0   6 Bra 0
  3     0*
  5     \d
  6   6 Ket
  9     End
------------------------------------------------------------------

/0*\D/B
------------------------------------------------------------------
  0   6 Bra 0
  3     0*+
  5     \D
  6   6 Ket
  9     End
------------------------------------------------------------------

/a*\s/B
------------------------------------------------------------------
  0   6 Bra 0
  3     a*+
  5     \s
  6   6 Ket
  9     End
------------------------------------------------------------------

/a*\S/B
------------------------------------------------------------------
  0   6 Bra 0
  3     a*
  5     \S
  6   6 Ket
  9     End
------------------------------------------------------------------

/ *\s/B
------------------------------------------------------------------
  0   6 Bra 0
  3      *
  5     \s
  6   6 Ket
  9     End
------------------------------------------------------------------

/ *\S/B
------------------------------------------------------------------
  0   6 Bra 0
  3      *+
  5     \S
  6   6 Ket
  9     End
------------------------------------------------------------------

/a*\w/B
------------------------------------------------------------------
  0   6 Bra 0
  3     a*
  5     \w
  6   6 Ket
  9     End
------------------------------------------------------------------

/a*\W/B
------------------------------------------------------------------
  0   6 Bra 0
  3     a*+
  5     \W
  6   6 Ket
  9     End
------------------------------------------------------------------

/=*\w/B
------------------------------------------------------------------
  0   6 Bra 0
  3     =*+
  5     \w
  6   6 Ket
  9     End
------------------------------------------------------------------

/=*\W/B
------------------------------------------------------------------
  0   6 Bra 0
  3     =*
  5     \W
  6   6 Ket
  9     End
------------------------------------------------------------------

/\d*a/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \d*+
  5     a
  7   7 Ket
 10     End
------------------------------------------------------------------

/\d*2/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \d*
  5     2
  7   7 Ket
 10     End
------------------------------------------------------------------

/\d*\d/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \d*
  5     \d
  6   6 Ket
  9     End
------------------------------------------------------------------

/\d*\D/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \d*+
  5     \D
  6   6 Ket
  9     End
------------------------------------------------------------------

/\d*\s/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \d*+
  5     \s
  6   6 Ket
  9     End
------------------------------------------------------------------

/\d*\S/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \d*
  5     \S
  6   6 Ket
  9     End
------------------------------------------------------------------

/\d*\w/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \d*
  5     \w
  6   6 Ket
  9     End
------------------------------------------------------------------

/\d*\W/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \d*+
  5     \W
  6   6 Ket
  9     End
------------------------------------------------------------------

/\D*a/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \D*
  5     a
  7   7 Ket
 10     End
------------------------------------------------------------------

/\D*2/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \D*+
  5     2
  7   7 Ket
 10     End
------------------------------------------------------------------

/\D*\d/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \D*+
  5     \d
  6   6 Ket
  9     End
------------------------------------------------------------------

/\D*\D/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \D*
  5     \D
  6   6 Ket
  9     End
------------------------------------------------------------------

/\D*\s/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \D*
  5     \s
  6   6 Ket
  9     End
------------------------------------------------------------------

/\D*\S/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \D*
  5     \S
  6   6 Ket
  9     End
------------------------------------------------------------------

/\D*\w/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \D*
  5     \w
  6   6 Ket
  9     End
------------------------------------------------------------------

/\D*\W/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \D*
  5     \W
  6   6 Ket
  9     End
------------------------------------------------------------------

/\s*a/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \s*+
  5     a
  7   7 Ket
 10     End
------------------------------------------------------------------

/\s*2/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \s*+
  5     2
  7   7 Ket
 10     End
------------------------------------------------------------------

/\s*\d/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \s*+
  5     \d
  6   6 Ket
  9     End
------------------------------------------------------------------

/\s*\D/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \s*
  5     \D
  6   6 Ket
  9     End
------------------------------------------------------------------

/\s*\s/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \s*
  5     \s
  6   6 Ket
  9     End
------------------------------------------------------------------

/\s*\S/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \s*+
  5     \S
  6   6 Ket
  9     End
------------------------------------------------------------------

/\s*\w/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \s*+
  5     \w
  6   6 Ket
  9     End
------------------------------------------------------------------

/\s*\W/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \s*
  5     \W
  6   6 Ket
  9     End
------------------------------------------------------------------

/\S*a/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \S*
  5     a
  7   7 Ket
 10     End
------------------------------------------------------------------

/\S*2/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \S*
  5     2
  7   7 Ket
 10     End
------------------------------------------------------------------

/\S*\d/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \S*
  5     \d
  6   6 Ket
  9     End
------------------------------------------------------------------

/\S*\D/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \S*
  5     \D
  6   6 Ket
  9     End
------------------------------------------------------------------

/\S*\s/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \S*+
  5     \s
  6   6 Ket
  9     End
------------------------------------------------------------------

/\S*\S/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \S*
  5     \S
  6   6 Ket
  9     End
------------------------------------------------------------------

/\S*\w/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \S*
  5     \w
  6   6 Ket
  9     End
------------------------------------------------------------------

/\S*\W/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \S*
  5     \W
  6   6 Ket
  9     End
------------------------------------------------------------------

/\w*a/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \w*
  5     a
  7   7 Ket
 10     End
------------------------------------------------------------------

/\w*2/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \w*
  5     2
  7   7 Ket
 10     End
------------------------------------------------------------------

/\w*\d/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \w*
  5     \d
  6   6 Ket
  9     End
------------------------------------------------------------------

/\w*\D/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \w*
  5     \D
  6   6 Ket
  9     End
------------------------------------------------------------------

/\w*\s/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \w*+
  5     \s
  6   6 Ket
  9     End
------------------------------------------------------------------

/\w*\S/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \w*
  5     \S
  6   6 Ket
  9     End
------------------------------------------------------------------

/\w*\w/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \w*
  5     \w
  6   6 Ket
  9     End
------------------------------------------------------------------

/\w*\W/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \w*+
  5     \W
  6   6 Ket
  9     End
------------------------------------------------------------------

/\W*a/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \W*+
  5     a
  7   7 Ket
 10     End
------------------------------------------------------------------

/\W*2/B
------------------------------------------------------------------
  0   7 Bra 0
  3     \W*+
  5     2
  7   7 Ket
 10     End
------------------------------------------------------------------

/\W*\d/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \W*+
  5     \d
  6   6 Ket
  9     End
------------------------------------------------------------------

/\W*\D/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \W*
  5     \D
  6   6 Ket
  9     End
------------------------------------------------------------------

/\W*\s/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \W*
  5     \s
  6   6 Ket
  9     End
------------------------------------------------------------------

/\W*\S/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \W*
  5     \S
  6   6 Ket
  9     End
------------------------------------------------------------------

/\W*\w/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \W*+
  5     \w
  6   6 Ket
  9     End
------------------------------------------------------------------

/\W*\W/B
------------------------------------------------------------------
  0   6 Bra 0
  3     \W*
  5     \W
  6   6 Ket
  9     End
------------------------------------------------------------------

/[^a]+a/B
------------------------------------------------------------------
  0   7 Bra 0
  3     [^a]++
  5     a
  7   7 Ket
 10     End
------------------------------------------------------------------

/[^a]+a/Bi
------------------------------------------------------------------
  0   7 Bra 0
  3     [^A]++
  5  NC a
  7   7 Ket
 10     End
------------------------------------------------------------------

/[^a]+A/Bi
------------------------------------------------------------------
  0   7 Bra 0
  3     [^A]++
  5  NC A
  7   7 Ket
 10     End
------------------------------------------------------------------

/[^a]+b/B
------------------------------------------------------------------
  0   7 Bra 0
  3     [^a]+
  5     b
  7   7 Ket
 10     End
------------------------------------------------------------------

/[^a]+\d/B
------------------------------------------------------------------
  0   6 Bra 0
  3     [^a]+
  5     \d
  6   6 Ket
  9     End
------------------------------------------------------------------

/a*[^a]/B
------------------------------------------------------------------
  0   7 Bra 0
  3     a*
  5     [^a]
  7   7 Ket
 10     End
------------------------------------------------------------------

/(?P<abc>x)(?P<xyz>y)/I
Capturing subpattern count = 2
Named capturing subpatterns:
  abc   1
  xyz   2
No options
First char = 'x'
Need char = 'y'
    xy\Cabc\Cxyz
 0: xy
 1: x
 2: y
  C x (1) abc
  C y (1) xyz

/(?<abc>x)(?'xyz'y)/I
Capturing subpattern count = 2
Named capturing subpatterns:
  abc   1
  xyz   2
No options
First char = 'x'
Need char = 'y'
    xy\Cabc\Cxyz
 0: xy
 1: x
 2: y
  C x (1) abc
  C y (1) xyz

/(?<abc'x)(?'xyz'y)/I
Failed: syntax error in subpattern name (missing terminator) at offset 6

/(?<abc>x)(?'xyz>y)/I
Failed: syntax error in subpattern name (missing terminator) at offset 15

/(?P'abc'x)(?P<xyz>y)/I
Failed: unrecognized character after (?P at offset 3

/^(?:(?(ZZ)a|b)(?<ZZ>X))+/
    bXaX
 0: bXaX
 1: X
    bXbX
 0: bX
 1: X
    ** Failers
No match
    aXaX   
No match
    aXbX 
No match

/^(?P>abc)(?<abcd>xxx)/
Failed: reference to non-existent subpattern at offset 8

/^(?P>abc)(?<abc>x|y)/
    xx
 0: xx
 1: x
    xy
 0: xy
 1: y
    yy
 0: yy
 1: y
    yx   
 0: yx
 1: x

/^(?P>abc)(?P<abc>x|y)/
    xx
 0: xx
 1: x
    xy
 0: xy
 1: y
    yy
 0: yy
 1: y
    yx   
 0: yx
 1: x

/^((?(abc)a|b)(?<abc>x|y))+/
    bxay
 0: bxay
 1: ay
 2: y
    bxby 
 0: bx
 1: bx
 2: x
    ** Failers
No match
    axby  
No match

/^(((?P=abc)|X)(?<abc>x|y))+/
    XxXxxx
 0: XxXxxx
 1: xx
 2: x
 3: x
    XxXyyx
 0: XxXyyx
 1: yx
 2: y
 3: x
    XxXyxx
 0: XxXy
 1: Xy
 2: X
 3: y
    ** Failers
No match
    x  
No match

/^(?1)(abc)/
    abcabc
 0: abcabc
 1: abc

/^(?:(?:\1|X)(a|b))+/
    Xaaa
 0: Xaaa
 1: a
    Xaba 
 0: Xa
 1: a

/^[\E\Qa\E-\Qz\E]+/B
------------------------------------------------------------------
  0  38 Bra 0
  3     ^
  4     [a-z]+
 38  38 Ket
 41     End
------------------------------------------------------------------
    
/^[a\Q]bc\E]/B
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\]a-c]
 37  37 Ket
 40     End
------------------------------------------------------------------
    
/^[a-\Q\E]/B
------------------------------------------------------------------
  0  37 Bra 0
  3     ^
  4     [\-a]
 37  37 Ket
 40     End
------------------------------------------------------------------

/^(?P>abc)[()](?<abc>)/B
------------------------------------------------------------------
  0  54 Bra 0
  3     ^
  4   6 Once
  7  46 Recurse
 10   6 Ket
 13     [()]
 46   5 Bra 1
 51   5 Ket
 54  54 Ket
 57     End
------------------------------------------------------------------

/^((?(abc)y)[()](?P<abc>x))+/B
------------------------------------------------------------------
  0  66 Bra 0
  3     ^
  4  59 Bra 1
  9   8 Cond
 12   2 Cond ref
 15     y
 17   8 Ket
 20     [()]
 53   7 Bra 2
 58     x
 60   7 Ket
 63  59 KetRmax
 66  66 Ket
 69     End
------------------------------------------------------------------
    (xy)x
 0: (xy)x
 1: y)x
 2: x
    
/^(?P>abc)\Q()\E(?<abc>)/B 
------------------------------------------------------------------
  0  25 Bra 0
  3     ^
  4   6 Once
  7  17 Recurse
 10   6 Ket
 13     ()
 17   5 Bra 1
 22   5 Ket
 25  25 Ket
 28     End
------------------------------------------------------------------

/^(?P>abc)[a\Q(]\E(](?<abc>)/B 
------------------------------------------------------------------
  0  54 Bra 0
  3     ^
  4   6 Once
  7  46 Recurse
 10   6 Ket
 13     [(\]a]
 46   5 Bra 1
 51   5 Ket
 54  54 Ket
 57     End
------------------------------------------------------------------

/^(?P>abc) # this is (a comment)
  (?<abc>)/Bx 
------------------------------------------------------------------
  0  21 Bra 0
  3     ^
  4   6 Once
  7  13 Recurse
 10   6 Ket
 13   5 Bra 1
 18   5 Ket
 21  21 Ket
 24     End
------------------------------------------------------------------

/^\W*(?:(?<one>(?<two>.)\W*(?&one)\W*\k<two>|)|(?<three>(?<four>.)\W*(?&three)\W*\k'four'|\W*.\W*))\W*$/Ii
Capturing subpattern count = 4
Max back reference = 4
Named capturing subpatterns:
  four    4
  one     1
  three   3
  two     2
Partial matching not supported
Options: anchored caseless
No first char
No need char
    1221
 0: 1221
 1: 1221
 2: 1
    Satan, oscillate my metallic sonatas!
 0: Satan, oscillate my metallic sonatas!
 1: <unset>
 2: <unset>
 3: Satan, oscillate my metallic sonatas
 4: S
    A man, a plan, a canal: Panama!
 0: A man, a plan, a canal: Panama!
 1: <unset>
 2: <unset>
 3: A man, a plan, a canal: Panama
 4: A
    Able was I ere I saw Elba. 
 0: Able was I ere I saw Elba.
 1: <unset>
 2: <unset>
 3: Able was I ere I saw Elba
 4: A
    *** Failers
No match
    The quick brown fox  
No match
    
/(?=(\w+))\1:/I
Capturing subpattern count = 1
Max back reference = 1
Partial matching not supported
No options
No first char
Need char = ':'
    abcd:
 0: abcd:
 1: abcd

/(?=(?'abc'\w+))\k<abc>:/I
Capturing subpattern count = 1
Max back reference = 1
Named capturing subpatterns:
  abc   1
Partial matching not supported
No options
No first char
Need char = ':'
    abcd:
 0: abcd:
 1: abcd

/(?'abc'\w+):\k<abc>{2}/
    a:aaxyz
 0: a:aa
 1: a
    ab:ababxyz
 0: ab:abab
 1: ab
    ** Failers
No match
    a:axyz   
No match
    ab:abxyz 
No match

/(?'abc'a|b)(?<abc>d|e)\k<abc>{2}/J
    adaa
 0: adaa
 1: a
 2: d
    ** Failers
No match
    addd
No match
    adbb   
No match

/(?'abc'a|b)(?<abc>d|e)(?&abc){2}/J
    bdaa
 0: bdaa
 1: b
 2: d
    bdab
 0: bdab
 1: b
 2: d
    ** Failers
No match
    bddd   
No match

/^(?<ab>a)? (?(<ab>)b|c) (?('ab')d|e)/x
    abd
 0: abd
 1: a
    ce 
 0: ce
    
/(?(<bc))/
Failed: malformed number or name after (?( at offset 6

/(?(''))/ 
Failed: assertion expected after (?( at offset 4

/(?('R')stuff)/
Failed: reference to non-existent subpattern at offset 7

/((abc (?(R) (?(R1)1) (?(R2)2) X  |  (?1)  (?2)   (?R) ))) /x
    abcabc1Xabc2XabcXabcabc
 0: abcabc1Xabc2XabcX
 1: abcabc1Xabc2XabcX
 2: abcabc1Xabc2XabcX

/(?<A> (?'B' abc (?(R) (?(R&A)1) (?(R&B)2) X  |  (?1)  (?2)   (?R) ))) /x
    abcabc1Xabc2XabcXabcabc
 0: abcabc1Xabc2XabcX
 1: abcabc1Xabc2XabcX
 2: abcabc1Xabc2XabcX

/(?<A> (?'B' abc (?(R) (?(R&1)1) (?(R&B)2) X  |  (?1)  (?2)   (?R) ))) /x
Failed: reference to non-existent subpattern at offset 29

/(?<1> (?'B' abc (?(R) (?(R&1)1) (?(R&B)2) X  |  (?1)  (?2)   (?R) ))) /x
    abcabc1Xabc2XabcXabcabc
 0: abcabc1Xabc2XabcX
 1: abcabc1Xabc2XabcX
 2: abcabc1Xabc2XabcX

/^(?(DEFINE) (?<A> a) (?<B> b) )  (?&A) (?&B) /x
    abcd
 0: ab
 1: <unset>
 2: <unset>
    
/(?<NAME>(?&NAME_PAT))\s+(?<ADDR>(?&ADDRESS_PAT))
  (?(DEFINE)
  (?<NAME_PAT>[a-z]+)
  (?<ADDRESS_PAT>\d+)
  )/x
    metcalfe 33
 0: metcalfe 33
 1: metcalfe
 2: 33
 3: <unset>
 4: <unset>
 
/^(?(DEFINE) abc | xyz ) /x
Failed: DEFINE group contains more than one branch at offset 22

/(?(DEFINE) abc) xyz/xI
Capturing subpattern count = 0
Options: extended
First char = 'x'
Need char = 'z'

/(?(DEFINE) abc){3} xyz/x
Failed: repeating a DEFINE group is not allowed at offset 17

/(a|)*\d/
  \O0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
No match
  \O0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4
Matched, but too many substrings

/^a.b/<lf>
    a\rb
 0: a\x0db
    a\nb\<cr> 
 0: a\x0ab
    ** Failers
No match
    a\nb
No match
    a\nb\<any>
No match
    a\rb\<cr>   
No match
    a\rb\<any>   
No match

/^abc./mgx<any>
    abc1 \x0aabc2 \x0babc3xx \x0cabc4 \x0dabc5xx \x0d\x0aabc6 \x85abc7 \x{2028}abc8 \x{2029}abc9 JUNK
 0: abc1
 0: abc2
 0: abc3
 0: abc4
 0: abc5
 0: abc6
 0: abc7

/abc.$/mgx<any>
    abc1\x0a abc2\x0b abc3\x0c abc4\x0d abc5\x0d\x0a abc6\x85 abc7\x{2028} abc8\x{2029} abc9
 0: abc1
 0: abc2
 0: abc3
 0: abc4
 0: abc5
 0: abc6
 0: abc9

/a/<cr><any>
Failed: inconsistent NEWLINE options at offset 0

/a/<any><crlf>
Failed: inconsistent NEWLINE options at offset 0

/^a\Rb/
    a\nb
 0: a\x0ab
    a\rb
 0: a\x0db
    a\r\nb
 0: a\x0d\x0ab
    a\x0bb
 0: a\x0bb
    a\x0cb
 0: a\x0cb
    a\x85b   
 0: a\x85b
    ** Failers
No match
    a\n\rb    
No match

/^a\R*b/
    ab
 0: ab
    a\nb
 0: a\x0ab
    a\rb
 0: a\x0db
    a\r\nb
 0: a\x0d\x0ab
    a\x0bb
 0: a\x0bb
    a\x0cb
 0: a\x0cb
    a\x85b   
 0: a\x85b
    a\n\rb    
 0: a\x0a\x0db
    a\n\r\x85\x0cb 
 0: a\x0a\x0d\x85\x0cb

/^a\R+b/
    a\nb
 0: a\x0ab
    a\rb
 0: a\x0db
    a\r\nb
 0: a\x0d\x0ab
    a\x0bb
 0: a\x0bb
    a\x0cb
 0: a\x0cb
    a\x85b   
 0: a\x85b
    a\n\rb    
 0: a\x0a\x0db
    a\n\r\x85\x0cb 
 0: a\x0a\x0d\x85\x0cb
    ** Failers
No match
    ab  
No match
    
/^a\R{1,3}b/
    a\nb
 0: a\x0ab
    a\n\rb
 0: a\x0a\x0db
    a\n\r\x85b
 0: a\x0a\x0d\x85b
    a\r\n\r\nb 
 0: a\x0d\x0a\x0d\x0ab
    a\r\n\r\n\r\nb 
 0: a\x0d\x0a\x0d\x0a\x0d\x0ab
    a\n\r\n\rb
 0: a\x0a\x0d\x0a\x0db
    a\n\n\r\nb 
 0: a\x0a\x0a\x0d\x0ab
    ** Failers
No match
    a\n\n\n\rb
No match
    a\r
No match

/^a[\R]b/
    aRb
 0: aRb
    ** Failers
No match
    a\nb  
No match

/(?&abc)X(?<abc>P)/I
Capturing subpattern count = 1
Named capturing subpatterns:
  abc   1
No options
No first char
Need char = 'P'
    abcPXP123
 0: PXP
 1: P

/(?1)X(?<abc>P)/I
Capturing subpattern count = 1
Named capturing subpatterns:
  abc   1
No options
No first char
Need char = 'P'
    abcPXP123
 0: PXP
 1: P

/(?(DEFINE)(?<byte>2[0-4]\d|25[0-5]|1\d\d|[1-9]?\d))\b(?&byte)(\.(?&byte)){3}/
    1.2.3.4
 0: 1.2.3.4
 1: <unset>
 2: .4
    131.111.10.206
 0: 131.111.10.206
 1: <unset>
 2: .206
    10.0.0.0
 0: 10.0.0.0
 1: <unset>
 2: .0
    ** Failers
No match
    10.6
No match
    455.3.4.5   
No match

/\b(?&byte)(\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\d|25[0-5]|1\d\d|[1-9]?\d))/
    1.2.3.4
 0: 1.2.3.4
 1: .4
 2: <unset>
    131.111.10.206
 0: 131.111.10.206
 1: .206
 2: <unset>
    10.0.0.0
 0: 10.0.0.0
 1: .0
 2: <unset>
    ** Failers
No match
    10.6
No match
    455.3.4.5   
No match
    
/(?:a(?&abc)b)*(?<abc>x)/
    123axbaxbaxbx456
 0: axbaxbaxbx
 1: x
    123axbaxbaxb456
 0: x
 1: x
      
/(?:a(?&abc)b){1,5}(?<abc>x)/
    123axbaxbaxbx456
 0: axbaxbaxbx
 1: x

/(?:a(?&abc)b){2,5}(?<abc>x)/
    123axbaxbaxbx456
 0: axbaxbaxbx
 1: x

/(?:a(?&abc)b){2,}(?<abc>x)/
    123axbaxbaxbx456
 0: axbaxbaxbx
 1: x

/(abc)(?i:(?1))/
   defabcabcxyz
 0: abcabc
 1: abc
   DEFabcABCXYZ
No match

/(abc)(?:(?i)(?1))/
   defabcabcxyz
 0: abcabc
 1: abc
   DEFabcABCXYZ
No match

/^(a(b))\1\g1\g{1}\g-1\g{-1}\g{-02}Z/
    ababababbbabZXXXX
 0: ababababbbabZ
 1: ab
 2: b

/^(a)\g-2/
Failed: reference to non-existent subpattern at offset 4

/^(a)\g/
Failed: \g is not followed by an (optionally braced) non-zero number at offset 4

/^(a)\g{0}/
Failed: \g is not followed by an (optionally braced) non-zero number at offset 4

/^(a)\g{3/
Failed: \g is not followed by an (optionally braced) non-zero number at offset 4

/^(a)\g{4a}/
Failed: \g is not followed by an (optionally braced) non-zero number at offset 4

/^a.b/<lf>
    a\rb
 0: a\x0db
    *** Failers
No match
    a\nb
No match

/.+foo/
    afoo
 0: afoo
    ** Failers 
No match
    \r\nfoo 
No match
    \nfoo 
No match

/.+foo/<crlf>
    afoo
 0: afoo
    \nfoo 
 0: \x0afoo
    ** Failers 
No match
    \r\nfoo 
No match

/.+foo/<any>
    afoo
 0: afoo
    ** Failers 
No match
    \nfoo 
No match
    \r\nfoo 
No match

/.+foo/s
    afoo
 0: afoo
    \r\nfoo 
 0: \x0d\x0afoo
    \nfoo 
 0: \x0afoo

/ End of testinput2 /
